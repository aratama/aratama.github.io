(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// Generated by psc-bundle 0.7.6.1
	var PS = { };
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Prelude

	  //- Functor --------------------------------------------------------------------

	  exports.arrayMap = function (f) {
	    return function (arr) {
	      var l = arr.length;
	      var result = new Array(l);
	      for (var i = 0; i < l; i++) {
	        result[i] = f(arr[i]);
	      }
	      return result;
	    };
	  };

	  //- Bind -----------------------------------------------------------------------

	  exports.arrayBind = function (arr) {
	    return function (f) {
	      var result = [];
	      for (var i = 0, l = arr.length; i < l; i++) {
	        Array.prototype.push.apply(result, f(arr[i]));
	      }
	      return result;
	    };
	  };

	  //- Monoid ---------------------------------------------------------------------

	  exports.concatString = function (s1) {
	    return function (s2) {
	      return s1 + s2;
	    };
	  };

	  exports.concatArray = function (xs) {
	    return function (ys) {
	      return xs.concat(ys);
	    };
	  };

	  exports.numAdd = function (n1) {
	    return function (n2) {
	      return n1 + n2;
	    };
	  };

	  exports.numMul = function (n1) {
	    return function (n2) {
	      return n1 * n2;
	    };
	  };

	  //- Eq -------------------------------------------------------------------------

	  exports.refEq = function (r1) {
	    return function (r2) {
	      return r1 === r2;
	    };
	  };

	  exports.eqArrayImpl = function (f) {
	    return function (xs) {
	      return function (ys) {
	        if (xs.length !== ys.length) return false;
	        for (var i = 0; i < xs.length; i++) {
	          if (!f(xs[i])(ys[i])) return false;
	        }
	        return true;
	      };
	    };
	  };

	  //- Ord ------------------------------------------------------------------------

	  exports.unsafeCompareImpl = function (lt) {
	    return function (eq) {
	      return function (gt) {
	        return function (x) {
	          return function (y) {
	            return x < y ? lt : x > y ? gt : eq;
	          };
	        };
	      };
	    };
	  };

	  //- Bounded --------------------------------------------------------------------

	  exports.topInt = 2147483647;
	  exports.bottomInt = -2147483648;            

	  //- BooleanAlgebra -------------------------------------------------------------

	  exports.boolOr = function (b1) {
	    return function (b2) {
	      return b1 || b2;
	    };
	  };

	  exports.boolAnd = function (b1) {
	    return function (b2) {
	      return b1 && b2;
	    };
	  };

	  exports.boolNot = function (b) {
	    return !b;
	  };

	  //- Show -----------------------------------------------------------------------

	  exports.showIntImpl = function (n) {
	    return n.toString();
	  };

	  exports.showNumberImpl = function (n) {
	    /* jshint bitwise: false */
	    return n === (n | 0) ? n + ".0" : n.toString();
	  };

	  exports.showStringImpl = function (s) {
	    return JSON.stringify(s);
	  };

	  exports.showArrayImpl = function (f) {
	    return function (xs) {
	      var ss = [];
	      for (var i = 0, l = xs.length; i < l; i++) {
	        ss[i] = f(xs[i]);
	      }
	      return "[" + ss.join(",") + "]";
	    };
	  };
	 
	})(PS["Prelude"] = PS["Prelude"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Prelude"];
	  var LT = (function () {
	      function LT() {

	      };
	      LT.value = new LT();
	      return LT;
	  })();
	  var GT = (function () {
	      function GT() {

	      };
	      GT.value = new GT();
	      return GT;
	  })();
	  var EQ = (function () {
	      function EQ() {

	      };
	      EQ.value = new EQ();
	      return EQ;
	  })();
	  var Semigroupoid = function (compose) {
	      this.compose = compose;
	  };
	  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
	      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
	      this.id = id;
	  };
	  var Functor = function (map) {
	      this.map = map;
	  };
	  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
	      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
	      this.apply = apply;
	  };
	  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
	      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
	      this.pure = pure;
	  };
	  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
	      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
	      this.bind = bind;
	  };
	  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
	      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
	      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
	  };
	  var Semigroup = function (append) {
	      this.append = append;
	  };
	  var Semiring = function (add, mul, one, zero) {
	      this.add = add;
	      this.mul = mul;
	      this.one = one;
	      this.zero = zero;
	  };
	  var Eq = function (eq) {
	      this.eq = eq;
	  };
	  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
	      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
	      this.compare = compare;
	  };
	  var Bounded = function (bottom, top) {
	      this.bottom = bottom;
	      this.top = top;
	  };
	  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
	      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
	      this.conj = conj;
	      this.disj = disj;
	      this.not = not;
	  };
	  var Show = function (show) {
	      this.show = show;
	  };
	  var $dollar = function (f) {
	      return function (x) {
	          return f(x);
	      };
	  };
	  var zero = function (dict) {
	      return dict.zero;
	  };
	  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
	  var unit = {};
	  var top = function (dict) {
	      return dict.top;
	  }; 
	  var showString = new Show($foreign.showStringImpl);
	  var showNumber = new Show($foreign.showNumberImpl);
	  var showInt = new Show($foreign.showIntImpl);
	  var show = function (dict) {
	      return dict.show;
	  };
	  var showArray = function (__dict_Show_1) {
	      return new Show($foreign.showArrayImpl(show(__dict_Show_1)));
	  };             
	  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
	  var semigroupoidFn = new Semigroupoid(function (f) {
	      return function (g) {
	          return function (x) {
	              return f(g(x));
	          };
	      };
	  });
	  var semigroupString = new Semigroup($foreign.concatString);
	  var semigroupArray = new Semigroup($foreign.concatArray);
	  var pure = function (dict) {
	      return dict.pure;
	  };
	  var $$return = function (__dict_Applicative_2) {
	      return pure(__dict_Applicative_2);
	  };
	  var otherwise = true;
	  var one = function (dict) {
	      return dict.one;
	  };
	  var not = function (dict) {
	      return dict.not;
	  };
	  var mul = function (dict) {
	      return dict.mul;
	  };
	  var map = function (dict) {
	      return dict.map;
	  };
	  var $less$dollar$greater = function (__dict_Functor_5) {
	      return map(__dict_Functor_5);
	  };
	  var $less$hash$greater = function (__dict_Functor_6) {
	      return function (fa) {
	          return function (f) {
	              return $less$dollar$greater(__dict_Functor_6)(f)(fa);
	          };
	      };
	  };
	  var id = function (dict) {
	      return dict.id;
	  };
	  var functorArray = new Functor($foreign.arrayMap);
	  var flip = function (f) {
	      return function (b) {
	          return function (a) {
	              return f(a)(b);
	          };
	      };
	  }; 
	  var eqString = new Eq($foreign.refEq);
	  var ordString = new Ord(function () {
	      return eqString;
	  }, unsafeCompare);
	  var eqNumber = new Eq($foreign.refEq);
	  var ordNumber = new Ord(function () {
	      return eqNumber;
	  }, unsafeCompare);
	  var eqInt = new Eq($foreign.refEq);
	  var ordInt = new Ord(function () {
	      return eqInt;
	  }, unsafeCompare);
	  var eqChar = new Eq($foreign.refEq);
	  var ordChar = new Ord(function () {
	      return eqChar;
	  }, unsafeCompare);
	  var eqBoolean = new Eq($foreign.refEq);
	  var ordBoolean = new Ord(function () {
	      return eqBoolean;
	  }, unsafeCompare);
	  var eq = function (dict) {
	      return dict.eq;
	  };
	  var $eq$eq = function (__dict_Eq_7) {
	      return eq(__dict_Eq_7);
	  };
	  var eqArray = function (__dict_Eq_8) {
	      return new Eq($foreign.eqArrayImpl($eq$eq(__dict_Eq_8)));
	  };
	  var disj = function (dict) {
	      return dict.disj;
	  };
	  var $$const = function (a) {
	      return function (_3) {
	          return a;
	      };
	  };
	  var $$void = function (__dict_Functor_12) {
	      return function (fa) {
	          return $less$dollar$greater(__dict_Functor_12)($$const(unit))(fa);
	      };
	  };
	  var conj = function (dict) {
	      return dict.conj;
	  };
	  var compose = function (dict) {
	      return dict.compose;
	  };
	  var functorFn = new Functor(compose(semigroupoidFn));
	  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
	      return flip(compose(__dict_Semigroupoid_15));
	  };
	  var compare = function (dict) {
	      return dict.compare;
	  };
	  var $less = function (__dict_Ord_17) {
	      return function (a1) {
	          return function (a2) {
	              var _47 = compare(__dict_Ord_17)(a1)(a2);
	              if (_47 instanceof LT) {
	                  return true;
	              };
	              return false;
	          };
	      };
	  };
	  var categoryFn = new Category(function () {
	      return semigroupoidFn;
	  }, function (x) {
	      return x;
	  });
	  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
	  var boundedBoolean = new Bounded(false, true);
	  var bottom = function (dict) {
	      return dict.bottom;
	  };
	  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
	      return boundedBoolean;
	  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
	  var $div$eq = function (__dict_Eq_9) {
	      return function (x) {
	          return function (y) {
	              return not(booleanAlgebraBoolean)($eq$eq(__dict_Eq_9)(x)(y));
	          };
	      };
	  };
	  var bind = function (dict) {
	      return dict.bind;
	  };
	  var liftM1 = function (__dict_Monad_23) {
	      return function (f) {
	          return function (a) {
	              return bind(__dict_Monad_23["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
	                  return $$return(__dict_Monad_23["__superclass_Prelude.Applicative_0"]())(f(_0));
	              });
	          };
	      };
	  };
	  var $greater$greater$eq = function (__dict_Bind_24) {
	      return bind(__dict_Bind_24);
	  }; 
	  var apply = function (dict) {
	      return dict.apply;
	  };
	  var $less$times$greater = function (__dict_Apply_25) {
	      return apply(__dict_Apply_25);
	  };
	  var liftA1 = function (__dict_Applicative_26) {
	      return function (f) {
	          return function (a) {
	              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
	          };
	      };
	  }; 
	  var append = function (dict) {
	      return dict.append;
	  };
	  var $plus$plus = function (__dict_Semigroup_27) {
	      return append(__dict_Semigroup_27);
	  };
	  var $less$greater = function (__dict_Semigroup_28) {
	      return append(__dict_Semigroup_28);
	  };
	  var ap = function (__dict_Monad_30) {
	      return function (f) {
	          return function (a) {
	              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
	                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
	                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
	                  });
	              });
	          };
	      };
	  };
	  var monadArray = new Monad(function () {
	      return applicativeArray;
	  }, function () {
	      return bindArray;
	  });
	  var bindArray = new Bind(function () {
	      return applyArray;
	  }, $foreign.arrayBind);
	  var applyArray = new Apply(function () {
	      return functorArray;
	  }, ap(monadArray));
	  var applicativeArray = new Applicative(function () {
	      return applyArray;
	  }, function (x) {
	      return [ x ];
	  });
	  var add = function (dict) {
	      return dict.add;
	  };
	  var $plus = function (__dict_Semiring_31) {
	      return add(__dict_Semiring_31);
	  };
	  exports["LT"] = LT;
	  exports["GT"] = GT;
	  exports["EQ"] = EQ;
	  exports["Show"] = Show;
	  exports["BooleanAlgebra"] = BooleanAlgebra;
	  exports["Bounded"] = Bounded;
	  exports["Ord"] = Ord;
	  exports["Eq"] = Eq;
	  exports["Semiring"] = Semiring;
	  exports["Semigroup"] = Semigroup;
	  exports["Monad"] = Monad;
	  exports["Bind"] = Bind;
	  exports["Applicative"] = Applicative;
	  exports["Apply"] = Apply;
	  exports["Functor"] = Functor;
	  exports["Category"] = Category;
	  exports["Semigroupoid"] = Semigroupoid;
	  exports["show"] = show;
	  exports["not"] = not;
	  exports["disj"] = disj;
	  exports["conj"] = conj;
	  exports["bottom"] = bottom;
	  exports["top"] = top;
	  exports["unsafeCompare"] = unsafeCompare;
	  exports["<"] = $less;
	  exports["compare"] = compare;
	  exports["/="] = $div$eq;
	  exports["=="] = $eq$eq;
	  exports["eq"] = eq;
	  exports["+"] = $plus;
	  exports["one"] = one;
	  exports["mul"] = mul;
	  exports["zero"] = zero;
	  exports["add"] = add;
	  exports["++"] = $plus$plus;
	  exports["<>"] = $less$greater;
	  exports["append"] = append;
	  exports["ap"] = ap;
	  exports["liftM1"] = liftM1;
	  exports["return"] = $$return;
	  exports[">>="] = $greater$greater$eq;
	  exports["bind"] = bind;
	  exports["liftA1"] = liftA1;
	  exports["pure"] = pure;
	  exports["<*>"] = $less$times$greater;
	  exports["apply"] = apply;
	  exports["void"] = $$void;
	  exports["<#>"] = $less$hash$greater;
	  exports["<$>"] = $less$dollar$greater;
	  exports["map"] = map;
	  exports["id"] = id;
	  exports[">>>"] = $greater$greater$greater;
	  exports["compose"] = compose;
	  exports["otherwise"] = otherwise;
	  exports["const"] = $$const;
	  exports["flip"] = flip;
	  exports["$"] = $dollar;
	  exports["unit"] = unit;
	  exports["semigroupoidFn"] = semigroupoidFn;
	  exports["categoryFn"] = categoryFn;
	  exports["functorFn"] = functorFn;
	  exports["functorArray"] = functorArray;
	  exports["applyArray"] = applyArray;
	  exports["applicativeArray"] = applicativeArray;
	  exports["bindArray"] = bindArray;
	  exports["monadArray"] = monadArray;
	  exports["semigroupString"] = semigroupString;
	  exports["semigroupArray"] = semigroupArray;
	  exports["semiringNumber"] = semiringNumber;
	  exports["eqBoolean"] = eqBoolean;
	  exports["eqInt"] = eqInt;
	  exports["eqNumber"] = eqNumber;
	  exports["eqChar"] = eqChar;
	  exports["eqString"] = eqString;
	  exports["eqArray"] = eqArray;
	  exports["ordBoolean"] = ordBoolean;
	  exports["ordInt"] = ordInt;
	  exports["ordNumber"] = ordNumber;
	  exports["ordString"] = ordString;
	  exports["ordChar"] = ordChar;
	  exports["boundedBoolean"] = boundedBoolean;
	  exports["boundedInt"] = boundedInt;
	  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
	  exports["showInt"] = showInt;
	  exports["showNumber"] = showNumber;
	  exports["showString"] = showString;
	  exports["showArray"] = showArray;;
	 
	})(PS["Prelude"] = PS["Prelude"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Foldable

	  exports.foldrArray = function (f) {
	    return function (init) {
	      return function (xs) {
	        var acc = init;
	        var len = xs.length;
	        for (var i = len - 1; i >= 0; i--) {
	          acc = f(xs[i])(acc);
	        }
	        return acc;
	      };
	    };
	  };

	  exports.foldlArray = function (f) {
	    return function (init) {
	      return function (xs) {
	        var acc = init;
	        var len = xs.length;
	        for (var i = 0; i < len; i++) {
	          acc = f(acc)(xs[i]);
	        }
	        return acc;
	      };
	    };
	  };
	 
	})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var $less$times = function (__dict_Apply_0) {
	      return function (a) {
	          return function (b) {
	              return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
	          };
	      };
	  };
	  var $times$greater = function (__dict_Apply_1) {
	      return function (a) {
	          return function (b) {
	              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
	          };
	      };
	  };
	  exports["*>"] = $times$greater;
	  exports["<*"] = $less$times;;
	 
	})(PS["Control.Apply"] = PS["Control.Apply"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
	      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
	      this.alt = alt;
	  };
	  var altArray = new Alt(function () {
	      return Prelude.functorArray;
	  }, Prelude.append(Prelude.semigroupArray));
	  var alt = function (dict) {
	      return dict.alt;
	  };
	  var $less$bar$greater = function (__dict_Alt_0) {
	      return alt(__dict_Alt_0);
	  };
	  exports["Alt"] = Alt;
	  exports["<|>"] = $less$bar$greater;
	  exports["alt"] = alt;
	  exports["altArray"] = altArray;;
	 
	})(PS["Control.Alt"] = PS["Control.Alt"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];     
	  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
	      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
	      this.empty = empty;
	  };
	  var plusArray = new Plus(function () {
	      return Control_Alt.altArray;
	  }, [  ]);
	  var empty = function (dict) {
	      return dict.empty;
	  };
	  exports["Plus"] = Plus;
	  exports["empty"] = empty;
	  exports["plusArray"] = plusArray;;
	 
	})(PS["Control.Plus"] = PS["Control.Plus"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Plus = PS["Control.Plus"];     
	  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
	      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
	      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
	  };
	  var alternativeArray = new Alternative(function () {
	      return Control_Plus.plusArray;
	  }, function () {
	      return Prelude.applicativeArray;
	  });
	  exports["Alternative"] = Alternative;
	  exports["alternativeArray"] = alternativeArray;;
	 
	})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
	      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
	      this.mempty = mempty;
	  };               
	  var monoidString = new Monoid(function () {
	      return Prelude.semigroupString;
	  }, "");
	  var monoidArray = new Monoid(function () {
	      return Prelude.semigroupArray;
	  }, [  ]);
	  var mempty = function (dict) {
	      return dict.mempty;
	  };
	  exports["Monoid"] = Monoid;
	  exports["mempty"] = mempty;
	  exports["monoidString"] = monoidString;
	  exports["monoidArray"] = monoidArray;;
	 
	})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Extend = PS["Control.Extend"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];
	  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
	  var Data_Monoid = PS["Data.Monoid"];     
	  var Nothing = (function () {
	      function Nothing() {

	      };
	      Nothing.value = new Nothing();
	      return Nothing;
	  })();
	  var Just = (function () {
	      function Just(value0) {
	          this.value0 = value0;
	      };
	      Just.create = function (value0) {
	          return new Just(value0);
	      };
	      return Just;
	  })();
	  var semigroupMaybe = function (__dict_Semigroup_2) {
	      return new Prelude.Semigroup(function (_7) {
	          return function (_8) {
	              if (_7 instanceof Nothing) {
	                  return _8;
	              };
	              if (_8 instanceof Nothing) {
	                  return _7;
	              };
	              if (_7 instanceof Just && _8 instanceof Just) {
	                  return new Just(Prelude["<>"](__dict_Semigroup_2)(_7.value0)(_8.value0));
	              };
	              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 236, column 1: " + [ _7.constructor.name, _8.constructor.name ]);
	          };
	      });
	  };
	  var monoidMaybe = function (__dict_Semigroup_6) {
	      return new Data_Monoid.Monoid(function () {
	          return semigroupMaybe(__dict_Semigroup_6);
	      }, Nothing.value);
	  };
	  var maybe = function (b) {
	      return function (f) {
	          return function (_0) {
	              if (_0 instanceof Nothing) {
	                  return b;
	              };
	              if (_0 instanceof Just) {
	                  return f(_0.value0);
	              };
	              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, _0.constructor.name ]);
	          };
	      };
	  };                                                   
	  var isJust = maybe(false)(Prelude["const"](true));
	  var functorMaybe = new Prelude.Functor(function (fn) {
	      return function (_2) {
	          if (_2 instanceof Just) {
	              return new Just(fn(_2.value0));
	          };
	          return Nothing.value;
	      };
	  });
	  var fromMaybe = function (a) {
	      return maybe(a)(Prelude.id(Prelude.categoryFn));
	  }; 
	  var eqMaybe = function (__dict_Eq_8) {
	      return new Prelude.Eq(function (_9) {
	          return function (_10) {
	              if (_9 instanceof Nothing && _10 instanceof Nothing) {
	                  return true;
	              };
	              if (_9 instanceof Just && _10 instanceof Just) {
	                  return Prelude["=="](__dict_Eq_8)(_9.value0)(_10.value0);
	              };
	              return false;
	          };
	      });
	  };
	  var applyMaybe = new Prelude.Apply(function () {
	      return functorMaybe;
	  }, function (_3) {
	      return function (x) {
	          if (_3 instanceof Just) {
	              return Prelude["<$>"](functorMaybe)(_3.value0)(x);
	          };
	          if (_3 instanceof Nothing) {
	              return Nothing.value;
	          };
	          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ _3.constructor.name, x.constructor.name ]);
	      };
	  });
	  var bindMaybe = new Prelude.Bind(function () {
	      return applyMaybe;
	  }, function (_5) {
	      return function (k) {
	          if (_5 instanceof Just) {
	              return k(_5.value0);
	          };
	          if (_5 instanceof Nothing) {
	              return Nothing.value;
	          };
	          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ _5.constructor.name, k.constructor.name ]);
	      };
	  });
	  var applicativeMaybe = new Prelude.Applicative(function () {
	      return applyMaybe;
	  }, Just.create);
	  var altMaybe = new Control_Alt.Alt(function () {
	      return functorMaybe;
	  }, function (_4) {
	      return function (r) {
	          if (_4 instanceof Nothing) {
	              return r;
	          };
	          return _4;
	      };
	  });
	  exports["Nothing"] = Nothing;
	  exports["Just"] = Just;
	  exports["isJust"] = isJust;
	  exports["fromMaybe"] = fromMaybe;
	  exports["maybe"] = maybe;
	  exports["functorMaybe"] = functorMaybe;
	  exports["applyMaybe"] = applyMaybe;
	  exports["applicativeMaybe"] = applicativeMaybe;
	  exports["altMaybe"] = altMaybe;
	  exports["bindMaybe"] = bindMaybe;
	  exports["semigroupMaybe"] = semigroupMaybe;
	  exports["monoidMaybe"] = monoidMaybe;
	  exports["eqMaybe"] = eqMaybe;;
	 
	})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Comonad = PS["Control.Comonad"];
	  var Control_Extend = PS["Control.Extend"];
	  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var semigroupFirst = new Prelude.Semigroup(function (_11) {
	      return function (second) {
	          if (_11 instanceof Data_Maybe.Just) {
	              return _11;
	          };
	          return second;
	      };
	  });
	  var runFirst = function (_0) {
	      return _0;
	  };
	  var monoidFirst = new Data_Monoid.Monoid(function () {
	      return semigroupFirst;
	  }, Data_Maybe.Nothing.value);
	  exports["runFirst"] = runFirst;
	  exports["semigroupFirst"] = semigroupFirst;
	  exports["monoidFirst"] = monoidFirst;;
	 
	})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Comonad = PS["Control.Comonad"];
	  var Control_Extend = PS["Control.Extend"];
	  var Data_Monoid = PS["Data.Monoid"];     
	  var Disj = function (x) {
	      return x;
	  };
	  var semigroupDisj = function (__dict_BooleanAlgebra_2) {
	      return new Prelude.Semigroup(function (_10) {
	          return function (_11) {
	              return Prelude.disj(__dict_BooleanAlgebra_2)(_10)(_11);
	          };
	      });
	  };
	  var runDisj = function (_0) {
	      return _0;
	  };
	  var monoidDisj = function (__dict_BooleanAlgebra_4) {
	      return new Data_Monoid.Monoid(function () {
	          return semigroupDisj(__dict_BooleanAlgebra_4);
	      }, Prelude.bottom(__dict_BooleanAlgebra_4["__superclass_Prelude.Bounded_0"]()));
	  };
	  exports["Disj"] = Disj;
	  exports["runDisj"] = runDisj;
	  exports["semigroupDisj"] = semigroupDisj;
	  exports["monoidDisj"] = monoidDisj;;
	 
	})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Foldable"];
	  var Prelude = PS["Prelude"];
	  var Control_Apply = PS["Control.Apply"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Maybe_First = PS["Data.Maybe.First"];
	  var Data_Maybe_Last = PS["Data.Maybe.Last"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
	  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
	  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
	  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
	  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
	  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
	  var Foldable = function (foldMap, foldl, foldr) {
	      this.foldMap = foldMap;
	      this.foldl = foldl;
	      this.foldr = foldr;
	  };
	  var foldr = function (dict) {
	      return dict.foldr;
	  };
	  var traverse_ = function (__dict_Applicative_0) {
	      return function (__dict_Foldable_1) {
	          return function (f) {
	              return foldr(__dict_Foldable_1)(function (_109) {
	                  return Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(f(_109));
	              })(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
	          };
	      };
	  };
	  var for_ = function (__dict_Applicative_2) {
	      return function (__dict_Foldable_3) {
	          return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
	      };
	  };
	  var foldl = function (dict) {
	      return dict.foldl;
	  };
	  var intercalate = function (__dict_Foldable_6) {
	      return function (__dict_Monoid_7) {
	          return function (sep) {
	              return function (xs) {
	                  var go = function (_24) {
	                      return function (x) {
	                          if (_24.init) {
	                              return {
	                                  init: false, 
	                                  acc: x
	                              };
	                          };
	                          return {
	                              init: false, 
	                              acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_24.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
	                          };
	                      };
	                  };
	                  return (foldl(__dict_Foldable_6)(go)({
	                      init: true, 
	                      acc: Data_Monoid.mempty(__dict_Monoid_7)
	                  })(xs)).acc;
	              };
	          };
	      };
	  };
	  var mconcat = function (__dict_Foldable_11) {
	      return function (__dict_Monoid_12) {
	          return foldl(__dict_Foldable_11)(Prelude["<>"](__dict_Monoid_12["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_12));
	      };
	  }; 
	  var foldMapDefaultR = function (__dict_Foldable_26) {
	      return function (__dict_Monoid_27) {
	          return function (f) {
	              return function (xs) {
	                  return foldr(__dict_Foldable_26)(function (x) {
	                      return function (acc) {
	                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
	                      };
	                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
	              };
	          };
	      };
	  };
	  var foldableArray = new Foldable(function (__dict_Monoid_28) {
	      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
	  }, $foreign.foldlArray, $foreign.foldrArray);
	  var foldMap = function (dict) {
	      return dict.foldMap;
	  };
	  var any = function (__dict_Foldable_38) {
	      return function (__dict_BooleanAlgebra_39) {
	          return function (p) {
	              return function (_112) {
	                  return Data_Monoid_Disj.runDisj(foldMap(__dict_Foldable_38)(Data_Monoid_Disj.monoidDisj(__dict_BooleanAlgebra_39))(function (_113) {
	                      return Data_Monoid_Disj.Disj(p(_113));
	                  })(_112));
	              };
	          };
	      };
	  };
	  var elem = function (__dict_Foldable_40) {
	      return function (__dict_Eq_41) {
	          return function (_114) {
	              return any(__dict_Foldable_40)(Prelude.booleanAlgebraBoolean)(Prelude["=="](__dict_Eq_41)(_114));
	          };
	      };
	  };
	  var notElem = function (__dict_Foldable_42) {
	      return function (__dict_Eq_43) {
	          return function (x) {
	              return function (_115) {
	                  return !elem(__dict_Foldable_42)(__dict_Eq_43)(x)(_115);
	              };
	          };
	      };
	  };
	  exports["Foldable"] = Foldable;
	  exports["notElem"] = notElem;
	  exports["elem"] = elem;
	  exports["any"] = any;
	  exports["intercalate"] = intercalate;
	  exports["mconcat"] = mconcat;
	  exports["for_"] = for_;
	  exports["traverse_"] = traverse_;
	  exports["foldMapDefaultR"] = foldMapDefaultR;
	  exports["foldMap"] = foldMap;
	  exports["foldl"] = foldl;
	  exports["foldr"] = foldr;
	  exports["foldableArray"] = foldableArray;;
	 
	})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Traversable

	  // jshint maxparams: 3

	  exports.traverseArrayImpl = function () {
	    function Cont (fn) {
	      this.fn = fn;
	    }

	    var emptyList = {};

	    var ConsCell = function (head, tail) {
	      this.head = head;
	      this.tail = tail;
	    };

	    function consList (x) {
	      return function (xs) {
	        return new ConsCell(x, xs);
	      };
	    }

	    function listToArray (list) {
	      var arr = [];
	      while (list !== emptyList) {
	        arr.push(list.head);
	        list = list.tail;
	      }
	      return arr;
	    }

	    return function (apply) {
	      return function (map) {
	        return function (pure) {
	          return function (f) {
	            var buildFrom = function (x, ys) {
	              return apply(map(consList)(f(x)))(ys);
	            };

	            var go = function (acc, currentLen, xs) {
	              if (currentLen === 0) {
	                return acc;
	              } else {
	                var last = xs[currentLen - 1];
	                return new Cont(function () {
	                  return go(buildFrom(last, acc), currentLen - 1, xs);
	                });
	              }
	            };

	            return function (array) {
	              var result = go(pure(emptyList), array.length, array);
	              while (result instanceof Cont) {
	                result = result.fn();
	              }

	              return map(listToArray)(result);
	            };
	          };
	        };
	      };
	    };
	  }();
	 
	})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Traversable"];
	  var Prelude = PS["Prelude"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Maybe_First = PS["Data.Maybe.First"];
	  var Data_Maybe_Last = PS["Data.Maybe.Last"];
	  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
	  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
	  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
	  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
	  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
	  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
	      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
	      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
	      this.sequence = sequence;
	      this.traverse = traverse;
	  };
	  var traverse = function (dict) {
	      return dict.traverse;
	  };
	  var sequenceDefault = function (__dict_Traversable_12) {
	      return function (__dict_Applicative_13) {
	          return function (tma) {
	              return traverse(__dict_Traversable_12)(__dict_Applicative_13)(Prelude.id(Prelude.categoryFn))(tma);
	          };
	      };
	  };
	  var traversableArray = new Traversable(function () {
	      return Data_Foldable.foldableArray;
	  }, function () {
	      return Prelude.functorArray;
	  }, function (__dict_Applicative_15) {
	      return sequenceDefault(traversableArray)(__dict_Applicative_15);
	  }, function (__dict_Applicative_14) {
	      return $foreign.traverseArrayImpl(Prelude.apply(__dict_Applicative_14["__superclass_Prelude.Apply_0"]()))(Prelude.map((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(__dict_Applicative_14));
	  });
	  var sequence = function (dict) {
	      return dict.sequence;
	  }; 
	  var $$for = function (__dict_Applicative_26) {
	      return function (__dict_Traversable_27) {
	          return function (x) {
	              return function (f) {
	                  return traverse(__dict_Traversable_27)(__dict_Applicative_26)(f)(x);
	              };
	          };
	      };
	  };
	  exports["Traversable"] = Traversable;
	  exports["for"] = $$for;
	  exports["sequenceDefault"] = sequenceDefault;
	  exports["sequence"] = sequence;
	  exports["traverse"] = traverse;
	  exports["traversableArray"] = traversableArray;;
	 
	})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Plus = PS["Control.Plus"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Traversable = PS["Data.Traversable"];     
	  var NonEmpty = (function () {
	      function NonEmpty(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      NonEmpty.create = function (value0) {
	          return function (value1) {
	              return new NonEmpty(value0, value1);
	          };
	      };
	      return NonEmpty;
	  })();
	  var $colon$bar = NonEmpty.create;
	  var oneOf = function (__dict_Alternative_8) {
	      return function (_3) {
	          return Control_Alt["<|>"]((__dict_Alternative_8["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(Prelude.pure(__dict_Alternative_8["__superclass_Prelude.Applicative_0"]())(_3.value0))(_3.value1);
	      };
	  };
	  var functorNonEmpty = function (__dict_Functor_9) {
	      return new Prelude.Functor(function (f) {
	          return function (_9) {
	              return new NonEmpty(f(_9.value0), Prelude.map(__dict_Functor_9)(f)(_9.value1));
	          };
	      });
	  };
	  var foldl1 = function (__dict_Foldable_10) {
	      return function (f) {
	          return function (_0) {
	              return Data_Foldable.foldl(__dict_Foldable_10)(f)(_0.value0)(_0.value1);
	          };
	      };
	  };
	  var foldableNonEmpty = function (__dict_Foldable_11) {
	      return new Data_Foldable.Foldable(function (__dict_Monoid_12) {
	          return function (f) {
	              return function (_10) {
	                  return Prelude["<>"](__dict_Monoid_12["__superclass_Prelude.Semigroup_0"]())(f(_10.value0))(Data_Foldable.foldMap(__dict_Foldable_11)(__dict_Monoid_12)(f)(_10.value1));
	              };
	          };
	      }, function (f) {
	          return function (b) {
	              return function (_11) {
	                  return Data_Foldable.foldl(__dict_Foldable_11)(f)(f(b)(_11.value0))(_11.value1);
	              };
	          };
	      }, function (f) {
	          return function (b) {
	              return function (_12) {
	                  return f(_12.value0)(Data_Foldable.foldr(__dict_Foldable_11)(f)(b)(_12.value1));
	              };
	          };
	      });
	  };
	  exports["NonEmpty"] = NonEmpty;
	  exports["oneOf"] = oneOf;
	  exports["foldl1"] = foldl1;
	  exports[":|"] = $colon$bar;
	  exports["functorNonEmpty"] = functorNonEmpty;
	  exports["foldableNonEmpty"] = foldableNonEmpty;;
	 
	})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var Profunctor = function (dimap) {
	      this.dimap = dimap;
	  };
	  var profunctorFn = new Profunctor(function (a2b) {
	      return function (c2d) {
	          return function (b2c) {
	              return Prelude[">>>"](Prelude.semigroupoidFn)(a2b)(Prelude[">>>"](Prelude.semigroupoidFn)(b2c)(c2d));
	          };
	      };
	  });
	  var dimap = function (dict) {
	      return dict.dimap;
	  };
	  exports["Profunctor"] = Profunctor;
	  exports["dimap"] = dimap;
	  exports["profunctorFn"] = profunctorFn;;
	 
	})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Biapplicative = PS["Control.Biapplicative"];
	  var Control_Biapply = PS["Control.Biapply"];
	  var Control_Comonad = PS["Control.Comonad"];
	  var Control_Extend = PS["Control.Extend"];
	  var Control_Lazy = PS["Control.Lazy"];
	  var Data_Bifoldable = PS["Data.Bifoldable"];
	  var Data_Bifunctor = PS["Data.Bifunctor"];
	  var Data_Bitraversable = PS["Data.Bitraversable"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Maybe_First = PS["Data.Maybe.First"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];     
	  var Tuple = (function () {
	      function Tuple(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Tuple.create = function (value0) {
	          return function (value1) {
	              return new Tuple(value0, value1);
	          };
	      };
	      return Tuple;
	  })();
	  var uncurry = function (f) {
	      return function (_5) {
	          return f(_5.value0)(_5.value1);
	      };
	  };
	  var snd = function (_4) {
	      return _4.value1;
	  };
	  var lookup = function (__dict_Foldable_19) {
	      return function (__dict_Eq_20) {
	          return function (a) {
	              return function (f) {
	                  return Data_Maybe_First.runFirst(Data_Foldable.foldMap(__dict_Foldable_19)(Data_Maybe_First.monoidFirst)(function (_2) {
	                      var _105 = Prelude["=="](__dict_Eq_20)(a)(_2.value0);
	                      if (_105) {
	                          return new Data_Maybe.Just(_2.value1);
	                      };
	                      if (!_105) {
	                          return Data_Maybe.Nothing.value;
	                      };
	                      throw new Error("Failed pattern match at Data.Tuple line 173, column 1 - line 174, column 1: " + [ _105.constructor.name ]);
	                  })(f));
	              };
	          };
	      };
	  };
	  var functorTuple = new Prelude.Functor(function (f) {
	      return function (_31) {
	          return new Tuple(_31.value0, f(_31.value1));
	      };
	  });                                                                                                   
	  var fst = function (_3) {
	      return _3.value0;
	  };
	  exports["Tuple"] = Tuple;
	  exports["lookup"] = lookup;
	  exports["uncurry"] = uncurry;
	  exports["snd"] = snd;
	  exports["fst"] = fst;
	  exports["functorTuple"] = functorTuple;;
	 
	})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Profunctor = PS["Data.Profunctor"];
	  var Data_Tuple = PS["Data.Tuple"];     
	  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
	      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
	      this.first = first;
	      this.second = second;
	  };
	  var strongFn = new Strong(function () {
	      return Data_Profunctor.profunctorFn;
	  }, function (a2b) {
	      return function (_0) {
	          return new Data_Tuple.Tuple(a2b(_0.value0), _0.value1);
	      };
	  }, Prelude["<$>"](Data_Tuple.functorTuple));
	  var second = function (dict) {
	      return dict.second;
	  };
	  var first = function (dict) {
	      return dict.first;
	  };
	  exports["Strong"] = Strong;
	  exports["second"] = second;
	  exports["first"] = first;
	  exports["strongFn"] = strongFn;;
	 
	})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var IsString = function (fromString) {
	      this.fromString = fromString;
	  };
	  var isStringString = new IsString(Prelude.id(Prelude.categoryFn));
	  var fromString = function (dict) {
	      return dict.fromString;
	  };
	  exports["IsString"] = IsString;
	  exports["fromString"] = fromString;
	  exports["isStringString"] = isStringString;;
	 
	})(PS["CSS.String"] = PS["CSS.String"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_NonEmpty = PS["Data.NonEmpty"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var CSS_String = PS["CSS.String"];
	  var Control_Alternative = PS["Control.Alternative"];     
	  var Prefixed = (function () {
	      function Prefixed(value0) {
	          this.value0 = value0;
	      };
	      Prefixed.create = function (value0) {
	          return new Prefixed(value0);
	      };
	      return Prefixed;
	  })();
	  var Plain = (function () {
	      function Plain(value0) {
	          this.value0 = value0;
	      };
	      Plain.create = function (value0) {
	          return new Plain(value0);
	      };
	      return Plain;
	  })();
	  var Value = function (x) {
	      return x;
	  };
	  var Key = function (x) {
	      return x;
	  };
	  var Val = function (value) {
	      this.value = value;
	  };
	  var value = function (dict) {
	      return dict.value;
	  };                                                     
	  var semigroupPrefixed = new Prelude.Semigroup(function (_2) {
	      return function (_3) {
	          if (_2 instanceof Plain && _3 instanceof Plain) {
	              return Plain.create(_2.value0 + _3.value0);
	          };
	          if (_2 instanceof Plain && _3 instanceof Prefixed) {
	              return Prefixed.create(Prelude["<$>"](Prelude.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(Prelude["<>"](Prelude.semigroupString)(_2.value0)))(_3.value0));
	          };
	          if (_2 instanceof Prefixed && _3 instanceof Plain) {
	              return Prefixed.create(Prelude["<$>"](Prelude.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(Prelude["<>"](Prelude.semigroupString)(_3.value0)))(_2.value0));
	          };
	          if (_2 instanceof Prefixed && _3 instanceof Prefixed) {
	              return Prefixed.create(Prelude["<>"](Prelude.semigroupArray)(_2.value0)(_3.value0));
	          };
	          throw new Error("Failed pattern match at CSS.Property line 20, column 1 - line 26, column 1: " + [ _2.constructor.name, _3.constructor.name ]);
	      };
	  });
	  var semigroupValue = new Prelude.Semigroup(function (_4) {
	      return function (_5) {
	          return Value(Prelude["<>"](semigroupPrefixed)(_4)(_5));
	      };
	  });
	  var plain = function (_0) {
	      if (_0 instanceof Prefixed) {
	          return Data_Maybe.fromMaybe("")(Data_Tuple.lookup(Data_Foldable.foldableArray)(Prelude.eqString)("")(_0.value0));
	      };
	      if (_0 instanceof Plain) {
	          return _0.value0;
	      };
	      throw new Error("Failed pattern match at CSS.Property line 29, column 1 - line 30, column 1: " + [ _0.constructor.name ]);
	  };                                     
	  var isStringPrefixed = new CSS_String.IsString(Plain.create);
	  var isStringValue = new CSS_String.IsString(function (_28) {
	      return Value(CSS_String.fromString(isStringPrefixed)(_28));
	  });
	  var valNumber = new Val(function (_32) {
	      return CSS_String.fromString(isStringValue)(Prelude.show(Prelude.showNumber)(_32));
	  });
	  var valString = new Val(CSS_String.fromString(isStringValue));
	  var valTuple = function (__dict_Val_0) {
	      return function (__dict_Val_1) {
	          return new Val(function (_7) {
	              return Prelude["<>"](semigroupValue)(value(__dict_Val_0)(_7.value0))(Prelude["<>"](semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(__dict_Val_1)(_7.value1)));
	          });
	      };
	  };
	  var isStringKey = new CSS_String.IsString(function (_33) {
	      return Key(CSS_String.fromString(isStringPrefixed)(_33));
	  });
	  var cast = function (_1) {
	      return _1;
	  };
	  exports["Value"] = Value;
	  exports["Key"] = Key;
	  exports["Prefixed"] = Prefixed;
	  exports["Plain"] = Plain;
	  exports["Val"] = Val;
	  exports["value"] = value;
	  exports["cast"] = cast;
	  exports["plain"] = plain;
	  exports["isStringPrefixed"] = isStringPrefixed;
	  exports["semigroupPrefixed"] = semigroupPrefixed;
	  exports["isStringKey"] = isStringKey;
	  exports["isStringValue"] = isStringValue;
	  exports["semigroupValue"] = semigroupValue;
	  exports["valString"] = valString;
	  exports["valTuple"] = valTuple;
	  exports["valNumber"] = valNumber;;
	 
	})(PS["CSS.Property"] = PS["CSS.Property"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_String = PS["CSS.String"];
	  var Data_Monoid = PS["Data.Monoid"];     
	  var Rgba = (function () {
	      function Rgba(value0, value1, value2, value3) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	          this.value3 = value3;
	      };
	      Rgba.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return function (value3) {
	                      return new Rgba(value0, value1, value2, value3);
	                  };
	              };
	          };
	      };
	      return Rgba;
	  })();
	  var Hsla = (function () {
	      function Hsla(value0, value1, value2, value3) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	          this.value3 = value3;
	      };
	      Hsla.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return function (value3) {
	                      return new Hsla(value0, value1, value2, value3);
	                  };
	              };
	          };
	      };
	      return Hsla;
	  })();
	  var Other = (function () {
	      function Other(value0) {
	          this.value0 = value0;
	      };
	      Other.create = function (value0) {
	          return new Other(value0);
	      };
	      return Other;
	  })();
	  var valColor = new CSS_Property.Val(function (_0) {
	      if (_0 instanceof Rgba && _0.value3 === 255) {
	          return CSS_Property.Value(CSS_String.fromString(CSS_Property.isStringPrefixed)("rgb(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showInt)(_0.value0), Prelude.show(Prelude.showInt)(_0.value1), Prelude.show(Prelude.showInt)(_0.value2) ]) + ")")));
	      };
	      if (_0 instanceof Rgba) {
	          return CSS_Property.Value(CSS_String.fromString(CSS_Property.isStringPrefixed)("rgba(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showInt)(_0.value0), Prelude.show(Prelude.showInt)(_0.value1), Prelude.show(Prelude.showInt)(_0.value2), Prelude.show(Prelude.showInt)(_0.value3) ]) + ")")));
	      };
	      if (_0 instanceof Hsla && _0.value3 === 1.0) {
	          return CSS_Property.Value(CSS_String.fromString(CSS_Property.isStringPrefixed)("hsl(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showNumber)(_0.value0), Prelude.show(Prelude.showNumber)(_0.value1), Prelude.show(Prelude.showNumber)(_0.value2) ]) + ")")));
	      };
	      if (_0 instanceof Hsla) {
	          return CSS_Property.Value(CSS_String.fromString(CSS_Property.isStringPrefixed)("hsla(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showNumber)(_0.value0), Prelude.show(Prelude.showNumber)(_0.value1), Prelude.show(Prelude.showNumber)(_0.value2), Prelude.show(Prelude.showNumber)(_0.value3) ]) + ")")));
	      };
	      if (_0 instanceof Other) {
	          return _0.value0;
	      };
	      throw new Error("Failed pattern match at CSS.Color line 17, column 1 - line 24, column 1: " + [ _0.constructor.name ]);
	  });
	  var rgba = Rgba.create;
	  var rgb = function (r) {
	      return function (g) {
	          return function (b) {
	              return new Rgba(r, g, b, 255);
	          };
	      };
	  };                             
	  var white = rgb(255)(255)(255);
	  var isStringColor = new CSS_String.IsString(function (_21) {
	      return Other.create(CSS_String.fromString(CSS_Property.isStringValue)(_21));
	  });                               
	  var grey = rgb(128)(128)(128);          
	  var black = rgb(0)(0)(0);
	  exports["Rgba"] = Rgba;
	  exports["Hsla"] = Hsla;
	  exports["Other"] = Other;
	  exports["white"] = white;
	  exports["grey"] = grey;
	  exports["black"] = black;
	  exports["rgb"] = rgb;
	  exports["rgba"] = rgba;
	  exports["isStringColor"] = isStringColor;
	  exports["valColor"] = valColor;;
	 
	})(PS["CSS.Color"] = PS["CSS.Color"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Tuple = PS["Data.Tuple"];     
	  var MonadWriter = function (__superclass_Prelude$dotMonad_0, listen, pass, writer) {
	      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
	      this.listen = listen;
	      this.pass = pass;
	      this.writer = writer;
	  };
	  var writer = function (dict) {
	      return dict.writer;
	  };
	  var tell = function (__dict_Monoid_0) {
	      return function (__dict_Monad_1) {
	          return function (__dict_MonadWriter_2) {
	              return function (w) {
	                  return writer(__dict_MonadWriter_2)(new Data_Tuple.Tuple(Prelude.unit, w));
	              };
	          };
	      };
	  };
	  var pass = function (dict) {
	      return dict.pass;
	  };
	  var listen = function (dict) {
	      return dict.listen;
	  };
	  exports["MonadWriter"] = MonadWriter;
	  exports["tell"] = tell;
	  exports["pass"] = pass;
	  exports["listen"] = listen;
	  exports["writer"] = writer;;
	 
	})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Extend = PS["Control.Extend"];
	  var Data_Bifoldable = PS["Data.Bifoldable"];
	  var Data_Bifunctor = PS["Data.Bifunctor"];
	  var Data_Bitraversable = PS["Data.Bitraversable"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];     
	  var Left = (function () {
	      function Left(value0) {
	          this.value0 = value0;
	      };
	      Left.create = function (value0) {
	          return new Left(value0);
	      };
	      return Left;
	  })();
	  var Right = (function () {
	      function Right(value0) {
	          this.value0 = value0;
	      };
	      Right.create = function (value0) {
	          return new Right(value0);
	      };
	      return Right;
	  })();
	  var functorEither = new Prelude.Functor(function (f) {
	      return function (_2) {
	          if (_2 instanceof Left) {
	              return new Left(_2.value0);
	          };
	          if (_2 instanceof Right) {
	              return new Right(f(_2.value0));
	          };
	          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ f.constructor.name, _2.constructor.name ]);
	      };
	  });
	  var either = function (f) {
	      return function (g) {
	          return function (_1) {
	              if (_1 instanceof Left) {
	                  return f(_1.value0);
	              };
	              if (_1 instanceof Right) {
	                  return g(_1.value0);
	              };
	              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ f.constructor.name, g.constructor.name, _1.constructor.name ]);
	          };
	      };
	  }; 
	  var applyEither = new Prelude.Apply(function () {
	      return functorEither;
	  }, function (_4) {
	      return function (r) {
	          if (_4 instanceof Left) {
	              return new Left(_4.value0);
	          };
	          if (_4 instanceof Right) {
	              return Prelude["<$>"](functorEither)(_4.value0)(r);
	          };
	          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ _4.constructor.name, r.constructor.name ]);
	      };
	  });
	  var bindEither = new Prelude.Bind(function () {
	      return applyEither;
	  }, either(function (e) {
	      return function (_0) {
	          return new Left(e);
	      };
	  })(function (a) {
	      return function (f) {
	          return f(a);
	      };
	  }));
	  var applicativeEither = new Prelude.Applicative(function () {
	      return applyEither;
	  }, Right.create);
	  var altEither = new Control_Alt.Alt(function () {
	      return functorEither;
	  }, function (_5) {
	      return function (r) {
	          if (_5 instanceof Left) {
	              return r;
	          };
	          return _5;
	      };
	  });
	  exports["Left"] = Left;
	  exports["Right"] = Right;
	  exports["either"] = either;
	  exports["functorEither"] = functorEither;
	  exports["applyEither"] = applyEither;
	  exports["applicativeEither"] = applicativeEither;
	  exports["altEither"] = altEither;
	  exports["bindEither"] = bindEither;;
	 
	})(PS["Data.Either"] = PS["Data.Either"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Control.Monad.Eff

	  exports.returnE = function (a) {
	    return function () {
	      return a;
	    };
	  };

	  exports.bindE = function (a) {
	    return function (f) {
	      return function () {
	        return f(a())();
	      };
	    };
	  };

	  exports.runPure = function (f) {
	    return f();
	  };
	 
	})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.Eff"];
	  var Prelude = PS["Prelude"];     
	  var monadEff = new Prelude.Monad(function () {
	      return applicativeEff;
	  }, function () {
	      return bindEff;
	  });
	  var bindEff = new Prelude.Bind(function () {
	      return applyEff;
	  }, $foreign.bindE);
	  var applyEff = new Prelude.Apply(function () {
	      return functorEff;
	  }, Prelude.ap(monadEff));
	  var applicativeEff = new Prelude.Applicative(function () {
	      return applyEff;
	  }, $foreign.returnE);
	  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
	  exports["functorEff"] = functorEff;
	  exports["applyEff"] = applyEff;
	  exports["applicativeEff"] = applicativeEff;
	  exports["bindEff"] = bindEff;
	  exports["monadEff"] = monadEff;
	  exports["runPure"] = $foreign.runPure;;
	 
	})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
	  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
	      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
	      this.liftEff = liftEff;
	  };                                 
	  var liftEff = function (dict) {
	      return dict.liftEff;
	  };
	  exports["MonadEff"] = MonadEff;
	  exports["liftEff"] = liftEff;;
	 
	})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Either = PS["Data.Either"];     
	  var MonadError = function (__superclass_Prelude$dotMonad_0, catchError, throwError) {
	      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
	      this.catchError = catchError;
	      this.throwError = throwError;
	  };
	  var throwError = function (dict) {
	      return dict.throwError;
	  };                          
	  var catchError = function (dict) {
	      return dict.catchError;
	  };
	  exports["MonadError"] = MonadError;
	  exports["catchError"] = catchError;
	  exports["throwError"] = throwError;;
	 
	})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Control.Monad.ST

	  exports.newSTRef = function (val) {
	    return function () {
	      return { value: val };
	    };
	  };

	  exports.readSTRef = function (ref) {
	    return function () {
	      return ref.value;
	    };
	  };

	  exports.writeSTRef = function (ref) {
	    return function (a) {
	      return function () {
	        /* jshint boss: true */
	        return ref.value = a;
	      };
	    };
	  };
	 
	})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.ST"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  exports["writeSTRef"] = $foreign.writeSTRef;
	  exports["readSTRef"] = $foreign.readSTRef;
	  exports["newSTRef"] = $foreign.newSTRef;;
	 
	})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Comonad = PS["Control.Comonad"];
	  var Control_Extend = PS["Control.Extend"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];     
	  var Identity = function (x) {
	      return x;
	  };
	  var runIdentity = function (_0) {
	      return _0;
	  };
	  var functorIdentity = new Prelude.Functor(function (f) {
	      return function (_23) {
	          return f(_23);
	      };
	  });
	  var applyIdentity = new Prelude.Apply(function () {
	      return functorIdentity;
	  }, function (_24) {
	      return function (_25) {
	          return _24(_25);
	      };
	  });
	  var bindIdentity = new Prelude.Bind(function () {
	      return applyIdentity;
	  }, function (_26) {
	      return function (f) {
	          return f(_26);
	      };
	  });
	  var applicativeIdentity = new Prelude.Applicative(function () {
	      return applyIdentity;
	  }, Identity);
	  var monadIdentity = new Prelude.Monad(function () {
	      return applicativeIdentity;
	  }, function () {
	      return bindIdentity;
	  });
	  exports["Identity"] = Identity;
	  exports["runIdentity"] = runIdentity;
	  exports["functorIdentity"] = functorIdentity;
	  exports["applyIdentity"] = applyIdentity;
	  exports["applicativeIdentity"] = applicativeIdentity;
	  exports["bindIdentity"] = bindIdentity;
	  exports["monadIdentity"] = monadIdentity;;
	 
	})(PS["Data.Identity"] = PS["Data.Identity"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_ST = PS["Control.Monad.ST"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Functor = PS["Data.Functor"];
	  var Data_Identity = PS["Data.Identity"];
	  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
	  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];
	  var tailRec = function (f) {
	      return function (a) {
	          var go = function (__copy__4) {
	              var _4 = __copy__4;
	              tco: while (true) {
	                  if (_4 instanceof Data_Either.Left) {
	                      var __tco__4 = f(_4.value0);
	                      _4 = __tco__4;
	                      continue tco;
	                  };
	                  if (_4 instanceof Data_Either.Right) {
	                      return _4.value0;
	                  };
	                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 63, column 1 - line 64, column 1: " + [ _4.constructor.name ]);
	              };
	          };
	          return go(f(a));
	      };
	  };
	  exports["tailRec"] = tailRec;;
	 
	})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple = PS["Data.Tuple"];     
	  var MonadState = function (__superclass_Prelude$dotMonad_0, state) {
	      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
	      this.state = state;
	  };
	  var state = function (dict) {
	      return dict.state;
	  };
	  var modify = function (__dict_MonadState_1) {
	      return function (f) {
	          return state(__dict_MonadState_1)(function (s) {
	              return new Data_Tuple.Tuple(Prelude.unit, f(s));
	          });
	      };
	  };
	  var gets = function (__dict_MonadState_2) {
	      return function (f) {
	          return state(__dict_MonadState_2)(function (s) {
	              return new Data_Tuple.Tuple(f(s), s);
	          });
	      };
	  };
	  exports["MonadState"] = MonadState;
	  exports["modify"] = modify;
	  exports["gets"] = gets;
	  exports["state"] = state;;
	 
	})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
	  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
	  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Control_Monad_Trans = PS["Control.Monad.Trans"];
	  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];     
	  var WriterT = function (x) {
	      return x;
	  };
	  var runWriterT = function (_7) {
	      return _7;
	  };
	  var mapWriterT = function (f) {
	      return function (m) {
	          return WriterT(f(runWriterT(m)));
	      };
	  };
	  var functorWriterT = function (__dict_Functor_22) {
	      return new Prelude.Functor(function (f) {
	          return mapWriterT(Prelude["<$>"](__dict_Functor_22)(function (_6) {
	              return new Data_Tuple.Tuple(f(_6.value0), _6.value1);
	          }));
	      });
	  };
	  var applyWriterT = function (__dict_Semigroup_26) {
	      return function (__dict_Apply_27) {
	          return new Prelude.Apply(function () {
	              return functorWriterT(__dict_Apply_27["__superclass_Prelude.Functor_0"]());
	          }, function (f) {
	              return function (v) {
	                  return WriterT((function () {
	                      var k = function (_8) {
	                          return function (_9) {
	                              return new Data_Tuple.Tuple(_8.value0(_9.value0), Prelude["<>"](__dict_Semigroup_26)(_8.value1)(_9.value1));
	                          };
	                      };
	                      return Prelude["<*>"](__dict_Apply_27)(Prelude["<$>"](__dict_Apply_27["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
	                  })());
	              };
	          });
	      };
	  };
	  var bindWriterT = function (__dict_Semigroup_24) {
	      return function (__dict_Monad_25) {
	          return new Prelude.Bind(function () {
	              return applyWriterT(__dict_Semigroup_24)((__dict_Monad_25["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
	          }, function (m) {
	              return function (k) {
	                  return WriterT(Prelude.bind(__dict_Monad_25["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (_1) {
	                      return Prelude.bind(__dict_Monad_25["__superclass_Prelude.Bind_1"]())(runWriterT(k(_1.value0)))(function (_0) {
	                          return Prelude["return"](__dict_Monad_25["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(_0.value0, Prelude["<>"](__dict_Semigroup_24)(_1.value1)(_0.value1)));
	                      });
	                  }));
	              };
	          });
	      };
	  };
	  var applicativeWriterT = function (__dict_Monoid_28) {
	      return function (__dict_Applicative_29) {
	          return new Prelude.Applicative(function () {
	              return applyWriterT(__dict_Monoid_28["__superclass_Prelude.Semigroup_0"]())(__dict_Applicative_29["__superclass_Prelude.Apply_0"]());
	          }, function (a) {
	              return WriterT(Prelude.pure(__dict_Applicative_29)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(__dict_Monoid_28))));
	          });
	      };
	  };
	  var monadWriterT = function (__dict_Monoid_3) {
	      return function (__dict_Monad_4) {
	          return new Prelude.Monad(function () {
	              return applicativeWriterT(__dict_Monoid_3)(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
	          }, function () {
	              return bindWriterT(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]())(__dict_Monad_4);
	          });
	      };
	  };
	  var monadWriterWriterT = function (__dict_Monoid_1) {
	      return function (__dict_Monad_2) {
	          return new Control_Monad_Writer_Class.MonadWriter(function () {
	              return monadWriterT(__dict_Monoid_1)(__dict_Monad_2);
	          }, function (m) {
	              return WriterT(Prelude.bind(__dict_Monad_2["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (_4) {
	                  return Prelude["return"](__dict_Monad_2["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_4.value0, _4.value1), _4.value1));
	              }));
	          }, function (m) {
	              return WriterT(Prelude.bind(__dict_Monad_2["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (_5) {
	                  return Prelude["return"](__dict_Monad_2["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(_5.value0.value0, _5.value0.value1(_5.value1)));
	              }));
	          }, function (_46) {
	              return WriterT(Prelude["return"](__dict_Monad_2["__superclass_Prelude.Applicative_0"]())(_46));
	          });
	      };
	  };
	  exports["WriterT"] = WriterT;
	  exports["mapWriterT"] = mapWriterT;
	  exports["runWriterT"] = runWriterT;
	  exports["functorWriterT"] = functorWriterT;
	  exports["applyWriterT"] = applyWriterT;
	  exports["applicativeWriterT"] = applicativeWriterT;
	  exports["bindWriterT"] = bindWriterT;
	  exports["monadWriterT"] = monadWriterT;
	  exports["monadWriterWriterT"] = monadWriterWriterT;;
	 
	})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
	  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
	  var Data_Identity = PS["Data.Identity"];
	  var Data_Tuple = PS["Data.Tuple"];     
	  var runWriter = function (_0) {
	      return Data_Identity.runIdentity(Control_Monad_Writer_Trans.runWriterT(_0));
	  };
	  var execWriter = function (m) {
	      return Data_Tuple.snd(runWriter(m));
	  };
	  exports["execWriter"] = execWriter;
	  exports["runWriter"] = runWriter;;
	 
	})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Array

	  //------------------------------------------------------------------------------
	  // Array creation --------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.range = function (start) {
	    return function (end) {
	      var step = start > end ? -1 : 1;
	      var result = [];
	      for (var i = start, n = 0; i !== end; i += step) {
	        result[n++] = i;
	      }
	      result[n] = i;
	      return result;
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Array size ------------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.length = function (xs) {
	    return xs.length;
	  };

	  //------------------------------------------------------------------------------
	  // Extending arrays ------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.cons = function (e) {
	    return function (l) {
	      return [e].concat(l);
	    };
	  };

	  exports.snoc = function (l) {
	    return function (e) {
	      var l1 = l.slice();
	      l1.push(e);
	      return l1;
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Non-indexed reads -----------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports["uncons'"] = function (empty) {
	    return function (next) {
	      return function (xs) {
	        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
	      };
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Indexed operations ----------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.indexImpl = function (just) {
	    return function (nothing) {
	      return function (xs) {
	        return function (i) {
	          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
	        };
	      };
	    };
	  };

	  exports.findIndexImpl = function (just) {
	    return function (nothing) {
	      return function (f) {
	        return function (xs) {
	          for (var i = 0, l = xs.length; i < l; i++) {
	            if (f(xs[i])) return just(i);
	          }
	          return nothing;
	        };
	      };
	    };
	  };

	  exports._deleteAt = function (just) {
	    return function (nothing) {
	      return function (i) {
	        return function (l) {
	          if (i < 0 || i >= l.length) return nothing;
	          var l1 = l.slice();
	          l1.splice(i, 1);
	          return just(l1);
	        };
	      };
	    };
	  };

	  exports._updateAt = function (just) {
	    return function (nothing) {
	      return function (i) {
	        return function (a) {
	          return function (l) {
	            if (i < 0 || i >= l.length) return nothing;
	            var l1 = l.slice();
	            l1[i] = a;
	            return just(l1);
	          };
	        };
	      };
	    };
	  };

	  exports.concat = function (xss) {
	    var result = [];
	    for (var i = 0, l = xss.length; i < l; i++) {
	      var xs = xss[i];
	      for (var j = 0, m = xs.length; j < m; j++) {
	        result.push(xs[j]);
	      }
	    }
	    return result;
	  };

	  exports.filter = function (f) {
	    return function (xs) {
	      return xs.filter(f);
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Sorting ---------------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.sortImpl = function (f) {
	    return function (l) {
	      /* jshint maxparams: 2 */
	      return l.slice().sort(function (x, y) {
	        return f(x)(y);
	      });
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Subarrays -------------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.slice = function (s) {
	    return function (e) {
	      return function (l) {
	        return l.slice(s, e);
	      };
	    };
	  };

	  exports.drop = function (n) {
	    return function (l) {
	      return n < 1 ? l : l.slice(n);
	    };
	  };

	  //------------------------------------------------------------------------------
	  // Zipping ---------------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.zipWith = function (f) {
	    return function (xs) {
	      return function (ys) {
	        var l = xs.length < ys.length ? xs.length : ys.length;
	        var result = new Array(l);
	        for (var i = 0; i < l; i++) {
	          result[i] = f(xs[i])(ys[i]);
	        }
	        return result;
	      };
	    };
	  };
	 
	})(PS["Data.Array"] = PS["Data.Array"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Maybe.Unsafe

	  exports.unsafeThrow = function (msg) {
	    throw new Error(msg);
	  };
	 
	})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Maybe.Unsafe"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];     
	  var fromJust = function (_0) {
	      if (_0 instanceof Data_Maybe.Just) {
	          return _0.value0;
	      };
	      if (_0 instanceof Data_Maybe.Nothing) {
	          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
	      };
	      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ _0.constructor.name ]);
	  };
	  exports["fromJust"] = fromJust;;
	 
	})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Array"];
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Lazy = PS["Control.Lazy"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
	  var $colon = $foreign.cons;
	  var $dot$dot = $foreign.range;                      
	  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var unzip = $foreign["uncons'"](function (_9) {
	      return new Data_Tuple.Tuple([  ], [  ]);
	  })(function (_10) {
	      return function (ts) {
	          var _15 = unzip(ts);
	          return new Data_Tuple.Tuple($colon(_10.value0)(_15.value0), $colon(_10.value1)(_15.value1));
	      };
	  });
	  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
	      return function (xs) {
	          return new Data_Maybe.Just({
	              head: x, 
	              tail: xs
	          });
	      };
	  });                          
	  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (_7) {
	      return function (xs) {
	          return new Data_Maybe.Just(xs);
	      };
	  });
	  var sortBy = function (comp) {
	      return function (xs) {
	          var comp$prime = function (x) {
	              return function (y) {
	                  var _25 = comp(x)(y);
	                  if (_25 instanceof Prelude.GT) {
	                      return 1;
	                  };
	                  if (_25 instanceof Prelude.EQ) {
	                      return 0;
	                  };
	                  if (_25 instanceof Prelude.LT) {
	                      return -1;
	                  };
	                  throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ _25.constructor.name ]);
	              };
	          };
	          return $foreign.sortImpl(comp$prime)(xs);
	      };
	  };
	  var sort = function (__dict_Ord_1) {
	      return function (xs) {
	          return sortBy(Prelude.compare(__dict_Ord_1))(xs);
	      };
	  };
	  var singleton = function (a) {
	      return [ a ];
	  };
	  var $$null = function (xs) {
	      return $foreign.length(xs) === 0;
	  };
	  var nubBy = function (eq) {
	      return function (xs) {
	          var _28 = uncons(xs);
	          if (_28 instanceof Data_Maybe.Just) {
	              return $colon(_28.value0.head)(nubBy(eq)($foreign.filter(function (y) {
	                  return !eq(_28.value0.head)(y);
	              })(_28.value0.tail)));
	          };
	          if (_28 instanceof Data_Maybe.Nothing) {
	              return [  ];
	          };
	          throw new Error("Failed pattern match: " + [ _28.constructor.name ]);
	      };
	  };
	  var nub = function (__dict_Eq_3) {
	      return nubBy(Prelude.eq(__dict_Eq_3));
	  };
	  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var $bang$bang = index;
	  var modifyAt = function (i) {
	      return function (f) {
	          return function (xs) {
	              var go = function (x) {
	                  return updateAt(i)(f(x))(xs);
	              };
	              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
	          };
	      };
	  };
	  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
	      return function (_6) {
	          return new Data_Maybe.Just(x);
	      };
	  });
	  var foldM = function (__dict_Monad_10) {
	      return function (f) {
	          return function (a) {
	              return $foreign["uncons'"](function (_11) {
	                  return Prelude["return"](__dict_Monad_10["__superclass_Prelude.Applicative_0"]())(a);
	              })(function (b) {
	                  return function (bs) {
	                      return Prelude[">>="](__dict_Monad_10["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
	                          return foldM(__dict_Monad_10)(f)(a$prime)(bs);
	                      });
	                  };
	              });
	          };
	      };
	  };
	  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var intersectBy = function (eq) {
	      return function (xs) {
	          return function (ys) {
	              return $foreign.filter(function (x) {
	                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
	              })(xs);
	          };
	      };
	  };
	  var intersect = function (__dict_Eq_12) {
	      return intersectBy(Prelude.eq(__dict_Eq_12));
	  };
	  var elemIndex = function (__dict_Eq_15) {
	      return function (x) {
	          return findIndex(function (_1) {
	              return Prelude["=="](__dict_Eq_15)(_1)(x);
	          });
	      };
	  };
	  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var deleteBy = function (eq) {
	      return function (x) {
	          return function (_12) {
	              if (_12.length === 0) {
	                  return [  ];
	              };
	              return Data_Maybe.maybe(_12)(function (i) {
	                  return Data_Maybe_Unsafe.fromJust(deleteAt(i)(_12));
	              })(findIndex(eq(x))(_12));
	          };
	      };
	  };
	  var $$delete = function (__dict_Eq_17) {
	      return deleteBy(Prelude.eq(__dict_Eq_17));
	  };
	  var $bslash$bslash = function (__dict_Eq_18) {
	      return function (xs) {
	          return function (ys) {
	              if ($$null(xs)) {
	                  return [  ];
	              };
	              if (Prelude.otherwise) {
	                  return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
	                      return function (ys_2) {
	                          return $bslash$bslash(__dict_Eq_18)($$delete(__dict_Eq_18)(y)(xs))(ys_2);
	                      };
	                  })(ys);
	              };
	              throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
	          };
	      };
	  };
	  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
	  var mapMaybe = function (f) {
	      return concatMap(function (_48) {
	          return Data_Maybe.maybe([  ])(singleton)(f(_48));
	      });
	  };
	  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
	  exports["foldM"] = foldM;
	  exports["unzip"] = unzip;
	  exports["intersectBy"] = intersectBy;
	  exports["intersect"] = intersect;
	  exports["\\\\"] = $bslash$bslash;
	  exports["deleteBy"] = deleteBy;
	  exports["nubBy"] = nubBy;
	  exports["nub"] = nub;
	  exports["sortBy"] = sortBy;
	  exports["sort"] = sort;
	  exports["catMaybes"] = catMaybes;
	  exports["mapMaybe"] = mapMaybe;
	  exports["concatMap"] = concatMap;
	  exports["modifyAt"] = modifyAt;
	  exports["updateAt"] = updateAt;
	  exports["deleteAt"] = deleteAt;
	  exports["findIndex"] = findIndex;
	  exports["elemIndex"] = elemIndex;
	  exports["index"] = index;
	  exports["!!"] = $bang$bang;
	  exports["uncons"] = uncons;
	  exports["tail"] = tail;
	  exports["head"] = head;
	  exports[":"] = $colon;
	  exports["null"] = $$null;
	  exports[".."] = $dot$dot;
	  exports["singleton"] = singleton;
	  exports["zipWith"] = $foreign.zipWith;
	  exports["drop"] = $foreign.drop;
	  exports["filter"] = $foreign.filter;
	  exports["concat"] = $foreign.concat;
	  exports["snoc"] = $foreign.snoc;
	  exports["length"] = $foreign.length;;
	 
	})(PS["Data.Array"] = PS["Data.Array"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Generic


	  //------------------------------------------------------------------------------
	  // Zipping ---------------------------------------------------------------------
	  //------------------------------------------------------------------------------

	  exports.zipAll = function(f) {
	      return function(xs) {
	          return function(ys) {
	              var l = xs.length < ys.length ? xs.length : ys.length;
	              for (var i = 0; i < l; i++) {
	                  if (!f(xs[i])(ys[i])) {
	                      return false;
	                  }
	              }
	              return true;
	          };
	      };
	  };

	  exports.zipCompare = function(f) {
	      return function(xs) {
	          return function(ys) {
	              var i = 0;
	              var xlen = xs.length;
	              var ylen = ys.length;
	              while (i < xlen && i < ylen) {
	                  var o = f(xs[i])(ys[i]);
	                  if (o !== 0) {
	                      return o;
	                  }
	                  i++;
	              }
	              if (xlen === ylen) {
	                  return 0;
	              } else if (xlen > ylen) {
	                  return -1;
	              } else {
	                  return 1;
	              }
	          };
	      };
	  };
	 
	})(PS["Data.Generic"] = PS["Data.Generic"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.String

	  exports._charAt = function (just) {
	    return function (nothing) {
	      return function (i) {
	        return function (s) {
	          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
	        };
	      };
	    };
	  };

	  exports.fromCharArray = function (a) {
	    return a.join("");
	  };

	  exports["_indexOf'"] = function (just) {
	    return function (nothing) {
	      return function (x) {
	        return function (startAt) {
	          return function (s) {
	            if (startAt < 0 || startAt > s.length) return nothing;
	            var i = s.indexOf(x, startAt);
	            return i === -1 ? nothing : just(i);
	          };
	        };
	      };
	    };
	  };

	  exports.length = function (s) {
	    return s.length;
	  };

	  exports.replace = function (s1) {
	    return function (s2) {
	      return function (s3) {
	        return s3.replace(s1, s2);
	      };
	    };
	  };

	  exports.take = function (n) {
	    return function (s) {
	      return s.substr(0, n);
	    };
	  };

	  exports.drop = function (n) {
	    return function (s) {
	      return s.substr(n);
	    };
	  };

	  exports.split = function (sep) {
	    return function (s) {
	      return s.split(sep);
	    };
	  };

	  exports.joinWith = function (s) {
	    return function (xs) {
	      return xs.join(s);
	    };
	  };
	 
	})(PS["Data.String"] = PS["Data.String"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Char

	  exports.toString = function (c) {
	    return c;
	  };
	 
	})(PS["Data.Char"] = PS["Data.Char"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Char"];
	  var Prelude = PS["Prelude"];
	  exports["toString"] = $foreign.toString;;
	 
	})(PS["Data.Char"] = PS["Data.Char"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.String"];
	  var Prelude = PS["Prelude"];
	  var Data_Char = PS["Data.Char"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_String_Unsafe = PS["Data.String.Unsafe"];
	  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  exports["indexOf'"] = indexOf$prime;
	  exports["charAt"] = charAt;
	  exports["joinWith"] = $foreign.joinWith;
	  exports["split"] = $foreign.split;
	  exports["drop"] = $foreign.drop;
	  exports["take"] = $foreign.take;
	  exports["replace"] = $foreign.replace;
	  exports["length"] = $foreign.length;
	  exports["fromCharArray"] = $foreign.fromCharArray;;
	 
	})(PS["Data.String"] = PS["Data.String"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Proxy = (function () {
	      function Proxy() {

	      };
	      Proxy.value = new Proxy();
	      return Proxy;
	  })();
	  exports["Proxy"] = Proxy;;
	 
	})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Generic"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Array = PS["Data.Array"];
	  var Data_String = PS["Data.String"];
	  var Type_Proxy = PS["Type.Proxy"];     
	  var SProd = (function () {
	      function SProd(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      SProd.create = function (value0) {
	          return function (value1) {
	              return new SProd(value0, value1);
	          };
	      };
	      return SProd;
	  })();
	  var SRecord = (function () {
	      function SRecord(value0) {
	          this.value0 = value0;
	      };
	      SRecord.create = function (value0) {
	          return new SRecord(value0);
	      };
	      return SRecord;
	  })();
	  var SNumber = (function () {
	      function SNumber(value0) {
	          this.value0 = value0;
	      };
	      SNumber.create = function (value0) {
	          return new SNumber(value0);
	      };
	      return SNumber;
	  })();
	  var SBoolean = (function () {
	      function SBoolean(value0) {
	          this.value0 = value0;
	      };
	      SBoolean.create = function (value0) {
	          return new SBoolean(value0);
	      };
	      return SBoolean;
	  })();
	  var SInt = (function () {
	      function SInt(value0) {
	          this.value0 = value0;
	      };
	      SInt.create = function (value0) {
	          return new SInt(value0);
	      };
	      return SInt;
	  })();
	  var SString = (function () {
	      function SString(value0) {
	          this.value0 = value0;
	      };
	      SString.create = function (value0) {
	          return new SString(value0);
	      };
	      return SString;
	  })();
	  var SChar = (function () {
	      function SChar(value0) {
	          this.value0 = value0;
	      };
	      SChar.create = function (value0) {
	          return new SChar(value0);
	      };
	      return SChar;
	  })();
	  var SArray = (function () {
	      function SArray(value0) {
	          this.value0 = value0;
	      };
	      SArray.create = function (value0) {
	          return new SArray(value0);
	      };
	      return SArray;
	  })();
	  var SigProd = (function () {
	      function SigProd(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      SigProd.create = function (value0) {
	          return function (value1) {
	              return new SigProd(value0, value1);
	          };
	      };
	      return SigProd;
	  })();
	  var SigString = (function () {
	      function SigString() {

	      };
	      SigString.value = new SigString();
	      return SigString;
	  })();
	  var SigArray = (function () {
	      function SigArray(value0) {
	          this.value0 = value0;
	      };
	      SigArray.create = function (value0) {
	          return new SigArray(value0);
	      };
	      return SigArray;
	  })();
	  var Generic = function (fromSpine, toSignature, toSpine) {
	      this.fromSpine = fromSpine;
	      this.toSignature = toSignature;
	      this.toSpine = toSpine;
	  };
	  var toSpine = function (dict) {
	      return dict.toSpine;
	  };
	  var toSignature = function (dict) {
	      return dict.toSignature;
	  };
	  var genericString = new Generic(function (_10) {
	      if (_10 instanceof SString) {
	          return new Data_Maybe.Just(_10.value0);
	      };
	      return Data_Maybe.Nothing.value;
	  }, function (_9) {
	      return SigString.value;
	  }, function (x) {
	      return new SString(x);
	  });
	  var fromSpine = function (dict) {
	      return dict.fromSpine;
	  };
	  var eqGeneric = new Prelude.Eq(function (_29) {
	      return function (_30) {
	          if (_29 instanceof SProd && _30 instanceof SProd) {
	              return Prelude["=="](Prelude.eqString)(_29.value0)(_30.value0) && (Data_Array.length(_29.value1) === Data_Array.length(_30.value1) && $foreign.zipAll(function (x) {
	                  return function (y) {
	                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
	                  };
	              })(_29.value1)(_30.value1));
	          };
	          if (_29 instanceof SRecord && _30 instanceof SRecord) {
	              var go = function (x) {
	                  return function (y) {
	                      return Prelude["=="](Prelude.eqString)(x.recLabel)(y.recLabel) && Prelude["=="](eqGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
	                  };
	              };
	              return Data_Array.length(_29.value0) === Data_Array.length(_30.value0) && $foreign.zipAll(go)(_29.value0)(_30.value0);
	          };
	          if (_29 instanceof SInt && _30 instanceof SInt) {
	              return _29.value0 === _30.value0;
	          };
	          if (_29 instanceof SNumber && _30 instanceof SNumber) {
	              return _29.value0 === _30.value0;
	          };
	          if (_29 instanceof SBoolean && _30 instanceof SBoolean) {
	              return Prelude["=="](Prelude.eqBoolean)(_29.value0)(_30.value0);
	          };
	          if (_29 instanceof SChar && _30 instanceof SChar) {
	              return Prelude["=="](Prelude.eqChar)(_29.value0)(_30.value0);
	          };
	          if (_29 instanceof SString && _30 instanceof SString) {
	              return Prelude["=="](Prelude.eqString)(_29.value0)(_30.value0);
	          };
	          if (_29 instanceof SArray && _30 instanceof SArray) {
	              return Data_Array.length(_29.value0) === Data_Array.length(_30.value0) && $foreign.zipAll(function (x) {
	                  return function (y) {
	                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
	                  };
	              })(_29.value0)(_30.value0);
	          };
	          return false;
	      };
	  });
	  var gEq = function (__dict_Generic_1) {
	      return function (x) {
	          return function (y) {
	              return Prelude["=="](eqGeneric)(toSpine(__dict_Generic_1)(x))(toSpine(__dict_Generic_1)(y));
	          };
	      };
	  };
	  var ordGeneric = new Prelude.Ord(function () {
	      return eqGeneric;
	  }, function (_31) {
	      return function (_32) {
	          if (_31 instanceof SProd && _32 instanceof SProd) {
	              var _97 = Prelude.compare(Prelude.ordString)(_31.value0)(_32.value0);
	              if (_97 instanceof Prelude.EQ) {
	                  return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
	                      return function (y) {
	                          var _98 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
	                          if (_98 instanceof Prelude.EQ) {
	                              return 0;
	                          };
	                          if (_98 instanceof Prelude.LT) {
	                              return 1;
	                          };
	                          if (_98 instanceof Prelude.GT) {
	                              return -1;
	                          };
	                          throw new Error("Failed pattern match: " + [ _98.constructor.name ]);
	                      };
	                  })(_31.value1)(_32.value1));
	              };
	              return _97;
	          };
	          if (_31 instanceof SProd) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SProd) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SRecord && _32 instanceof SRecord) {
	              var go = function (x) {
	                  return function (y) {
	                      var _107 = Prelude.compare(Prelude.ordString)(x.recLabel)(y.recLabel);
	                      if (_107 instanceof Prelude.EQ) {
	                          var _108 = Prelude.compare(ordGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
	                          if (_108 instanceof Prelude.EQ) {
	                              return 0;
	                          };
	                          if (_108 instanceof Prelude.LT) {
	                              return 1;
	                          };
	                          if (_108 instanceof Prelude.GT) {
	                              return -1;
	                          };
	                          throw new Error("Failed pattern match at Data.Generic line 227, column 15 - line 234, column 5: " + [ _108.constructor.name ]);
	                      };
	                      if (_107 instanceof Prelude.LT) {
	                          return 1;
	                      };
	                      if (_107 instanceof Prelude.GT) {
	                          return -1;
	                      };
	                      throw new Error("Failed pattern match at Data.Generic line 227, column 15 - line 234, column 5: " + [ _107.constructor.name ]);
	                  };
	              };
	              return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(go)(_31.value0)(_32.value0));
	          };
	          if (_31 instanceof SRecord) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SRecord) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SInt && _32 instanceof SInt) {
	              return Prelude.compare(Prelude.ordInt)(_31.value0)(_32.value0);
	          };
	          if (_31 instanceof SInt) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SInt) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SBoolean && _32 instanceof SBoolean) {
	              return Prelude.compare(Prelude.ordBoolean)(_31.value0)(_32.value0);
	          };
	          if (_31 instanceof SBoolean) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SBoolean) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SNumber && _32 instanceof SNumber) {
	              return Prelude.compare(Prelude.ordNumber)(_31.value0)(_32.value0);
	          };
	          if (_31 instanceof SNumber) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SNumber) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SString && _32 instanceof SString) {
	              return Prelude.compare(Prelude.ordString)(_31.value0)(_32.value0);
	          };
	          if (_31 instanceof SString) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SString) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SChar && _32 instanceof SChar) {
	              return Prelude.compare(Prelude.ordChar)(_31.value0)(_32.value0);
	          };
	          if (_31 instanceof SChar) {
	              return Prelude.LT.value;
	          };
	          if (_32 instanceof SChar) {
	              return Prelude.GT.value;
	          };
	          if (_31 instanceof SArray && _32 instanceof SArray) {
	              return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
	                  return function (y) {
	                      var _133 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
	                      if (_133 instanceof Prelude.EQ) {
	                          return 0;
	                      };
	                      if (_133 instanceof Prelude.LT) {
	                          return 1;
	                      };
	                      if (_133 instanceof Prelude.GT) {
	                          return -1;
	                      };
	                      throw new Error("Failed pattern match: " + [ _133.constructor.name ]);
	                  };
	              })(_31.value0)(_32.value0));
	          };
	          throw new Error("Failed pattern match: " + [ _31.constructor.name, _32.constructor.name ]);
	      };
	  });
	  var gCompare = function (__dict_Generic_2) {
	      return function (x) {
	          return function (y) {
	              return Prelude.compare(ordGeneric)(toSpine(__dict_Generic_2)(x))(toSpine(__dict_Generic_2)(y));
	          };
	      };
	  };
	  var anyProxy = Type_Proxy.Proxy.value;
	  var genericArray = function (__dict_Generic_3) {
	      return new Generic(function (_15) {
	          if (_15 instanceof SArray) {
	              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function (_173) {
	                  return fromSpine(__dict_Generic_3)((function (_1) {
	                      return _1(Prelude.unit);
	                  })(_173));
	              })(_15.value0);
	          };
	          return Data_Maybe.Nothing.value;
	      }, function (x) {
	          var lowerProxy = function (_16) {
	              return anyProxy;
	          };
	          return new SigArray(function (unit) {
	              return toSignature(__dict_Generic_3)(lowerProxy(x));
	          });
	      }, function (xs) {
	          return new SArray(Prelude["<$>"](Prelude.functorArray)(function (x) {
	              return function (y) {
	                  return toSpine(__dict_Generic_3)(x);
	              };
	          })(xs));
	      });
	  };
	  exports["SigProd"] = SigProd;
	  exports["SigString"] = SigString;
	  exports["SigArray"] = SigArray;
	  exports["SProd"] = SProd;
	  exports["SRecord"] = SRecord;
	  exports["SNumber"] = SNumber;
	  exports["SBoolean"] = SBoolean;
	  exports["SInt"] = SInt;
	  exports["SString"] = SString;
	  exports["SChar"] = SChar;
	  exports["SArray"] = SArray;
	  exports["Generic"] = Generic;
	  exports["gCompare"] = gCompare;
	  exports["gEq"] = gEq;
	  exports["fromSpine"] = fromSpine;
	  exports["toSignature"] = toSignature;
	  exports["toSpine"] = toSpine;
	  exports["genericString"] = genericString;
	  exports["genericArray"] = genericArray;
	  exports["eqGeneric"] = eqGeneric;
	  exports["ordGeneric"] = ordGeneric;;
	 
	})(PS["Data.Generic"] = PS["Data.Generic"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Generic = PS["Data.Generic"];
	  var Data_String = PS["Data.String"];
	  var CSS_String = PS["CSS.String"];
	  var Data_Maybe = PS["Data.Maybe"];     
	  var Id = (function () {
	      function Id(value0) {
	          this.value0 = value0;
	      };
	      Id.create = function (value0) {
	          return new Id(value0);
	      };
	      return Id;
	  })();
	  var Class = (function () {
	      function Class(value0) {
	          this.value0 = value0;
	      };
	      Class.create = function (value0) {
	          return new Class(value0);
	      };
	      return Class;
	  })();
	  var Attr = (function () {
	      function Attr(value0) {
	          this.value0 = value0;
	      };
	      Attr.create = function (value0) {
	          return new Attr(value0);
	      };
	      return Attr;
	  })();
	  var AttrVal = (function () {
	      function AttrVal(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrVal.create = function (value0) {
	          return function (value1) {
	              return new AttrVal(value0, value1);
	          };
	      };
	      return AttrVal;
	  })();
	  var AttrBegins = (function () {
	      function AttrBegins(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrBegins.create = function (value0) {
	          return function (value1) {
	              return new AttrBegins(value0, value1);
	          };
	      };
	      return AttrBegins;
	  })();
	  var AttrEnds = (function () {
	      function AttrEnds(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrEnds.create = function (value0) {
	          return function (value1) {
	              return new AttrEnds(value0, value1);
	          };
	      };
	      return AttrEnds;
	  })();
	  var AttrContains = (function () {
	      function AttrContains(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrContains.create = function (value0) {
	          return function (value1) {
	              return new AttrContains(value0, value1);
	          };
	      };
	      return AttrContains;
	  })();
	  var AttrSpace = (function () {
	      function AttrSpace(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrSpace.create = function (value0) {
	          return function (value1) {
	              return new AttrSpace(value0, value1);
	          };
	      };
	      return AttrSpace;
	  })();
	  var AttrHyph = (function () {
	      function AttrHyph(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrHyph.create = function (value0) {
	          return function (value1) {
	              return new AttrHyph(value0, value1);
	          };
	      };
	      return AttrHyph;
	  })();
	  var Pseudo = (function () {
	      function Pseudo(value0) {
	          this.value0 = value0;
	      };
	      Pseudo.create = function (value0) {
	          return new Pseudo(value0);
	      };
	      return Pseudo;
	  })();
	  var PseudoFunc = (function () {
	      function PseudoFunc(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      PseudoFunc.create = function (value0) {
	          return function (value1) {
	              return new PseudoFunc(value0, value1);
	          };
	      };
	      return PseudoFunc;
	  })();
	  var Star = (function () {
	      function Star() {

	      };
	      Star.value = new Star();
	      return Star;
	  })();
	  var Elem = (function () {
	      function Elem(value0) {
	          this.value0 = value0;
	      };
	      Elem.create = function (value0) {
	          return new Elem(value0);
	      };
	      return Elem;
	  })();
	  var PathChild = (function () {
	      function PathChild(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      PathChild.create = function (value0) {
	          return function (value1) {
	              return new PathChild(value0, value1);
	          };
	      };
	      return PathChild;
	  })();
	  var Deep = (function () {
	      function Deep(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Deep.create = function (value0) {
	          return function (value1) {
	              return new Deep(value0, value1);
	          };
	      };
	      return Deep;
	  })();
	  var Adjacent = (function () {
	      function Adjacent(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Adjacent.create = function (value0) {
	          return function (value1) {
	              return new Adjacent(value0, value1);
	          };
	      };
	      return Adjacent;
	  })();
	  var Combined = (function () {
	      function Combined(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Combined.create = function (value0) {
	          return function (value1) {
	              return new Combined(value0, value1);
	          };
	      };
	      return Combined;
	  })();
	  var Selector = (function () {
	      function Selector(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Selector.create = function (value0) {
	          return function (value1) {
	              return new Selector(value0, value1);
	          };
	      };
	      return Selector;
	  })();
	  var $$with = function (_0) {
	      return function (_1) {
	          return new Selector(Prelude["++"](Prelude.semigroupArray)(_0.value0)(_1), _0.value1);
	      };
	  };
	  var $hash$hash = $$with;
	  var star = new Selector([  ], Star.value);
	  var isStringSelector = new CSS_String.IsString(function (s) {
	      var _42 = Data_String.take(1)(s);
	      if (_42 === "#") {
	          return new Selector([ Id.create(Data_String.drop(1)(s)) ], Star.value);
	      };
	      if (_42 === ".") {
	          return new Selector([ Class.create(Data_String.drop(1)(s)) ], Star.value);
	      };
	      return new Selector([  ], new Elem(s));
	  });
	  var genericPredicate = new Data_Generic.Generic(function ($dollarx) {
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.Id" && $dollarx.value1.length === 1)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Id.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.Class" && $dollarx.value1.length === 1)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Class.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.Attr" && $dollarx.value1.length === 1)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Attr.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrVal" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrVal.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrBegins" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrBegins.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrEnds" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrEnds.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrContains" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrContains.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrSpace" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrSpace.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.AttrHyph" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(AttrHyph.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[1](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.Pseudo" && $dollarx.value1.length === 1)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Pseudo.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit)));
	      };
	      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "CSS.Selector.PseudoFunc" && $dollarx.value1.length === 2)) {
	          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(PseudoFunc.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericString))($dollarx.value1[1](Prelude.unit)));
	      };
	      return Data_Maybe.Nothing.value;
	  }, function ($dollarq) {
	      return new Data_Generic.SigProd("CSS.Selector.Predicate", [ {
	          sigConstructor: "CSS.Selector.Id", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.Class", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.Attr", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrVal", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrBegins", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrEnds", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrContains", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrSpace", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.AttrHyph", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.Pseudo", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          } ]
	      }, {
	          sigConstructor: "CSS.Selector.PseudoFunc", 
	          sigValues: [ function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
	          }, function ($dollarq_1) {
	              return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericString))(Data_Generic.anyProxy);
	          } ]
	      } ]);
	  }, function ($dollarx) {
	      if ($dollarx instanceof Id) {
	          return new Data_Generic.SProd("CSS.Selector.Id", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          } ]);
	      };
	      if ($dollarx instanceof Class) {
	          return new Data_Generic.SProd("CSS.Selector.Class", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          } ]);
	      };
	      if ($dollarx instanceof Attr) {
	          return new Data_Generic.SProd("CSS.Selector.Attr", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          } ]);
	      };
	      if ($dollarx instanceof AttrVal) {
	          return new Data_Generic.SProd("CSS.Selector.AttrVal", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof AttrBegins) {
	          return new Data_Generic.SProd("CSS.Selector.AttrBegins", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof AttrEnds) {
	          return new Data_Generic.SProd("CSS.Selector.AttrEnds", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof AttrContains) {
	          return new Data_Generic.SProd("CSS.Selector.AttrContains", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof AttrSpace) {
	          return new Data_Generic.SProd("CSS.Selector.AttrSpace", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof AttrHyph) {
	          return new Data_Generic.SProd("CSS.Selector.AttrHyph", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value1);
	          } ]);
	      };
	      if ($dollarx instanceof Pseudo) {
	          return new Data_Generic.SProd("CSS.Selector.Pseudo", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          } ]);
	      };
	      if ($dollarx instanceof PseudoFunc) {
	          return new Data_Generic.SProd("CSS.Selector.PseudoFunc", [ function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
	          }, function ($dollarq) {
	              return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericString))($dollarx.value1);
	          } ]);
	      };
	      throw new Error("Failed pattern match at CSS.Selector line 22, column 1 - line 24, column 1: " + [ $dollarx.constructor.name ]);
	  });
	  var eqPredicate = new Prelude.Eq(Data_Generic.gEq(genericPredicate));
	  var ordPredicate = new Prelude.Ord(function () {
	      return eqPredicate;
	  }, Data_Generic.gCompare(genericPredicate));
	  var element = function (e) {
	      return new Selector([  ], new Elem(e));
	  };
	  var deep = function (a) {
	      return function (b) {
	          return new Selector([  ], new Deep(a, b));
	      };
	  };
	  var $times$times = deep;
	  var child = function (a) {
	      return function (b) {
	          return new Selector([  ], new PathChild(a, b));
	      };
	  };
	  var $bar$greater = child;
	  exports["Selector"] = Selector;
	  exports["Star"] = Star;
	  exports["Elem"] = Elem;
	  exports["PathChild"] = PathChild;
	  exports["Deep"] = Deep;
	  exports["Adjacent"] = Adjacent;
	  exports["Combined"] = Combined;
	  exports["Id"] = Id;
	  exports["Class"] = Class;
	  exports["Attr"] = Attr;
	  exports["AttrVal"] = AttrVal;
	  exports["AttrBegins"] = AttrBegins;
	  exports["AttrEnds"] = AttrEnds;
	  exports["AttrContains"] = AttrContains;
	  exports["AttrSpace"] = AttrSpace;
	  exports["AttrHyph"] = AttrHyph;
	  exports["Pseudo"] = Pseudo;
	  exports["PseudoFunc"] = PseudoFunc;
	  exports["##"] = $hash$hash;
	  exports["with"] = $$with;
	  exports["|>"] = $bar$greater;
	  exports["child"] = child;
	  exports["**"] = $times$times;
	  exports["deep"] = deep;
	  exports["element"] = element;
	  exports["star"] = star;
	  exports["genericPredicate"] = genericPredicate;
	  exports["eqPredicate"] = eqPredicate;
	  exports["ordPredicate"] = ordPredicate;
	  exports["isStringSelector"] = isStringSelector;;
	 
	})(PS["CSS.Selector"] = PS["CSS.Selector"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Writer = PS["Control.Monad.Writer"];
	  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_NonEmpty = PS["Data.NonEmpty"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_Selector = PS["CSS.Selector"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
	  var Data_Identity = PS["Data.Identity"];
	  var Self = (function () {
	      function Self(value0) {
	          this.value0 = value0;
	      };
	      Self.create = function (value0) {
	          return new Self(value0);
	      };
	      return Self;
	  })();
	  var Root = (function () {
	      function Root(value0) {
	          this.value0 = value0;
	      };
	      Root.create = function (value0) {
	          return new Root(value0);
	      };
	      return Root;
	  })();
	  var Pop = (function () {
	      function Pop(value0) {
	          this.value0 = value0;
	      };
	      Pop.create = function (value0) {
	          return new Pop(value0);
	      };
	      return Pop;
	  })();
	  var Child = (function () {
	      function Child(value0) {
	          this.value0 = value0;
	      };
	      Child.create = function (value0) {
	          return new Child(value0);
	      };
	      return Child;
	  })();
	  var Sub = (function () {
	      function Sub(value0) {
	          this.value0 = value0;
	      };
	      Sub.create = function (value0) {
	          return new Sub(value0);
	      };
	      return Sub;
	  })();
	  var Property = (function () {
	      function Property(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Property.create = function (value0) {
	          return function (value1) {
	              return new Property(value0, value1);
	          };
	      };
	      return Property;
	  })();
	  var Nested = (function () {
	      function Nested(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Nested.create = function (value0) {
	          return function (value1) {
	              return new Nested(value0, value1);
	          };
	      };
	      return Nested;
	  })();
	  var Query = (function () {
	      function Query(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Query.create = function (value0) {
	          return function (value1) {
	              return new Query(value0, value1);
	          };
	      };
	      return Query;
	  })();
	  var Face = (function () {
	      function Face(value0) {
	          this.value0 = value0;
	      };
	      Face.create = function (value0) {
	          return new Face(value0);
	      };
	      return Face;
	  })();
	  var Keyframe = (function () {
	      function Keyframe(value0) {
	          this.value0 = value0;
	      };
	      Keyframe.create = function (value0) {
	          return new Keyframe(value0);
	      };
	      return Keyframe;
	  })();
	  var Import = (function () {
	      function Import(value0) {
	          this.value0 = value0;
	      };
	      Import.create = function (value0) {
	          return new Import(value0);
	      };
	      return Import;
	  })();
	  var S = function (x) {
	      return x;
	  };
	  var runS = function (_1) {
	      return Control_Monad_Writer.execWriter(_1);
	  };
	  var rule = function (_14) {
	      return S(Control_Monad_Writer_Class.tell(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Control_Monad_Writer_Trans.monadWriterWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Data_Array.singleton(_14)));
	  };
	  var $qmark = function (sel) {
	      return function (rs) {
	          return rule(new Nested(new Sub(sel), runS(rs)));
	      };
	  };
	  var key = function (__dict_Val_0) {
	      return function (k) {
	          return function (v) {
	              return rule(new Property(CSS_Property.cast(k), CSS_Property.value(__dict_Val_0)(v)));
	          };
	      };
	  };
	  var functorStyleM = new Prelude.Functor(function (f) {
	      return function (_2) {
	          return S(Prelude["<$>"](Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(_2));
	      };
	  });
	  var applyStyleM = new Prelude.Apply(function () {
	      return functorStyleM;
	  }, function (_3) {
	      return function (_4) {
	          return S(Prelude["<*>"](Control_Monad_Writer_Trans.applyWriterT(Prelude.semigroupArray)(Data_Identity.applyIdentity))(_3)(_4));
	      };
	  });
	  var bindStyleM = new Prelude.Bind(function () {
	      return applyStyleM;
	  }, function (_5) {
	      return function (f) {
	          return S(Prelude[">>="](Control_Monad_Writer_Trans.bindWriterT(Prelude.semigroupArray)(Data_Identity.monadIdentity))(_5)(function (_18) {
	              return (function (_0) {
	                  return _0;
	              })(f(_18));
	          }));
	      };
	  });
	  var applicativeStyleM = new Prelude.Applicative(function () {
	      return applyStyleM;
	  }, function (_19) {
	      return S(Prelude.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Data_Identity.applicativeIdentity))(_19));
	  });
	  var monadStyleM = new Prelude.Monad(function () {
	      return applicativeStyleM;
	  }, function () {
	      return bindStyleM;
	  });
	  exports["S"] = S;
	  exports["Property"] = Property;
	  exports["Nested"] = Nested;
	  exports["Query"] = Query;
	  exports["Face"] = Face;
	  exports["Keyframe"] = Keyframe;
	  exports["Import"] = Import;
	  exports["Self"] = Self;
	  exports["Root"] = Root;
	  exports["Pop"] = Pop;
	  exports["Child"] = Child;
	  exports["Sub"] = Sub;
	  exports["?"] = $qmark;
	  exports["key"] = key;
	  exports["rule"] = rule;
	  exports["runS"] = runS;
	  exports["functorStyleM"] = functorStyleM;
	  exports["applyStyleM"] = applyStyleM;
	  exports["bindStyleM"] = bindStyleM;
	  exports["applicativeStyleM"] = applicativeStyleM;
	  exports["monadStyleM"] = monadStyleM;;
	 
	})(PS["CSS.Stylesheet"] = PS["CSS.Stylesheet"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];                                                                                       
	  var backgroundColor = CSS_Stylesheet.key(CSS_Color.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("background-color"));
	  exports["backgroundColor"] = backgroundColor;;
	 
	})(PS["CSS.Background"] = PS["CSS.Background"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var tuple4 = function (a) {
	      return function (b) {
	          return function (c) {
	              return function (d) {
	                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
	              };
	          };
	      };
	  };
	  var tuple3 = function (a) {
	      return function (b) {
	          return function (c) {
	              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
	          };
	      };
	  };
	  exports["tuple4"] = tuple4;
	  exports["tuple3"] = tuple3;;
	 
	})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_String = PS["CSS.String"];
	  var valSize = new CSS_Property.Val(function (_0) {
	      return _0;
	  });
	  var px = function (i) {
	      return Prelude["<>"](CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
	  };
	  var pct = function (i) {
	      return Prelude["<>"](CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("%"));
	  };
	  var em = function (i) {
	      return Prelude["<>"](CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("em"));
	  };
	  exports["pct"] = pct;
	  exports["em"] = em;
	  exports["px"] = px;
	  exports["valSize"] = valSize;;
	 
	})(PS["CSS.Size"] = PS["CSS.Size"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];     
	  var Stroke = function (x) {
	      return x;
	  };                                                                           
	  var valStroke = new CSS_Property.Val(function (_0) {
	      return _0;
	  });
	  var solid = Stroke(CSS_String.fromString(CSS_Property.isStringValue)("solid"));  
	  var borderRadius = function (a) {
	      return function (b) {
	          return function (c) {
	              return function (d) {
	                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Size.valSize))(CSS_Size.valSize))(CSS_Size.valSize))(CSS_String.fromString(CSS_Property.isStringKey)("border-radius"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
	              };
	          };
	      };
	  };                                                                                                                        
	  var border = function (a) {
	      return function (b) {
	          return function (c) {
	              return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Property.valTuple(valStroke)(CSS_Size.valSize))(CSS_Color.valColor))(CSS_String.fromString(CSS_Property.isStringKey)("border"))(Data_Tuple_Nested.tuple3(a)(b)(c));
	          };
	      };
	  };
	  exports["Stroke"] = Stroke;
	  exports["borderRadius"] = borderRadius;
	  exports["border"] = border;
	  exports["solid"] = solid;
	  exports["valStroke"] = valStroke;;
	 
	})(PS["CSS.Border"] = PS["CSS.Border"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];     
	  var Position = function (x) {
	      return x;
	  };
	  var Display = function (x) {
	      return x;
	  };
	  var valPosition = new CSS_Property.Val(function (_0) {
	      return _0;
	  });
	  var valDisplay = new CSS_Property.Val(function (_1) {
	      return _1;
	  });                                                                             
	  var relative = Position(CSS_String.fromString(CSS_Property.isStringValue)("relative"));
	  var position = CSS_Stylesheet.key(valPosition)(CSS_String.fromString(CSS_Property.isStringKey)("position"));
	  var flex = Display(CSS_String.fromString(CSS_Property.isStringValue)("flex"));             
	  var display = CSS_Stylesheet.key(valDisplay)(CSS_String.fromString(CSS_Property.isStringKey)("display"));
	  var absolute = Position(CSS_String.fromString(CSS_Property.isStringValue)("absolute"));
	  exports["Display"] = Display;
	  exports["Position"] = Position;
	  exports["display"] = display;
	  exports["flex"] = flex;
	  exports["relative"] = relative;
	  exports["absolute"] = absolute;
	  exports["position"] = position;
	  exports["valPosition"] = valPosition;
	  exports["valDisplay"] = valDisplay;;
	 
	})(PS["CSS.Display"] = PS["CSS.Display"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_NonEmpty = PS["Data.NonEmpty"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var color = CSS_Stylesheet.key(CSS_Color.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("color"));
	  exports["color"] = color;;
	 
	})(PS["CSS.Font"] = PS["CSS.Font"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_Property = PS["CSS.Property"];     
	  var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));
	  var top = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("top"));
	  var right = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("right"));                 
	  var padding = function (a) {
	      return function (b) {
	          return function (c) {
	              return function (d) {
	                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Size.valSize))(CSS_Size.valSize))(CSS_Size.valSize))(CSS_String.fromString(CSS_Property.isStringKey)("padding"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
	              };
	          };
	      };
	  };                                                                                                                        
	  var margin = function (a) {
	      return function (b) {
	          return function (c) {
	              return function (d) {
	                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Size.valSize))(CSS_Size.valSize))(CSS_Size.valSize))(CSS_String.fromString(CSS_Property.isStringKey)("margin"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
	              };
	          };
	      };
	  };
	  var left = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("left"));
	  var height = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("height"));
	  var bottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("bottom"));
	  exports["margin"] = margin;
	  exports["padding"] = padding;
	  exports["right"] = right;
	  exports["left"] = left;
	  exports["bottom"] = bottom;
	  exports["top"] = top;
	  exports["height"] = height;
	  exports["width"] = width;;
	 
	})(PS["CSS.Geometry"] = PS["CSS.Geometry"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Data_Bifoldable = PS["Data.Bifoldable"];
	  var Data_Bifunctor = PS["Data.Bifunctor"];
	  var Data_Bitraversable = PS["Data.Bitraversable"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Prelude = PS["Prelude"];     
	  var This = (function () {
	      function This(value0) {
	          this.value0 = value0;
	      };
	      This.create = function (value0) {
	          return new This(value0);
	      };
	      return This;
	  })();
	  var That = (function () {
	      function That(value0) {
	          this.value0 = value0;
	      };
	      That.create = function (value0) {
	          return new That(value0);
	      };
	      return That;
	  })();
	  var Both = (function () {
	      function Both(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Both.create = function (value0) {
	          return function (value1) {
	              return new Both(value0, value1);
	          };
	      };
	      return Both;
	  })();
	  var theseRight = function (_7) {
	      if (_7 instanceof Both) {
	          return new Data_Maybe.Just(_7.value1);
	      };
	      if (_7 instanceof That) {
	          return new Data_Maybe.Just(_7.value0);
	      };
	      return Data_Maybe.Nothing.value;
	  };
	  var theseLeft = function (_6) {
	      if (_6 instanceof Both) {
	          return new Data_Maybe.Just(_6.value0);
	      };
	      if (_6 instanceof This) {
	          return new Data_Maybe.Just(_6.value0);
	      };
	      return Data_Maybe.Nothing.value;
	  };
	  var semigroupThese = function (__dict_Semigroup_2) {
	      return function (__dict_Semigroup_3) {
	          return new Prelude.Semigroup(function (_8) {
	              return function (_9) {
	                  if (_8 instanceof This && _9 instanceof This) {
	                      return new This(Prelude["<>"](__dict_Semigroup_2)(_8.value0)(_9.value0));
	                  };
	                  if (_8 instanceof This && _9 instanceof That) {
	                      return new Both(_8.value0, _9.value0);
	                  };
	                  if (_8 instanceof This && _9 instanceof Both) {
	                      return new Both(Prelude["<>"](__dict_Semigroup_2)(_8.value0)(_9.value0), _9.value1);
	                  };
	                  if (_8 instanceof That && _9 instanceof This) {
	                      return new Both(_9.value0, _8.value0);
	                  };
	                  if (_8 instanceof That && _9 instanceof That) {
	                      return new That(Prelude["<>"](__dict_Semigroup_3)(_8.value0)(_9.value0));
	                  };
	                  if (_8 instanceof That && _9 instanceof Both) {
	                      return new Both(_9.value0, Prelude["<>"](__dict_Semigroup_3)(_8.value0)(_9.value1));
	                  };
	                  if (_8 instanceof Both && _9 instanceof This) {
	                      return new Both(Prelude["<>"](__dict_Semigroup_2)(_8.value0)(_9.value0), _8.value1);
	                  };
	                  if (_8 instanceof Both && _9 instanceof That) {
	                      return new Both(_8.value0, Prelude["<>"](__dict_Semigroup_3)(_8.value1)(_9.value0));
	                  };
	                  if (_8 instanceof Both && _9 instanceof Both) {
	                      return new Both(Prelude["<>"](__dict_Semigroup_2)(_8.value0)(_9.value0), Prelude["<>"](__dict_Semigroup_3)(_8.value1)(_9.value1));
	                  };
	                  throw new Error("Failed pattern match at Data.These line 30, column 1 - line 41, column 1: " + [ _8.constructor.name, _9.constructor.name ]);
	              };
	          });
	      };
	  };
	  exports["This"] = This;
	  exports["That"] = That;
	  exports["Both"] = Both;
	  exports["theseRight"] = theseRight;
	  exports["theseLeft"] = theseLeft;
	  exports["semigroupThese"] = semigroupThese;;
	 
	})(PS["Data.These"] = PS["Data.These"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_NonEmpty = PS["Data.NonEmpty"];
	  var Data_These = PS["Data.These"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_Selector = PS["CSS.Selector"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var Control_Alternative = PS["Control.Alternative"];     
	  var Sheet = function (x) {
	      return x;
	  };
	  var Inline = function (x) {
	      return x;
	  };
	  var sepWith = function (s) {
	      return function (a) {
	          return function (b) {
	              return a + (s + b);
	          };
	      };
	  };
	  var semigroupInline = new Prelude.Semigroup(function (_26) {
	      return function (_27) {
	          return _26 + _27;
	      };
	  });
	  var semigroupFile = new Prelude.Semigroup(function (_28) {
	      return function (_29) {
	          return _28 + _29;
	      };
	  });
	  var properties = function (xs) {
	      var sheetRules = Data_Either.either(function (_8) {
	          return Data_Monoid.mempty(Data_Monoid.monoidString);
	      })(function (_9) {
	          return Data_Foldable.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ _9.value0, ": ", _9.value1 ]);
	      });
	      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Prelude["<$>"](Prelude.functorArray)(sheetRules)(xs));
	  };
	  var predicate = function (_24) {
	      if (_24 instanceof CSS_Selector.Id) {
	          return "#" + _24.value0;
	      };
	      if (_24 instanceof CSS_Selector.Class) {
	          return "." + _24.value0;
	      };
	      if (_24 instanceof CSS_Selector.Attr) {
	          return "[" + (_24.value0 + "]");
	      };
	      if (_24 instanceof CSS_Selector.AttrVal) {
	          return "[" + (_24.value0 + ("='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.AttrBegins) {
	          return "[" + (_24.value0 + ("^='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.AttrEnds) {
	          return "[" + (_24.value0 + ("$='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.AttrContains) {
	          return "[" + (_24.value0 + ("*='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.AttrSpace) {
	          return "[" + (_24.value0 + ("~='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.AttrHyph) {
	          return "[" + (_24.value0 + ("|='" + (_24.value1 + "']")));
	      };
	      if (_24 instanceof CSS_Selector.Pseudo) {
	          return ":" + _24.value0;
	      };
	      if (_24 instanceof CSS_Selector.PseudoFunc) {
	          return ":" + (_24.value0 + ("(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(_24.value1) + ")")));
	      };
	      throw new Error("Failed pattern match at CSS.Render line 145, column 1 - line 146, column 1: " + [ _24.constructor.name ]);
	  };
	  var selector$prime$prime = function (_18) {
	      return function (_19) {
	          if (_18.length === 0 && _19 instanceof CSS_Selector.Star) {
	              return [ "*" ];
	          };
	          if (_19 instanceof CSS_Selector.Star) {
	              return [ "" ];
	          };
	          if (_19 instanceof CSS_Selector.Elem) {
	              return [ _19.value0 ];
	          };
	          if (_19 instanceof CSS_Selector.PathChild) {
	              return Prelude["<*>"](Prelude.applyArray)(Prelude["<$>"](Prelude.functorArray)(sepWith(" > "))(selector$prime(_19.value0)))(selector$prime(_19.value1));
	          };
	          if (_19 instanceof CSS_Selector.Deep) {
	              return Prelude["<*>"](Prelude.applyArray)(Prelude["<$>"](Prelude.functorArray)(sepWith(" "))(selector$prime(_19.value0)))(selector$prime(_19.value1));
	          };
	          if (_19 instanceof CSS_Selector.Adjacent) {
	              return Prelude["<*>"](Prelude.applyArray)(Prelude["<$>"](Prelude.functorArray)(sepWith(" + "))(selector$prime(_19.value0)))(selector$prime(_19.value1));
	          };
	          if (_19 instanceof CSS_Selector.Combined) {
	              return Prelude["<>"](Prelude.semigroupArray)(selector$prime(_19.value0))(selector$prime(_19.value1));
	          };
	          throw new Error("Failed pattern match: " + [ _18.constructor.name, _19.constructor.name ]);
	      };
	  };
	  var selector$prime = function (_17) {
	      return Prelude["<$>"](Prelude.functorArray)(function (_3) {
	          return _3 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(CSS_Selector.ordPredicate)(_17.value0));
	      })(selector$prime$prime(_17.value0)(_17.value1));
	  };
	  var selector = function (_141) {
	      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(selector$prime(_141));
	  };
	  var nel = function (_25) {
	      if (_25.length === 0) {
	          return Data_Maybe.Nothing.value;
	      };
	      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_10) {
	          return Data_NonEmpty[":|"](_10.head)(_10.tail);
	      })(Data_Array.uncons(_25));
	  };                                               
	  var merger = function (_23) {
	      if (_23.value0 instanceof CSS_Stylesheet.Child) {
	          return Data_Maybe.maybe(_23.value0.value0)(function (xs$prime) {
	              return CSS_Selector["|>"](merger(xs$prime))(_23.value0.value0);
	          })(nel(_23.value1));
	      };
	      if (_23.value0 instanceof CSS_Stylesheet.Sub) {
	          return Data_Maybe.maybe(_23.value0.value0)(function (xs$prime) {
	              return CSS_Selector["**"](merger(xs$prime))(_23.value0.value0);
	          })(nel(_23.value1));
	      };
	      if (_23.value0 instanceof CSS_Stylesheet.Root) {
	          return Data_Maybe.maybe(_23.value0.value0)(function (xs$prime) {
	              return CSS_Selector["**"](_23.value0.value0)(merger(xs$prime));
	          })(nel(_23.value1));
	      };
	      if (_23.value0 instanceof CSS_Stylesheet.Pop) {
	          return Data_Maybe.maybe(CSS_Selector.element("TODO"))(merger)(nel(Data_Array.drop(_23.value0.value0)(Data_Array[":"](_23.value0)(_23.value1))));
	      };
	      if (_23.value0 instanceof CSS_Stylesheet.Self) {
	          return Data_Maybe.maybe(CSS_Selector["with"](CSS_Selector.star)(_23.value0.value0))(function (xs$prime) {
	              return CSS_Selector["with"](merger(xs$prime))(_23.value0.value0);
	          })(nel(_23.value1));
	      };
	      throw new Error("Failed pattern match: " + [ _23.value0.constructor.name ]);
	  };
	  var mediaType = function (_15) {
	      return CSS_Property.plain(_15);
	  };
	  var imp = function (t) {
	      return Data_Maybe.Just.create(Data_These.That.create(Sheet(CSS_String.fromString(CSS_String.isStringString)("@import url(" + (t + ");\n")))));
	  };
	  var getSheet = function (_12) {
	      return _12;
	  };
	  var renderedSheet = function (_1) {
	      return Prelude[">>="](Data_Maybe.bindMaybe)(_1)(function (_142) {
	          return Prelude.map(Data_Maybe.functorMaybe)(getSheet)(Data_These.theseRight(_142));
	      });
	  };
	  var getInline = function (_11) {
	      return _11;
	  };
	  var renderedInline = function (_0) {
	      return Prelude[">>="](Data_Maybe.bindMaybe)(_0)(function (_143) {
	          return Prelude.map(Data_Maybe.functorMaybe)(getInline)(Data_These.theseLeft(_143));
	      });
	  };
	  var feature = function (_16) {
	      return Data_Maybe.maybe(_16.value0)(function (_4) {
	          return "(" + (_16.value0 + (": " + (CSS_Property.plain(_4) + ")")));
	      })(_16.value1);
	  };
	  var mediaQuery = function (_14) {
	      return "@media " + (mediaType(_14.value1) + Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Prelude["<>"](Prelude.semigroupString))(Prelude["<$>"](Data_NonEmpty.functorNonEmpty(Prelude.functorArray))(function (_144) {
	          return " and " + feature(_144);
	      })(_14.value2)));
	  };
	  var collect$prime = function (_21) {
	      return function (_22) {
	          if (_21 instanceof CSS_Property.Plain && _22 instanceof CSS_Property.Plain) {
	              return [ new Data_Either.Right(new Data_Tuple.Tuple(_21.value0, _22.value0)) ];
	          };
	          if (_21 instanceof CSS_Property.Prefixed && _22 instanceof CSS_Property.Plain) {
	              return Prelude["<$>"](Prelude.functorArray)(function (_5) {
	                  return Data_Either.Right.create(new Data_Tuple.Tuple(_5.value0 + _5.value1, _22.value0));
	              })(_21.value0);
	          };
	          if (_21 instanceof CSS_Property.Plain && _22 instanceof CSS_Property.Prefixed) {
	              return Prelude["<$>"](Prelude.functorArray)(function (_6) {
	                  return Data_Either.Right.create(new Data_Tuple.Tuple(_21.value0, _6.value0 + _6.value1));
	              })(_22.value0);
	          };
	          if (_21 instanceof CSS_Property.Prefixed && _22 instanceof CSS_Property.Prefixed) {
	              return Prelude["<$>"](Prelude.functorArray)(function (_7) {
	                  return Data_Maybe.maybe(new Data_Either.Left(_7.value0 + _7.value1))(function (_145) {
	                      return Data_Either.Right.create(Data_Tuple.Tuple.create(_7.value0 + _7.value1)(_7.value0 + _145));
	                  })(Data_Tuple.lookup(Data_Foldable.foldableArray)(Prelude.eqString)(_7.value0)(_22.value0));
	              })(_21.value0);
	          };
	          throw new Error("Failed pattern match at CSS.Render line 126, column 1 - line 127, column 1: " + [ _21.constructor.name, _22.constructor.name ]);
	      };
	  };
	  var collect = function (_20) {
	      return collect$prime(_20.value0)(_20.value1);
	  };
	  var rule$prime = function (sel) {
	      return function (props) {
	          var p = Prelude[">>="](Prelude.bindArray)(props)(collect);
	          var q = Prelude["<$>"](Data_Maybe.functorMaybe)(function (_146) {
	              return Data_These.This.create(Inline(properties(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)(_146))));
	          })(nel(p));
	          var o = function (sel$prime) {
	              return Data_Maybe.Just.create(Data_These.That.create(Sheet(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}" ]))));
	          };
	          return Data_Maybe.maybe(q)(o)(nel(sel));
	      };
	  };
	  var rules = function (sel) {
	      return function (rs) {
	          var queries = function (_32) {
	              if (_32 instanceof CSS_Stylesheet.Query) {
	                  return new Data_Maybe.Just(new Data_Tuple.Tuple(_32.value0, _32.value1));
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var queryRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Tuple.uncurry(Prelude.flip(query$prime)(sel)))(Data_Array.mapMaybe(queries)(rs));
	          var property = function (_30) {
	              if (_30 instanceof CSS_Stylesheet.Property) {
	                  return new Data_Maybe.Just(new Data_Tuple.Tuple(_30.value0, _30.value1));
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var topRules = rule$prime(sel)(Data_Array.mapMaybe(property)(rs));
	          var nestedRules = function (a) {
	              return rules(Data_Array[":"](a)(sel));
	          };
	          var nested = function (_31) {
	              if (_31 instanceof CSS_Stylesheet.Nested) {
	                  return new Data_Maybe.Just(new Data_Tuple.Tuple(_31.value0, _31.value1));
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var nestedSheets = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(function (_2) {
	              return Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(_2)(Data_Maybe.Just.create(Data_These.That.create("\n")));
	          })(Prelude["<$>"](Prelude.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
	          var kframes = function (_33) {
	              if (_33 instanceof CSS_Stylesheet.Keyframe) {
	                  return new Data_Maybe.Just(_33.value0);
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var keyframeRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(kframe)(Data_Array.mapMaybe(kframes)(rs));
	          var imports = function (_35) {
	              if (_35 instanceof CSS_Stylesheet.Import) {
	                  return new Data_Maybe.Just(_35.value0);
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var importRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(imp)(Data_Array.mapMaybe(imports)(rs));
	          var faces = function (_34) {
	              if (_34 instanceof CSS_Stylesheet.Face) {
	                  return new Data_Maybe.Just(_34.value0);
	              };
	              return Data_Maybe.Nothing.value;
	          };
	          var faceRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(face)(Data_Array.mapMaybe(faces)(rs));
	          return Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(importRules)(Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(keyframeRules)(Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(faceRules)(Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(nestedSheets)(queryRules)))));
	      };
	  };
	  var query$prime = function (q) {
	      return function (sel) {
	          return function (rs) {
	              return Data_Maybe.Just.create(Data_These.That.create(Sheet(mediaQuery(q) + (" { " + (Data_Maybe.fromMaybe("")(renderedSheet(rules(sel)(rs))) + " }\n")))));
	          };
	      };
	  };
	  var kframe = function (_13) {
	      return Data_Maybe.Just.create(Data_These.That.create(Sheet("@-webkit-keyframes " + (_13.value0 + (" { " + (Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(Data_Monoid.monoidString)(" ")(Prelude["<$>"](Data_NonEmpty.functorNonEmpty(Prelude.functorArray))(Data_Tuple.uncurry(frame))(_13.value1)) + " }\n"))))));
	  };
	  var frame = function (p) {
	      return function (rs) {
	          var x = Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs)));
	          return Prelude.show(Prelude.showNumber)(p) + ("% " + ("{ " + (x + " }")));
	      };
	  };
	  var face = function (rs) {
	      return Data_Maybe.Just.create(Data_These.That.create(Sheet("@font-face { " + (Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs))) + " }\n"))));
	  };
	  var render = function (_147) {
	      return rules([  ])(CSS_Stylesheet.runS(_147));
	  };
	  exports["Sheet"] = Sheet;
	  exports["Inline"] = Inline;
	  exports["nel"] = nel;
	  exports["predicate"] = predicate;
	  exports["merger"] = merger;
	  exports["properties"] = properties;
	  exports["collect"] = collect;
	  exports["sepWith"] = sepWith;
	  exports["selector"] = selector;
	  exports["imp"] = imp;
	  exports["rules"] = rules;
	  exports["face"] = face;
	  exports["feature"] = feature;
	  exports["mediaType"] = mediaType;
	  exports["mediaQuery"] = mediaQuery;
	  exports["frame"] = frame;
	  exports["kframe"] = kframe;
	  exports["render"] = render;
	  exports["renderedSheet"] = renderedSheet;
	  exports["renderedInline"] = renderedInline;
	  exports["getSheet"] = getSheet;
	  exports["getInline"] = getInline;
	  exports["semigroupInline"] = semigroupInline;
	  exports["semigroupFile"] = semigroupFile;;
	 
	})(PS["CSS.Render"] = PS["CSS.Render"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var CSS_Property = PS["CSS.Property"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];     
	  var Transformation = function (x) {
	      return x;
	  };
	  var valTransformation = new CSS_Property.Val(function (_0) {
	      return _0;
	  });
	  var transform = CSS_Stylesheet.key(valTransformation)(CSS_String.fromString(CSS_Property.isStringKey)("transform"));
	  exports["Transformation"] = Transformation;
	  exports["transform"] = transform;
	  exports["valTransformation"] = valTransformation;;
	 
	})(PS["CSS.Transform"] = PS["CSS.Transform"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var $greater$eq$greater = function (__dict_Bind_0) {
	      return function (f) {
	          return function (g) {
	              return function (a) {
	                  return Prelude[">>="](__dict_Bind_0)(f(a))(g);
	              };
	          };
	      };
	  };
	  var $eq$less$less = function (__dict_Bind_1) {
	      return function (f) {
	          return function (m) {
	              return Prelude[">>="](__dict_Bind_1)(m)(f);
	          };
	      };
	  };
	  var $less$eq$less = function (__dict_Bind_2) {
	      return function (f) {
	          return function (g) {
	              return function (a) {
	                  return $eq$less$less(__dict_Bind_2)(f)(g(a));
	              };
	          };
	      };
	  };
	  exports["<=<"] = $less$eq$less;
	  exports[">=>"] = $greater$eq$greater;;
	 
	})(PS["Control.Bind"] = PS["Control.Bind"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var when = function (__dict_Monad_0) {
	      return function (_0) {
	          return function (m) {
	              if (_0) {
	                  return m;
	              };
	              if (!_0) {
	                  return Prelude["return"](__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
	              };
	              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ _0.constructor.name, m.constructor.name ]);
	          };
	      };
	  };
	  exports["when"] = when;;
	 
	})(PS["Control.Monad"] = PS["Control.Monad"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports._makeAff = function (cb) {
	    return function(success, error) {
	      return cb(function(e) {
	        return function() {
	          error(e);
	        };
	      })(function(v) {
	        return function() {
	          try {
	            success(v);
	          } catch (e) {
	            error(e);
	          }
	        };
	      })();
	    }
	  }

	  exports._pure = function (nonCanceler, v) {
	    return function(success, error) {
	      try {
	        success(v);
	      } catch (e) {
	        error(e);
	      }

	      return nonCanceler;
	    };
	  }

	  exports._throwError = function (nonCanceler, e) {
	    return function(success, error) {
	      error(e);

	      return nonCanceler;
	    };
	  }

	  exports._fmap = function (f, aff) {
	    return function(success, error) {
	      return aff(function(v) {
	        try {
	          success(f(v));
	        } catch (e) {
	          error(e);
	        }
	      }, error);
	    };
	  }

	  exports._bind = function (alwaysCanceler, aff, f) {
	    return function(success, error) {
	      var canceler1, canceler2;

	      var isCanceled    = false;
	      var requestCancel = false;

	      var onCanceler = function(){};

	      canceler1 = aff(function(v) {
	        if (requestCancel) {
	          isCanceled = true;

	          return alwaysCanceler;
	        } else {
	          canceler2 = f(v)(success, error);

	          onCanceler(canceler2);

	          return canceler2;
	        }
	      }, error);

	      return function(e) {
	        return function(s, f) {
	          requestCancel = true;

	          if (canceler2 !== undefined) {
	            return canceler2(e)(s, f);
	          } else {
	            return canceler1(e)(function(bool) {
	              if (bool || isCanceled) {
	                try {
	                  s(true);
	                } catch (e) {
	                  f(e);
	                }
	              } else {
	                onCanceler = function(canceler) {
	                  canceler(e)(s, f);
	                };
	              }
	            }, f);
	          }
	        };
	      };
	    };
	  }

	  exports._attempt = function (Left, Right, aff) {
	    return function(success, error) {
	      return aff(function(v) {
	        try {
	          success(Right(v));
	        } catch (e) {
	          error(e);
	        }
	      }, function(e) {
	        try {
	          success(Left(e));
	        } catch (e) {
	          error(e);
	        }
	      });
	    };
	  }

	  exports._runAff = function (errorT, successT, aff) {
	    return function() {
	      return aff(function(v) {
	        try {
	          successT(v)();
	        } catch (e) {
	          errorT(e)();
	        }
	      }, function(e) {
	        errorT(e)();
	      });
	    };
	  }

	  exports._liftEff = function (nonCanceler, e) {
	    return function(success, error) {
	      try {
	        success(e());
	      } catch (e) {
	        error(e);
	      }

	      return nonCanceler;
	    };
	  }
	 
	})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Control.Monad.Eff.Exception

	  exports.showErrorImpl = function (err) {
	    return err.stack || err.toString();
	  };

	  exports.error = function (msg) {
	    return new Error(msg);
	  };

	  exports.throwException = function (e) {
	    return function () {
	      throw e;
	    };
	  };

	  exports.catchException = function (c) {
	    return function (t) {
	      return function () {
	        try {
	          return t();
	        } catch (e) {
	          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
	            return c(e)();
	          } else {
	            return c(new Error(e.toString()))();
	          }
	        }
	      };
	    };
	  };
	 
	})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.Eff.Exception"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];                                 
	  var showError = new Prelude.Show($foreign.showErrorImpl);
	  exports["showError"] = showError;
	  exports["catchException"] = $foreign.catchException;
	  exports["throwException"] = $foreign.throwException;
	  exports["error"] = $foreign.error;;
	 
	})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports.runFn2 = function (fn) {
	    return function (a) {
	      return function (b) {
	        return fn(a, b);
	      };
	    };
	  };

	  exports.runFn4 = function (fn) {
	    return function (a) {
	      return function (b) {
	        return function (c) {
	          return function (d) {
	            return fn(a, b, c, d);
	          };
	        };
	      };
	    };
	  };
	 
	})(PS["Data.Function"] = PS["Data.Function"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Function"];
	  var Prelude = PS["Prelude"];     
	  var on = function (f) {
	      return function (g) {
	          return function (x) {
	              return function (y) {
	                  return f(g(x))(g(y));
	              };
	          };
	      };
	  };
	  exports["on"] = on;
	  exports["runFn4"] = $foreign.runFn4;
	  exports["runFn2"] = $foreign.runFn2;;
	 
	})(PS["Data.Function"] = PS["Data.Function"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.Aff"];
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
	  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var runAff = function (ex) {
	      return function (f) {
	          return function (aff) {
	              return $foreign._runAff(ex, f, aff);
	          };
	      };
	  };
	  var makeAff$prime = function (h) {
	      return $foreign._makeAff(h);
	  };
	  var functorAff = new Prelude.Functor(function (f) {
	      return function (fa) {
	          return $foreign._fmap(f, fa);
	      };
	  });
	  var attempt = function (aff) {
	      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
	  };
	  var applyAff = new Prelude.Apply(function () {
	      return functorAff;
	  }, function (ff) {
	      return function (fa) {
	          return $foreign._bind(alwaysCanceler, ff, function (f) {
	              return Prelude["<$>"](functorAff)(f)(fa);
	          });
	      };
	  });
	  var applicativeAff = new Prelude.Applicative(function () {
	      return applyAff;
	  }, function (v) {
	      return $foreign._pure(nonCanceler, v);
	  });
	  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
	  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
	  var makeAff = function (h) {
	      return makeAff$prime(function (e) {
	          return function (a) {
	              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
	          };
	      });
	  };                                                       
	  var bindAff = new Prelude.Bind(function () {
	      return applyAff;
	  }, function (fa) {
	      return function (f) {
	          return $foreign._bind(alwaysCanceler, fa, f);
	      };
	  });
	  var monadAff = new Prelude.Monad(function () {
	      return applicativeAff;
	  }, function () {
	      return bindAff;
	  });
	  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
	      return monadAff;
	  }, function (eff) {
	      return $foreign._liftEff(nonCanceler, eff);
	  });
	  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
	      return monadAff;
	  }, function (aff) {
	      return function (ex) {
	          return Prelude[">>="](bindAff)(attempt(aff))(Data_Either.either(ex)(Prelude.pure(applicativeAff)));
	      };
	  }, function (e) {
	      return $foreign._throwError(nonCanceler, e);
	  });
	  exports["runAff"] = runAff;
	  exports["nonCanceler"] = nonCanceler;
	  exports["makeAff'"] = makeAff$prime;
	  exports["makeAff"] = makeAff;
	  exports["attempt"] = attempt;
	  exports["functorAff"] = functorAff;
	  exports["applyAff"] = applyAff;
	  exports["applicativeAff"] = applicativeAff;
	  exports["bindAff"] = bindAff;
	  exports["monadAff"] = monadAff;
	  exports["monadEffAff"] = monadEffAff;
	  exports["monadErrorAff"] = monadErrorAff;;
	 
	})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
	(function(exports) {
	  /* global exports, console */
	  "use strict";

	  // module Control.Monad.Eff.Console

	  exports.log = function (s) {
	    return function () {
	      console.log(s);
	      return {};
	    };
	  };
	 
	})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.Eff.Console"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
	  var print = function (__dict_Show_0) {
	      return function (_0) {
	          return $foreign.log(Prelude.show(__dict_Show_0)(_0));
	      };
	  };
	  exports["print"] = print;
	  exports["log"] = $foreign.log;;
	 
	})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Control.Monad.Eff.Ref

	  exports.newRef = function (val) {
	    return function () {
	      return { value: val };
	    };
	  };

	  exports.readRef = function (ref) {
	    return function () {
	      return ref.value;
	    };
	  };

	  exports.writeRef = function (ref) {
	    return function (val) {
	      return function () {
	        ref.value = val;
	        return {};
	      };
	    };
	  };
	 
	})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Control.Monad.Eff.Ref"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  exports["writeRef"] = $foreign.writeRef;
	  exports["readRef"] = $foreign.readRef;
	  exports["newRef"] = $foreign.newRef;;
	 
	})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Either = PS["Data.Either"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Lazy = PS["Control.Lazy"];
	  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
	  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
	  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Control_Monad_Trans = PS["Control.Monad.Trans"];
	  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];     
	  var StateT = function (x) {
	      return x;
	  };
	  var runStateT = function (_6) {
	      return _6;
	  };
	  var monadStateT = function (__dict_Monad_5) {
	      return new Prelude.Monad(function () {
	          return applicativeStateT(__dict_Monad_5);
	      }, function () {
	          return bindStateT(__dict_Monad_5);
	      });
	  };
	  var functorStateT = function (__dict_Monad_14) {
	      return new Prelude.Functor(Prelude.liftM1(monadStateT(__dict_Monad_14)));
	  };
	  var bindStateT = function (__dict_Monad_17) {
	      return new Prelude.Bind(function () {
	          return applyStateT(__dict_Monad_17);
	      }, function (_7) {
	          return function (f) {
	              return function (s) {
	                  return Prelude.bind(__dict_Monad_17["__superclass_Prelude.Bind_1"]())(_7(s))(function (_0) {
	                      return runStateT(f(_0.value0))(_0.value1);
	                  });
	              };
	          };
	      });
	  };
	  var applyStateT = function (__dict_Monad_18) {
	      return new Prelude.Apply(function () {
	          return functorStateT(__dict_Monad_18);
	      }, Prelude.ap(monadStateT(__dict_Monad_18)));
	  };
	  var applicativeStateT = function (__dict_Monad_19) {
	      return new Prelude.Applicative(function () {
	          return applyStateT(__dict_Monad_19);
	      }, function (a) {
	          return StateT(function (s) {
	              return Prelude["return"](__dict_Monad_19["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
	          });
	      });
	  };
	  var monadStateStateT = function (__dict_Monad_6) {
	      return new Control_Monad_State_Class.MonadState(function () {
	          return monadStateT(__dict_Monad_6);
	      }, function (f) {
	          return StateT(function (_39) {
	              return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(f(_39));
	          });
	      });
	  };
	  exports["StateT"] = StateT;
	  exports["runStateT"] = runStateT;
	  exports["functorStateT"] = functorStateT;
	  exports["applyStateT"] = applyStateT;
	  exports["applicativeStateT"] = applicativeStateT;
	  exports["bindStateT"] = bindStateT;
	  exports["monadStateT"] = monadStateT;
	  exports["monadStateStateT"] = monadStateStateT;;
	 
	})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
	  var Data_Identity = PS["Data.Identity"];
	  var Data_Tuple = PS["Data.Tuple"];                   
	  var runState = function (s) {
	      return function (_0) {
	          return Data_Identity.runIdentity(Control_Monad_State_Trans.runStateT(s)(_0));
	      };
	  };
	  var evalState = function (m) {
	      return function (s) {
	          return Data_Tuple.fst(runState(m)(s));
	      };
	  };
	  exports["evalState"] = evalState;
	  exports["runState"] = runState;;
	 
	})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports.preventDefault = function (e) {
	    return function () {
	      return e.preventDefault();
	    };
	  };

	  exports.stopPropagation = function (e) {
	    return function () {
	      return e.stopPropagation();
	    };
	  };
	 
	})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.Event.Event"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Enum = PS["Data.Enum"];
	  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
	  var DOM = PS["DOM"];
	  var DOM_Event_EventPhase = PS["DOM.Event.EventPhase"];
	  var DOM_Event_Types = PS["DOM.Event.Types"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  exports["stopPropagation"] = $foreign.stopPropagation;
	  exports["preventDefault"] = $foreign.preventDefault;;
	 
	})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module DOM.Event.EventTarget

	  exports.eventListener = function (fn) {
	    return function (event) {
	      return fn(event)();
	    };
	  };

	  exports.addEventListener = function (type) {
	    return function (listener) {
	      return function (useCapture) {
	        return function (target) {
	          return function () {
	            target.addEventListener(type, listener, useCapture);
	            return {};
	          };
	        };
	      };
	    };
	  };
	 
	})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.Event.EventTarget"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var DOM = PS["DOM"];
	  var DOM_Event_Types = PS["DOM.Event.Types"];
	  exports["addEventListener"] = $foreign.addEventListener;
	  exports["eventListener"] = $foreign.eventListener;;
	 
	})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var DOM_Event_Types = PS["DOM.Event.Types"];
	  var load = "load";
	  exports["load"] = load;;
	 
	})(PS["DOM.Event.EventTypes"] = PS["DOM.Event.EventTypes"] || {});
	(function(exports) {
	  /* global exports, window */
	  "use strict";

	  // module DOM.HTML

	  exports.window = function () {
	    return window;
	  };
	 
	})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Foreign

	  // jshint maxparams: 3
	  exports.parseJSONImpl = function (left, right, str) {
	    try {
	      return right(JSON.parse(str));
	    } catch (e) {
	      return left(e.toString());
	    }
	  };

	  // jshint maxparams: 1
	  exports.toForeign = function (value) {
	    return value;
	  };

	  exports.unsafeFromForeign = function (value) {
	    return value;
	  };

	  exports.typeOf = function (value) {
	    return typeof value;
	  };

	  exports.tagOf = function (value) {
	    return Object.prototype.toString.call(value).slice(8, -1);
	  };

	  exports.isNull = function (value) {
	    return value === null;
	  };

	  exports.isUndefined = function (value) {
	    return value === undefined;
	  };

	  exports.isArray = Array.isArray || function (value) {
	    return Object.prototype.toString.call(value) === "[object Array]";
	  };
	 
	})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Int

	  exports.fromNumberImpl = function (just) {
	    return function (nothing) {
	      return function (n) {
	        /* jshint bitwise: false */
	        return (n | 0) === n ? just(n) : nothing;
	      };
	    };
	  };

	  exports.toNumber = function (n) {
	    return n;
	  };
	 
	})(PS["Data.Int"] = PS["Data.Int"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports.ceil = Math.ceil;

	  exports.floor = Math.floor;

	  exports.max = function (n1) {
	    return function (n2) {
	      return Math.max(n1, n2);
	    };
	  };

	  exports.min = function (n1) {
	    return function (n2) {
	      return Math.min(n1, n2);
	    };
	  };

	  exports.pow = function (n) {
	    return function (p) {
	      return Math.pow(n, p);
	    };
	  };                         
	 
	})(PS["Math"] = PS["Math"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Math"];
	  exports["pow"] = $foreign.pow;
	  exports["min"] = $foreign.min;
	  exports["max"] = $foreign.max;
	  exports["floor"] = $foreign.floor;
	  exports["ceil"] = $foreign.ceil;;
	 
	})(PS["Math"] = PS["Math"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Int"];
	  var Prelude = PS["Prelude"];
	  var Data_Int_Bits = PS["Data.Int.Bits"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
	  var $$Math = PS["Math"];                                                                   
	  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
	  var unsafeClamp = function (x) {
	      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
	          return Prelude.top(Prelude.boundedInt);
	      };
	      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
	          return Prelude.bottom(Prelude.boundedInt);
	      };
	      if (Prelude.otherwise) {
	          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
	      };
	      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
	  };
	  var floor = function (_2) {
	      return unsafeClamp($$Math.floor(_2));
	  };
	  var ceil = function (_3) {
	      return unsafeClamp($$Math.ceil(_3));
	  };
	  exports["floor"] = floor;
	  exports["ceil"] = ceil;
	  exports["fromNumber"] = fromNumber;
	  exports["toNumber"] = $foreign.toNumber;;
	 
	})(PS["Data.Int"] = PS["Data.Int"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Foreign"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Int = PS["Data.Int"];
	  var Data_String = PS["Data.String"];     
	  var TypeMismatch = (function () {
	      function TypeMismatch(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      TypeMismatch.create = function (value0) {
	          return function (value1) {
	              return new TypeMismatch(value0, value1);
	          };
	      };
	      return TypeMismatch;
	  })();
	  var ErrorAtIndex = (function () {
	      function ErrorAtIndex(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      ErrorAtIndex.create = function (value0) {
	          return function (value1) {
	              return new ErrorAtIndex(value0, value1);
	          };
	      };
	      return ErrorAtIndex;
	  })();
	  var ErrorAtProperty = (function () {
	      function ErrorAtProperty(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      ErrorAtProperty.create = function (value0) {
	          return function (value1) {
	              return new ErrorAtProperty(value0, value1);
	          };
	      };
	      return ErrorAtProperty;
	  })();
	  var JSONError = (function () {
	      function JSONError(value0) {
	          this.value0 = value0;
	      };
	      JSONError.create = function (value0) {
	          return new JSONError(value0);
	      };
	      return JSONError;
	  })();
	  var unsafeReadTagged = function (tag) {
	      return function (value) {
	          if (Prelude["=="](Prelude.eqString)($foreign.tagOf(value))(tag)) {
	              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
	          };
	          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
	      };
	  };
	  var showForeignError = new Prelude.Show(function (_0) {
	      if (_0 instanceof TypeMismatch) {
	          return "Type mismatch: expected " + (_0.value0 + (", found " + _0.value1));
	      };
	      if (_0 instanceof ErrorAtIndex) {
	          return "Error at array index " + (Prelude.show(Prelude.showInt)(_0.value0) + (": " + Prelude.show(showForeignError)(_0.value1)));
	      };
	      if (_0 instanceof ErrorAtProperty) {
	          return "Error at property " + (Prelude.show(Prelude.showString)(_0.value0) + (": " + Prelude.show(showForeignError)(_0.value1)));
	      };
	      if (_0 instanceof JSONError) {
	          return "JSON error: " + _0.value0;
	      };
	      throw new Error("Failed pattern match: " + [ _0.constructor.name ]);
	  });
	  var readString = unsafeReadTagged("String");
	  var readNumber = unsafeReadTagged("Number");
	  var readInt = function (value) {
	      var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
	      var fromNumber = function (_30) {
	          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_Int.fromNumber(_30));
	      };
	      return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
	  };                                            
	  var readArray = function (value) {
	      if ($foreign.isArray(value)) {
	          return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
	      };
	      return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
	  };
	  var parseJSON = function (json) {
	      return $foreign.parseJSONImpl(function (_32) {
	          return Data_Either.Left.create(JSONError.create(_32));
	      }, Data_Either.Right.create, json);
	  };
	  exports["TypeMismatch"] = TypeMismatch;
	  exports["ErrorAtIndex"] = ErrorAtIndex;
	  exports["ErrorAtProperty"] = ErrorAtProperty;
	  exports["JSONError"] = JSONError;
	  exports["readArray"] = readArray;
	  exports["readInt"] = readInt;
	  exports["readNumber"] = readNumber;
	  exports["readString"] = readString;
	  exports["unsafeReadTagged"] = unsafeReadTagged;
	  exports["parseJSON"] = parseJSON;
	  exports["showForeignError"] = showForeignError;
	  exports["isUndefined"] = $foreign.isUndefined;
	  exports["isNull"] = $foreign.isNull;
	  exports["typeOf"] = $foreign.typeOf;
	  exports["toForeign"] = $foreign.toForeign;;
	 
	})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Foreign.Index

	  // jshint maxparams: 4
	  exports.unsafeReadPropImpl = function (f, s, key, value) {
	    return value == null ? f : s(value[key]);
	  };

	  // jshint maxparams: 2
	  exports.unsafeHasOwnProperty = function (prop, value) {
	    return Object.prototype.hasOwnProperty.call(value, prop);
	  };

	  exports.unsafeHasProperty = function (prop, value) {
	    return prop in value;
	  };
	 
	})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Foreign.Index"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Int = PS["Data.Int"];     
	  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
	      this.errorAt = errorAt;
	      this.hasOwnProperty = hasOwnProperty;
	      this.hasProperty = hasProperty;
	      this.ix = ix;
	  };
	  var unsafeReadProp = function (k) {
	      return function (value) {
	          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
	      };
	  };
	  var prop = unsafeReadProp;
	  var ix = function (dict) {
	      return dict.ix;
	  };
	  var $bang = function (__dict_Index_0) {
	      return ix(__dict_Index_0);
	  };                         
	  var hasPropertyImpl = function (p) {
	      return function (value) {
	          if (Data_Foreign.isNull(value)) {
	              return false;
	          };
	          if (Data_Foreign.isUndefined(value)) {
	              return false;
	          };
	          if (Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("object") || Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("function")) {
	              return $foreign.unsafeHasProperty(p, value);
	          };
	          return false;
	      };
	  };
	  var hasProperty = function (dict) {
	      return dict.hasProperty;
	  };
	  var hasOwnPropertyImpl = function (p) {
	      return function (value) {
	          if (Data_Foreign.isNull(value)) {
	              return false;
	          };
	          if (Data_Foreign.isUndefined(value)) {
	              return false;
	          };
	          if (Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("object") || Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("function")) {
	              return $foreign.unsafeHasOwnProperty(p, value);
	          };
	          return false;
	      };
	  };                                                                                                                   
	  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(prop));
	  var hasOwnProperty = function (dict) {
	      return dict.hasOwnProperty;
	  };
	  var errorAt = function (dict) {
	      return dict.errorAt;
	  };
	  exports["Index"] = Index;
	  exports["errorAt"] = errorAt;
	  exports["hasOwnProperty"] = hasOwnProperty;
	  exports["hasProperty"] = hasProperty;
	  exports["!"] = $bang;
	  exports["ix"] = ix;
	  exports["prop"] = prop;
	  exports["indexString"] = indexString;;
	 
	})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Either = PS["Data.Either"];     
	  var Null = function (x) {
	      return x;
	  };
	  var runNull = function (_0) {
	      return _0;
	  };
	  var readNull = function (f) {
	      return function (value) {
	          if (Data_Foreign.isNull(value)) {
	              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
	          };
	          return Prelude["<$>"](Data_Either.functorEither)(function (_4) {
	              return Null(Data_Maybe.Just.create(_4));
	          })(f(value));
	      };
	  };
	  exports["Null"] = Null;
	  exports["readNull"] = readNull;
	  exports["runNull"] = runNull;;
	 
	})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];
	  var Data_Foreign_Null = PS["Data.Foreign.Null"];
	  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
	  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
	  var Data_Int = PS["Data.Int"];
	  var Data_Traversable = PS["Data.Traversable"];     
	  var IsForeign = function (read) {
	      this.read = read;
	  };
	  var stringIsForeign = new IsForeign(Data_Foreign.readString);
	  var read = function (dict) {
	      return dict.read;
	  };
	  var readWith = function (__dict_IsForeign_1) {
	      return function (f) {
	          return function (value) {
	              return Data_Either.either(function (_0) {
	                  return Data_Either.Left.create(f(_0));
	              })(Data_Either.Right.create)(read(__dict_IsForeign_1)(value));
	          };
	      };
	  };
	  var readProp = function (__dict_IsForeign_2) {
	      return function (__dict_Index_3) {
	          return function (prop) {
	              return function (value) {
	                  return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](__dict_Index_3)(value)(prop))(readWith(__dict_IsForeign_2)(Data_Foreign_Index.errorAt(__dict_Index_3)(prop)));
	              };
	          };
	      };
	  };
	  var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
	  var intIsForeign = new IsForeign(Data_Foreign.readInt);
	  var foreignIsForeign = new IsForeign(function (f) {
	      return Prelude["return"](Data_Either.applicativeEither)(f);
	  });
	  exports["IsForeign"] = IsForeign;
	  exports["readProp"] = readProp;
	  exports["readWith"] = readWith;
	  exports["read"] = read;
	  exports["foreignIsForeign"] = foreignIsForeign;
	  exports["stringIsForeign"] = stringIsForeign;
	  exports["numberIsForeign"] = numberIsForeign;
	  exports["intIsForeign"] = intIsForeign;;
	 
	})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
	(function(exports) {
	  "use strict";

	  // module Unsafe.Coerce

	  exports.unsafeCoerce = function(x) { return x; }
	 
	})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Unsafe.Coerce"];
	  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
	 
	})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.HTML.Types"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var DOM_Event_Types = PS["DOM.Event.Types"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
	  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;                  
	  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;       
	  var htmlDocumentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
	  exports["htmlElementToNode"] = htmlElementToNode;
	  exports["htmlDocumentToNonElementParentNode"] = htmlDocumentToNonElementParentNode;
	  exports["windowToEventTarget"] = windowToEventTarget;;
	 
	})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.HTML"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM = PS["DOM"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  exports["window"] = $foreign.window;;
	 
	})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module DOM.HTML.Document

	  exports.body = function (doc) {
	    return function () {
	      return doc.body;
	    };
	  };
	 
	})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Nullable

	  exports["null"] = null;

	  exports.nullable = function(a, r, f) {
	      return a == null ? r : f(a);
	  };

	  exports.notNull = function(x) {
	      return x;
	  }; 
	 
	})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Nullable"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Function = PS["Data.Function"];     
	  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
	  var toMaybe = function (n) {
	      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
	  };
	  exports["toNullable"] = toNullable;
	  exports["toMaybe"] = toMaybe;;
	 
	})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.HTML.Document"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var DOM = PS["DOM"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  exports["body"] = $foreign.body;;
	 
	})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module DOM.HTML.Window

	  exports.document = function (window) {
	    return function () {
	      return window.document;
	    };
	  };
	 
	})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.HTML.Window"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM = PS["DOM"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  exports["document"] = $foreign.document;;
	 
	})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports.appendChild = function (node) {
	    return function (parent) {
	      return function () {
	        return parent.appendChild(node);
	      };
	    };
	  };
	 
	})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.Node.Node"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Enum = PS["Data.Enum"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
	  var DOM = PS["DOM"];
	  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  exports["appendChild"] = $foreign.appendChild;;
	 
	})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module DOM.Node.NonElementParentNode

	  exports.getElementById = function (id) {
	    return function (node) {
	      return function () {
	        return node.getElementById(id);
	      };
	    };
	  };
	 
	})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["DOM.Node.NonElementParentNode"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var DOM = PS["DOM"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  exports["getElementById"] = $foreign.getElementById;;
	 
	})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Array.ST

	  exports.runSTArray = function (f) {
	    return f;
	  };

	  exports.emptySTArray = function () {
	    return [];
	  };

	  exports.pushAllSTArray = function (xs) {
	    return function (as) {
	      return function () {
	        return xs.push.apply(xs, as);
	      };
	    };
	  };
	 
	})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Array.ST"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_ST = PS["Control.Monad.ST"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var pushSTArray = function (arr) {
	      return function (a) {
	          return $foreign.pushAllSTArray(arr)([ a ]);
	      };
	  };
	  exports["pushSTArray"] = pushSTArray;
	  exports["emptySTArray"] = $foreign.emptySTArray;
	  exports["runSTArray"] = $foreign.runSTArray;;
	 
	})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Exists

	  exports.mkExists = function (fa) {
	    return fa;
	  };

	  exports.runExists = function (f) {
	    return function (fa) {
	      return f(fa);
	    };
	  };
	 
	})(PS["Data.Exists"] = PS["Data.Exists"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Exists"];
	  var Prelude = PS["Prelude"];
	  exports["runExists"] = $foreign.runExists;
	  exports["mkExists"] = $foreign.mkExists;;
	 
	})(PS["Data.Exists"] = PS["Data.Exists"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.Foreign.EasyFFI

	  exports.unsafeForeignProcedure = function(args) {
	      return function (stmt) {
	          return Function(wrap(args.slice()))();
	          function wrap() {
	              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
	          }
	      };
	  };
	 
	})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.Foreign.EasyFFI"];
	  var Prelude = PS["Prelude"];
	  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;;
	 
	})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Contravariant = function (cmap) {
	      this.cmap = cmap;
	  };
	  var cmap = function (dict) {
	      return dict.cmap;
	  };
	  exports["Contravariant"] = Contravariant;
	  exports["cmap"] = cmap;;
	 
	})(PS["Data.Functor.Contravariant"] = PS["Data.Functor.Contravariant"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Const = PS["Data.Const"];
	  var Data_Profunctor = PS["Data.Profunctor"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
	  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
	  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
	  var runForget = function (_0) {
	      return _0;
	  };
	  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
	      return function (_1) {
	          return function (_2) {
	              return function (_22) {
	                  return _2(f(_22));
	              };
	          };
	      };
	  });
	  var strongForget = new Data_Profunctor_Strong.Strong(function () {
	      return profunctorForget;
	  }, function (_5) {
	      return function (_23) {
	          return _5(Data_Tuple.fst(_23));
	      };
	  }, function (_6) {
	      return function (_24) {
	          return _6(Data_Tuple.snd(_24));
	      };
	  });
	  exports["runForget"] = runForget;
	  exports["profunctorForget"] = profunctorForget;
	  exports["strongForget"] = strongForget;;
	 
	})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Const = PS["Data.Const"];
	  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
	  var Data_Profunctor_Star = PS["Data.Profunctor.Star"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
	  var Data_Lens_Types = PS["Data.Lens.Types"];     
	  var view = function (l) {
	      return Data_Lens_Internal_Forget.runForget(l(Prelude.id(Prelude.categoryFn)));
	  };
	  exports["view"] = view;;
	 
	})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Profunctor = PS["Data.Profunctor"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
	  var Data_Lens_Types = PS["Data.Lens.Types"];
	  var lens$prime = function (to) {
	      return function (__dict_Strong_0) {
	          return function (pab) {
	              return Data_Profunctor.dimap(__dict_Strong_0["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (_0) {
	                  return _0.value1(_0.value0);
	              })(Data_Profunctor_Strong.first(__dict_Strong_0)(pab));
	          };
	      };
	  };
	  var lens = function (get) {
	      return function (set) {
	          return function (__dict_Strong_1) {
	              return lens$prime(function (s) {
	                  return new Data_Tuple.Tuple(get(s), function (b) {
	                      return set(s)(b);
	                  });
	              })(__dict_Strong_1);
	          };
	      };
	  };
	  exports["lens"] = lens;;
	 
	})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Lens_Types = PS["Data.Lens.Types"];     
	  var over = function (l) {
	      return l;
	  };
	  var set = function (l) {
	      return function (b) {
	          return over(l)(Prelude["const"](b));
	      };
	  };
	  exports["set"] = set;
	  exports["over"] = over;;
	 
	})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Array_ST = PS["Data.Array.ST"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_ST = PS["Control.Monad.ST"];     
	  var Unfoldable = function (unfoldr) {
	      this.unfoldr = unfoldr;
	  };
	  var unfoldr = function (dict) {
	      return dict.unfoldr;
	  };
	  var unfoldableArray = new Unfoldable(function (f) {
	      return function (b) {
	          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
	              var _2 = Data_Array_ST.emptySTArray();
	              var _1 = Control_Monad_ST.newSTRef(b)();
	              (function () {
	                  while (!(function __do() {
	                      var _0 = Control_Monad_ST.readSTRef(_1)();
	                      return (function () {
	                          var _6 = f(_0);
	                          if (_6 instanceof Data_Maybe.Nothing) {
	                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
	                          };
	                          if (_6 instanceof Data_Maybe.Just) {
	                              return function __do() {
	                                  Data_Array_ST.pushSTArray(_2)(_6.value0.value0)();
	                                  Control_Monad_ST.writeSTRef(_1)(_6.value0.value1)();
	                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(false)();
	                              };
	                          };
	                          throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ _6.constructor.name ]);
	                      })()();
	                  })()) {

	                  };
	                  return {};
	              })();
	              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_2)();
	          }));
	      };
	  });
	  exports["Unfoldable"] = Unfoldable;
	  exports["unfoldr"] = unfoldr;
	  exports["unfoldableArray"] = unfoldableArray;;
	 
	})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_Lazy = PS["Control.Lazy"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Unfoldable = PS["Data.Unfoldable"];     
	  var Nil = (function () {
	      function Nil() {

	      };
	      Nil.value = new Nil();
	      return Nil;
	  })();
	  var Cons = (function () {
	      function Cons(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Cons.create = function (value0) {
	          return function (value1) {
	              return new Cons(value0, value1);
	          };
	      };
	      return Cons;
	  })();
	  var $colon = Cons.create;
	  var uncons = function (_17) {
	      if (_17 instanceof Nil) {
	          return Data_Maybe.Nothing.value;
	      };
	      if (_17 instanceof Cons) {
	          return new Data_Maybe.Just({
	              head: _17.value0, 
	              tail: _17.value1
	          });
	      };
	      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ _17.constructor.name ]);
	  };
	  var toUnfoldable = function (__dict_Unfoldable_2) {
	      return Data_Unfoldable.unfoldr(__dict_Unfoldable_2)(function (xs) {
	          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
	              return new Data_Tuple.Tuple(rec.head, rec.tail);
	          })(uncons(xs));
	      });
	  };
	  var tail = function (_15) {
	      if (_15 instanceof Nil) {
	          return Data_Maybe.Nothing.value;
	      };
	      if (_15 instanceof Cons) {
	          return new Data_Maybe.Just(_15.value1);
	      };
	      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ _15.constructor.name ]);
	  };
	  var semigroupList = new Prelude.Semigroup(function (_63) {
	      return function (ys) {
	          if (_63 instanceof Nil) {
	              return ys;
	          };
	          if (_63 instanceof Cons) {
	              return new Cons(_63.value0, Prelude["<>"](semigroupList)(_63.value1)(ys));
	          };
	          throw new Error("Failed pattern match: " + [ _63.constructor.name, ys.constructor.name ]);
	      };
	  });
	  var reverse = (function () {
	      var go = function (__copy_acc) {
	          return function (__copy__41) {
	              var acc = __copy_acc;
	              var _41 = __copy__41;
	              tco: while (true) {
	                  var acc_1 = acc;
	                  if (_41 instanceof Nil) {
	                      return acc_1;
	                  };
	                  if (_41 instanceof Cons) {
	                      var __tco_acc = new Cons(_41.value0, acc);
	                      var __tco__41 = _41.value1;
	                      acc = __tco_acc;
	                      _41 = __tco__41;
	                      continue tco;
	                  };
	                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, _41.constructor.name ]);
	              };
	          };
	      };
	      return go(Nil.value);
	  })();
	  var take = (function () {
	      var go = function (__copy_acc) {
	          return function (__copy__51) {
	              return function (__copy__52) {
	                  var acc = __copy_acc;
	                  var _51 = __copy__51;
	                  var _52 = __copy__52;
	                  tco: while (true) {
	                      var acc_1 = acc;
	                      if (_51 === 0) {
	                          return reverse(acc_1);
	                      };
	                      var acc_1 = acc;
	                      if (_52 instanceof Nil) {
	                          return reverse(acc_1);
	                      };
	                      if (_52 instanceof Cons) {
	                          var __tco_acc = new Cons(_52.value0, acc);
	                          var __tco__51 = _51 - 1;
	                          var __tco__52 = _52.value1;
	                          acc = __tco_acc;
	                          _51 = __tco__51;
	                          _52 = __tco__52;
	                          continue tco;
	                      };
	                      throw new Error("Failed pattern match at Data.List line 490, column 1 - line 491, column 1: " + [ acc.constructor.name, _51.constructor.name, _52.constructor.name ]);
	                  };
	              };
	          };
	      };
	      return go(Nil.value);
	  })();                
	  var $$null = function (_11) {
	      if (_11 instanceof Nil) {
	          return true;
	      };
	      return false;
	  };
	  var index = function (__copy__18) {
	      return function (__copy__19) {
	          var _18 = __copy__18;
	          var _19 = __copy__19;
	          tco: while (true) {
	              if (_18 instanceof Nil) {
	                  return Data_Maybe.Nothing.value;
	              };
	              if (_18 instanceof Cons && _19 === 0) {
	                  return new Data_Maybe.Just(_18.value0);
	              };
	              if (_18 instanceof Cons) {
	                  var __tco__18 = _18.value1;
	                  var __tco__19 = _19 - 1;
	                  _18 = __tco__18;
	                  _19 = __tco__19;
	                  continue tco;
	              };
	              throw new Error("Failed pattern match: " + [ _18.constructor.name, _19.constructor.name ]);
	          };
	      };
	  };                     
	  var head = function (_13) {
	      if (_13 instanceof Nil) {
	          return Data_Maybe.Nothing.value;
	      };
	      if (_13 instanceof Cons) {
	          return new Data_Maybe.Just(_13.value0);
	      };
	      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ _13.constructor.name ]);
	  };
	  var functorList = new Prelude.Functor(function (f) {
	      return function (lst) {
	          var go = function (__copy__64) {
	              return function (__copy_acc) {
	                  var _64 = __copy__64;
	                  var acc = __copy_acc;
	                  tco: while (true) {
	                      if (_64 instanceof Nil) {
	                          return acc;
	                      };
	                      if (_64 instanceof Cons) {
	                          var __tco__64 = _64.value1;
	                          var __tco_acc = new Cons(f(_64.value0), acc);
	                          _64 = __tco__64;
	                          acc = __tco_acc;
	                          continue tco;
	                      };
	                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ _64.constructor.name, acc.constructor.name ]);
	                  };
	              };
	          };
	          return reverse(go(lst)(Nil.value));
	      };
	  });
	  var fromList = function (__dict_Unfoldable_15) {
	      return toUnfoldable(__dict_Unfoldable_15);
	  };
	  var fromFoldable = function (__dict_Foldable_16) {
	      return Data_Foldable.foldr(__dict_Foldable_16)(Cons.create)(Nil.value);
	  };
	  var toList = function (__dict_Foldable_17) {
	      return fromFoldable(__dict_Foldable_17);
	  };
	  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_18) {
	      return function (f) {
	          return Data_Foldable.foldl(foldableList)(function (acc) {
	              return function (_318) {
	                  return Prelude.append(__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(acc)(f(_318));
	              };
	          })(Data_Monoid.mempty(__dict_Monoid_18));
	      };
	  }, (function () {
	      var go = function (__copy_o) {
	          return function (__copy_b) {
	              return function (__copy__66) {
	                  var o = __copy_o;
	                  var b = __copy_b;
	                  var _66 = __copy__66;
	                  tco: while (true) {
	                      var b_1 = b;
	                      if (_66 instanceof Nil) {
	                          return b_1;
	                      };
	                      if (_66 instanceof Cons) {
	                          var __tco_o = o;
	                          var __tco_b = o(b)(_66.value0);
	                          var __tco__66 = _66.value1;
	                          o = __tco_o;
	                          b = __tco_b;
	                          _66 = __tco__66;
	                          continue tco;
	                      };
	                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
	                  };
	              };
	          };
	      };
	      return go;
	  })(), function (o) {
	      return function (b) {
	          return function (_65) {
	              if (_65 instanceof Nil) {
	                  return b;
	              };
	              if (_65 instanceof Cons) {
	                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
	              };
	              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
	          };
	      };
	  });
	  var findIndex = function (fn) {
	      var go = function (__copy_n) {
	          return function (__copy__40) {
	              var n = __copy_n;
	              var _40 = __copy__40;
	              tco: while (true) {
	                  if (_40 instanceof Cons) {
	                      if (fn(_40.value0)) {
	                          return new Data_Maybe.Just(n);
	                      };
	                      if (Prelude.otherwise) {
	                          var __tco_n = n + 1 | 0;
	                          var __tco__40 = _40.value1;
	                          n = __tco_n;
	                          _40 = __tco__40;
	                          continue tco;
	                      };
	                  };
	                  if (_40 instanceof Nil) {
	                      return Data_Maybe.Nothing.value;
	                  };
	                  throw new Error("Failed pattern match at Data.List line 301, column 1 - line 302, column 1: " + [ n.constructor.name, _40.constructor.name ]);
	              };
	          };
	      };
	      return go(0);
	  };
	  var concatMap = function (f) {
	      return function (_28) {
	          if (_28 instanceof Nil) {
	              return Nil.value;
	          };
	          if (_28 instanceof Cons) {
	              return Prelude["<>"](semigroupList)(f(_28.value0))(concatMap(f)(_28.value1));
	          };
	          throw new Error("Failed pattern match: " + [ f.constructor.name, _28.constructor.name ]);
	      };
	  };
	  exports["Nil"] = Nil;
	  exports["Cons"] = Cons;
	  exports["fromList"] = fromList;
	  exports["toList"] = toList;
	  exports["take"] = take;
	  exports["concatMap"] = concatMap;
	  exports["reverse"] = reverse;
	  exports["findIndex"] = findIndex;
	  exports["index"] = index;
	  exports["uncons"] = uncons;
	  exports["tail"] = tail;
	  exports["head"] = head;
	  exports[":"] = $colon;
	  exports["null"] = $$null;
	  exports["fromFoldable"] = fromFoldable;
	  exports["toUnfoldable"] = toUnfoldable;
	  exports["semigroupList"] = semigroupList;
	  exports["functorList"] = functorList;
	  exports["foldableList"] = foldableList;;
	 
	})(PS["Data.List"] = PS["Data.List"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var min = function (__dict_Ord_9) {
	      return function (x) {
	          return function (y) {
	              var _19 = Prelude.compare(__dict_Ord_9)(x)(y);
	              if (_19 instanceof Prelude.LT) {
	                  return x;
	              };
	              if (_19 instanceof Prelude.EQ) {
	                  return x;
	              };
	              if (_19 instanceof Prelude.GT) {
	                  return y;
	              };
	              throw new Error("Failed pattern match at Data.Ord line 58, column 1 - line 59, column 1: " + [ _19.constructor.name ]);
	          };
	      };
	  };
	  var max = function (__dict_Ord_11) {
	      return function (x) {
	          return function (y) {
	              var _22 = Prelude.compare(__dict_Ord_11)(x)(y);
	              if (_22 instanceof Prelude.LT) {
	                  return y;
	              };
	              if (_22 instanceof Prelude.EQ) {
	                  return x;
	              };
	              if (_22 instanceof Prelude.GT) {
	                  return x;
	              };
	              throw new Error("Failed pattern match at Data.Ord line 67, column 1 - line 68, column 1: " + [ _22.constructor.name ]);
	          };
	      };
	  };
	  exports["max"] = max;
	  exports["min"] = min;;
	 
	})(PS["Data.Ord"] = PS["Data.Ord"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  exports._copyEff = function (m) {
	    return function () {
	      var r = {};
	      for (var k in m) {
	        if (m.hasOwnProperty(k)) {
	          r[k] = m[k];
	        }
	      }
	      return r;
	    };
	  };

	  exports.empty = {};

	  exports.runST = function (f) {
	    return f;
	  };

	  // jshint maxparams: 1
	  exports._foldM = function (bind) {
	    return function (f) {
	      return function (mz) {
	        return function (m) {
	          function g (k) {
	            return function (z) {
	              return f(z)(k)(m[k]);
	            };
	          }
	          for (var k in m) {
	            if (m.hasOwnProperty(k)) {
	              mz = bind(mz)(g(k));
	            }
	          }
	          return mz;
	        };
	      };
	    };
	  };

	  // jshint maxparams: 4
	  exports._lookup = function (no, yes, k, m) {
	    return k in m ? yes(m[k]) : no;
	  };

	  function _collect (f) {
	    return function (m) {
	      var r = [];
	      for (var k in m) {
	        if (m.hasOwnProperty(k)) {
	          r.push(f(k)(m[k]));
	        }
	      }
	      return r;
	    };
	  }

	  exports._collect = _collect;

	  exports.keys = Object.keys || _collect(function (k) {
	    return function () { return k; };
	  });
	 
	})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
	(function(exports) {
	  /* global exports */
	  "use strict";

	  // module Data.StrMap.ST

	  exports["new"] = function () {
	    return {};
	  };

	  exports.poke = function (m) {
	    return function (k) {
	      return function (v) {
	        return function () {
	          m[k] = v;
	          return m;
	        };
	      };
	    };
	  };
	 
	})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.StrMap.ST"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_ST = PS["Control.Monad.ST"];
	  var Data_Maybe = PS["Data.Maybe"];
	  exports["poke"] = $foreign.poke;
	  exports["new"] = $foreign["new"];;
	 
	})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Data.StrMap"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_List = PS["Data.List"];
	  var Control_Monad_ST = PS["Control.Monad.ST"];
	  var Data_StrMap_ST = PS["Data.StrMap.ST"];     
	  var values = function (_26) {
	      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(function (_9) {
	          return function (v) {
	              return v;
	          };
	      })(_26));
	  };
	  var toList = function (_27) {
	      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)(_27));
	  };
	  var thawST = $foreign._copyEff;
	  var pureST = function (f) {
	      return Control_Monad_Eff.runPure($foreign.runST(f));
	  };
	  var mutate = function (f) {
	      return function (m) {
	          return pureST(function __do() {
	              var _0 = thawST(m)();
	              f(_0)();
	              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_0)();
	          });
	      };
	  };
	  var member = Data_Function.runFn4($foreign._lookup)(false)(Prelude["const"](true));
	  var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
	  var insert = function (k) {
	      return function (v) {
	          return mutate(function (s) {
	              return Data_StrMap_ST.poke(s)(k)(v);
	          });
	      };
	  };                                                          
	  var fromFoldable = function (__dict_Foldable_4) {
	      return function (l) {
	          return pureST(function __do() {
	              var _2 = Data_StrMap_ST["new"]();
	              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(__dict_Foldable_4)(l)(function (_7) {
	                  return Data_StrMap_ST.poke(_2)(_7.value0)(_7.value1);
	              })();
	              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_2)();
	          });
	      };
	  };
	  var fromList = fromFoldable(Data_List.foldableList);
	  var foldM = function (__dict_Monad_5) {
	      return function (f) {
	          return function (z) {
	              return $foreign._foldM(Prelude[">>="](__dict_Monad_5["__superclass_Prelude.Bind_1"]()))(f)(Prelude.pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]())(z));
	          };
	      };
	  };
	  exports["thawST"] = thawST;
	  exports["foldM"] = foldM;
	  exports["values"] = values;
	  exports["member"] = member;
	  exports["fromList"] = fromList;
	  exports["fromFoldable"] = fromFoldable;
	  exports["toList"] = toList;
	  exports["lookup"] = lookup;
	  exports["insert"] = insert;
	  exports["keys"] = $foreign.keys;
	  exports["empty"] = $foreign.empty;;
	 
	})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
	(function(exports) {
	  /* globals exports */
	  "use strict";

	  exports.readFloat = parseFloat;                 
	 
	})(PS["Global"] = PS["Global"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Global"];
	  exports["readFloat"] = $foreign.readFloat;;
	 
	})(PS["Global"] = PS["Global"] || {});
	(function(exports) {
	  // module KeyValueStorage


	  exports._getItemFromStorage = function(key){
	      return function(reject){
	          return function(resolve){
	              return function(){
	                  if(chrome && chrome.storage && chrome.storage.local){
	                      chrome.storage.local.get(key, function(value){
	                          resolve(value)();
	                      });
	                  }else if(localStorage && localStorage.getItem){
	                      var value = window.localStorage.getItem(key);
	                      resolve(value)();
	                  }else{
	                      reject(new Error())();
	                  }
	              }
	          }
	      }
	  }


	  exports._setItemFromStorage = function(key){
	      return function(value){
	          return function(reject){
	              return function(resolve){
	                  return function(){
	                      if(chrome && chrome.storage && chrome.storage.local){
	                          chrome.storage.local.set({ key: value }, function(){
	                              if(chrome.runtime.lastError){
	                                  reject(chrome.runtime.lastError)();
	                              }else{
	                                  resolve({})();
	                              }
	                          });
	                      }else if(localStorage && localStorage.setItem){
	                          window.localStorage.setItem(key, value);
	                          resolve({})();
	                      }else{
	                          reject(new Error())();
	                      }
	                  }
	              }
	          }
	      }
	  }
	})(PS["KeyValueStorage"] = PS["KeyValueStorage"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["KeyValueStorage"];
	  var Prelude = PS["Prelude"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
	  var DOM = PS["DOM"];     
	  var setItemFromStorage = function (key) {
	      return function (value) {
	          return Control_Monad_Aff.makeAff($foreign._setItemFromStorage(key)(value));
	      };
	  };
	  var getItemFromStorage = function (key) {
	      return Control_Monad_Aff.makeAff($foreign._getItemFromStorage(key));
	  };
	  exports["setItemFromStorage"] = setItemFromStorage;
	  exports["getItemFromStorage"] = getItemFromStorage;;
	 
	})(PS["KeyValueStorage"] = PS["KeyValueStorage"] || {});
	(function(exports) {
	  // module Sound.AudioGraph.Core

	  var audioContext = new AudioContext();
	  var audioGraph = null;

	  exports._readFromAudioGraph = function(){
	      if( ! audioGraph){
	          audioGraph = {
	              rnodes: [],
	              graph: []
	          };

	      };
	      return audioGraph;
	  }

	  exports._writeToAudioGraph = function(value){
	      return function(){
	          audioGraph = value;
	      }
	  }


	  exports.getAudioGraphContext = function(){
	      return audioContext
	  }
	})(PS["Sound.AudioGraph.Core"] = PS["Sound.AudioGraph.Core"] || {});
	(function(exports) {
	    

	  exports.getAudioContextSampleRate = function(context){
	      return function(){
	          return context.sampleRate;
	      }
	  }

	  exports.decodeAudioData = function(arrayBuffer){
	      return function(context){
	          return function(reject){
	              return function(resolve){
	                  return function(){
	                      console.log("[webaudio] decodedAudioData decoding ");
	                      return context.decodeAudioData(arrayBuffer, function(audioBuffer){
	                          console.log("[webaudio] decodedAudioData successed ");
	                          resolve(audioBuffer)();
	                      }, function(e){
	                          console.log("[webaudio] decodedAudioData failed ");                        
	                          reject(e)();
	                      });
	                  }
	              }
	          }
	      }
	  }

	  exports.getDestinationNode = function(context){
	      return function(){
	          console.log("[webaudio] getDestinationNode ");
	          return context.destination;
	      }
	  };


	  ////////////////////////////////////////////////////////////////////////////////////////////////////////



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  exports.connect = function(from){
	      return function(to){
	          return function(outputIndex){
	              return function(inputIndex){
	                  return function(){
	                      from.connect(to, outputIndex, inputIndex);
	                      console.log("[webaudio] connect " + from + "[" + outputIndex +  "] - " + to + "[" + inputIndex + "]");
	                  }
	              }
	          }
	      }
	  }

	  exports.disconnect = function(from){
	      return function(to){
	          return function(outputIndex){
	              return function(inputIndex){
	                  return function(){
	                      from.disconnect(to, outputIndex, inputIndex);
	                      console.log("[webaudio] disconnect " + from + "[" + outputIndex +  "] - " + to + "[" + inputIndex + "]");
	                  }
	              }
	          }
	      }
	  }


	  exports.currentTime = function(context){
	      return function(){
	          return context.currentTime;
	      }
	  }



	  exports.getChannelData = function(index){
	      return function(audioBuffer){
	          return audioBuffer.getChannelData(index);
	      }
	  }



	  exports.audioBufferLength = function(audioBuffer){
	      return audioBuffer.length;
	  }

	  exports.sampleRate = function(audioBuffer){
	      return audioBuffer.sampleRate;
	  }











	  exports.createOfflineAudioContext = function(numberOfChannels){
	      return function(length){
	          return function(sampleRate){
	              return function(){
	                  return new OfflineAudioContext(numberOfChannels, length, sampleRate);
	              }
	          }
	      }
	  }

	  exports._startRendering = function(context){
	      return function(reject){
	          return function(resolve){
	              return function(){
	                  context.oncomplete = function(e){

	                      var chan = e.renderedBuffer.getChannelData(0);

	                      resolve(e.renderedBuffer)();
	                  }
	                  context.onerror = function(e){
	                      reject(e)();
	                  }
	                  context.startRendering();
	              }
	          }
	      }
	  }
	})(PS["WebAudio.Core"] = PS["WebAudio.Core"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Core"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var AudioTime = function (x) {
	      return x;
	  };
	  var ConstantValue = (function () {
	      function ConstantValue(value0) {
	          this.value0 = value0;
	      };
	      ConstantValue.create = function (value0) {
	          return new ConstantValue(value0);
	      };
	      return ConstantValue;
	  })();
	  var SetValueAtTime = (function () {
	      function SetValueAtTime(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      SetValueAtTime.create = function (value0) {
	          return function (value1) {
	              return new SetValueAtTime(value0, value1);
	          };
	      };
	      return SetValueAtTime;
	  })();
	  var LinearRampToValueAtTime = (function () {
	      function LinearRampToValueAtTime(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      LinearRampToValueAtTime.create = function (value0) {
	          return function (value1) {
	              return new LinearRampToValueAtTime(value0, value1);
	          };
	      };
	      return LinearRampToValueAtTime;
	  })();
	  var ExponentialRampToValueAtTime = (function () {
	      function ExponentialRampToValueAtTime(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      ExponentialRampToValueAtTime.create = function (value0) {
	          return function (value1) {
	              return new ExponentialRampToValueAtTime(value0, value1);
	          };
	      };
	      return ExponentialRampToValueAtTime;
	  })();
	  var SetTargetAtTime = (function () {
	      function SetTargetAtTime(value0, value1, value2) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	      };
	      SetTargetAtTime.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return new SetTargetAtTime(value0, value1, value2);
	              };
	          };
	      };
	      return SetTargetAtTime;
	  })();
	  var SetValueCurveAtTime = (function () {
	      function SetValueCurveAtTime(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      SetValueCurveAtTime.create = function (value0) {
	          return function (value1) {
	              return new SetValueCurveAtTime(value0, value1);
	          };
	      };
	      return SetValueCurveAtTime;
	  })();
	  var startRendering = function (context) {
	      return Control_Monad_Aff.makeAff($foreign._startRendering(context));
	  };
	  var offlineAudioContextToAudioContext = Unsafe_Coerce.unsafeCoerce;
	  var isForeign_AudioTime = new Data_Foreign_Class.IsForeign(function (value) {
	      return Prelude.bind(Data_Either.bindEither)(Data_Foreign.readNumber(value))(function (_0) {
	          return Prelude.pure(Data_Either.applicativeEither)(_0);
	      });
	  });
	  var isForeign_AudioParam = new Data_Foreign_Class.IsForeign(function (f) {
	      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("type")(f))(function (_13) {
	          if (_13 === "ConstantValue") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_1) {
	                  return Prelude.pure(Data_Either.applicativeEither)(new ConstantValue(_1));
	              });
	          };
	          if (_13 === "SetValueAtTime") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_3) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(isForeign_AudioTime)(Data_Foreign_Index.indexString)("time")(f))(function (_2) {
	                      return Prelude.pure(Data_Either.applicativeEither)(new SetValueAtTime(_3, _2));
	                  });
	              });
	          };
	          if (_13 === "LinearRampToValueAtTime") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_5) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(isForeign_AudioTime)(Data_Foreign_Index.indexString)("time")(f))(function (_4) {
	                      return Prelude.pure(Data_Either.applicativeEither)(new LinearRampToValueAtTime(_5, _4));
	                  });
	              });
	          };
	          if (_13 === "ExponentialRampToValueAtTime") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_7) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(isForeign_AudioTime)(Data_Foreign_Index.indexString)("time")(f))(function (_6) {
	                      return Prelude.pure(Data_Either.applicativeEither)(new ExponentialRampToValueAtTime(_7, _6));
	                  });
	              });
	          };
	          if (_13 === "SetTargetAtTime") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_10) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(isForeign_AudioTime)(Data_Foreign_Index.indexString)("time")(f))(function (_9) {
	                      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("constant")(f))(function (_8) {
	                          return Prelude.pure(Data_Either.applicativeEither)(new SetTargetAtTime(_10, _9, _8));
	                      });
	                  });
	              });
	          };
	          if (_13 === "SetValueCurveAtTime") {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("value")(f))(function (_12) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(isForeign_AudioTime)(Data_Foreign_Index.indexString)("time")(f))(function (_11) {
	                      return Prelude.pure(Data_Either.applicativeEither)(new SetValueCurveAtTime(_12, _11));
	                  });
	              });
	          };
	          return new Data_Either.Left(new Data_Foreign.JSONError("Unknown AudioParam type: " + _13));
	      });
	  });
	  var readAudioParams = function (f) {
	      return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.readArray(f))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Foreign_Class.read(isForeign_AudioParam)));
	  }; 
	  var decodeAudioFile = function (buffer) {
	      return function (context) {
	          return Control_Monad_Aff.makeAff($foreign.decodeAudioData(buffer)(context));
	      };
	  };
	  var audioParamToForeign = function (value) {
	      if (value instanceof ConstantValue) {
	          return Data_Foreign.toForeign({
	              type: "ConstantValue", 
	              value: value.value0
	          });
	      };
	      if (value instanceof SetValueAtTime) {
	          return Data_Foreign.toForeign({
	              type: "SetValueAtTime", 
	              value: value.value0, 
	              time: value.value1
	          });
	      };
	      if (value instanceof LinearRampToValueAtTime) {
	          return Data_Foreign.toForeign({
	              type: "LinearRampToValueAtTime", 
	              value: value.value0, 
	              time: value.value1
	          });
	      };
	      if (value instanceof ExponentialRampToValueAtTime) {
	          return Data_Foreign.toForeign({
	              type: "ExponentialRampToValueAtTime", 
	              value: value.value0, 
	              time: value.value1
	          });
	      };
	      if (value instanceof SetTargetAtTime) {
	          return Data_Foreign.toForeign({
	              type: "SetTargetAtTime", 
	              value: value.value0, 
	              time: value.value1, 
	              constant: value.value2
	          });
	      };
	      if (value instanceof SetValueCurveAtTime) {
	          return Data_Foreign.toForeign({
	              type: "SetValueCurveAtTime", 
	              value: value.value0, 
	              time: value.value1
	          });
	      };
	      throw new Error("Failed pattern match at WebAudio.Core line 104, column 1 - line 105, column 1: " + [ value.constructor.name ]);
	  };
	  var audioParamsToForeign = function (value) {
	      return Data_Foreign.toForeign(Prelude.map(Prelude.functorArray)(audioParamToForeign)(value));
	  };
	  exports["ConstantValue"] = ConstantValue;
	  exports["SetValueAtTime"] = SetValueAtTime;
	  exports["LinearRampToValueAtTime"] = LinearRampToValueAtTime;
	  exports["ExponentialRampToValueAtTime"] = ExponentialRampToValueAtTime;
	  exports["SetTargetAtTime"] = SetTargetAtTime;
	  exports["SetValueCurveAtTime"] = SetValueCurveAtTime;
	  exports["AudioTime"] = AudioTime;
	  exports["startRendering"] = startRendering;
	  exports["offlineAudioContextToAudioContext"] = offlineAudioContextToAudioContext;
	  exports["audioParamToForeign"] = audioParamToForeign;
	  exports["audioParamsToForeign"] = audioParamsToForeign;
	  exports["readAudioParams"] = readAudioParams;
	  exports["decodeAudioFile"] = decodeAudioFile;
	  exports["isForeign_AudioTime"] = isForeign_AudioTime;
	  exports["isForeign_AudioParam"] = isForeign_AudioParam;
	  exports["createOfflineAudioContext"] = $foreign.createOfflineAudioContext;
	  exports["audioBufferLength"] = $foreign.audioBufferLength;
	  exports["currentTime"] = $foreign.currentTime;
	  exports["getDestinationNode"] = $foreign.getDestinationNode;
	  exports["getAudioContextSampleRate"] = $foreign.getAudioContextSampleRate;
	  exports["disconnect"] = $foreign.disconnect;
	  exports["connect"] = $foreign.connect;;
	 
	})(PS["WebAudio.Core"] = PS["WebAudio.Core"] || {});
	(function(exports) {
	  // module WebAudio.Gain

	  exports.createGain = function(context){
	      return function(){
	          console.log("[webaudio] createGain");
	          return context.createGain();
	      }
	  };


	  exports._setGain = function(value){
	      return function(gain){
	          return function(){
	              gain.gain.value = value;
	          }
	      }
	  }


	  exports.getGainAudioParam = function(gain){
	      return function(){
	          return gain.gain;
	      }
	  }

	  exports.linearRampToValueAtTime = function(value){
	      return function(time){
	          return function(gain){
	              return function(){
	                  gain.linearRampToValueAtTime(value, time);
	              }
	          }
	      }
	  }

	  exports.exponentialRampToValueAtTime = function(value){
	      return function(time){
	          return function(param){
	              return function(){
	                  param.exponentialRampToValueAtTime(value, time);
	              }
	          }
	      }
	  }


	  exports.setTargetAtTime = function(value){
	      return function(time){
	          return function(timeConstant){
	              return function(param){
	                  return function(){
	                      param.setTargetAtTime(value, time, timeConstant);
	                  }
	              }
	          }
	      }
	  }
	})(PS["WebAudio.Gain"] = PS["WebAudio.Gain"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Gain"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var writeGainParams = function (props) {
	      return Data_Foreign.toForeign({
	          gain: WebAudio_Core.audioParamsToForeign(props.gain)
	      });
	  };
	  var setGain = function (ps) {
	      return function (gain) {
	          var __setGain = function (_4) {
	              if (_4 instanceof WebAudio_Core.ConstantValue) {
	                  return $foreign._setGain(_4.value0)(gain);
	              };
	              if (_4 instanceof WebAudio_Core.LinearRampToValueAtTime) {
	                  return function __do() {
	                      var _0 = $foreign.getGainAudioParam(gain)();
	                      return $foreign.linearRampToValueAtTime(_4.value0)(_4.value1)(_0)();
	                  };
	              };
	              if (_4 instanceof WebAudio_Core.ExponentialRampToValueAtTime) {
	                  return function __do() {
	                      var _1 = $foreign.getGainAudioParam(gain)();
	                      return $foreign.exponentialRampToValueAtTime(_4.value0)(_4.value1)(_1)();
	                  };
	              };
	              if (_4 instanceof WebAudio_Core.SetTargetAtTime) {
	                  return function __do() {
	                      var _2 = $foreign.getGainAudioParam(gain)();
	                      return $foreign.setTargetAtTime(_4.value0)(_4.value1)(_4.value2)(_2)();
	                  };
	              };
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	          };
	          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(ps)(__setGain);
	      };
	  };
	  var readGainParams = function (value) {
	      return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("gain")(value))(WebAudio_Core.readAudioParams))(function (_3) {
	          return Prelude.pure(Data_Either.applicativeEither)({
	              gain: _3
	          });
	      });
	  };
	  var gainToAudioNode = Unsafe_Coerce.unsafeCoerce;
	  exports["readGainParams"] = readGainParams;
	  exports["writeGainParams"] = writeGainParams;
	  exports["gainToAudioNode"] = gainToAudioNode;
	  exports["setGain"] = setGain;
	  exports["createGain"] = $foreign.createGain;;
	 
	})(PS["WebAudio.Gain"] = PS["WebAudio.Gain"] || {});
	(function(exports) {
	  // module WebAudio.Delay

	  exports.createDelay = function(context){
	      return function(){
	          console.log("[webaudio] createDelay");
	          return context.createDelay();
	      }
	  };


	  exports._setDelayTime = function(value){
	      return function(delay){
	          return function(){
	              delay.delayTime.value = value;
	          }
	      }
	  }
	 
	})(PS["WebAudio.Delay"] = PS["WebAudio.Delay"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Delay"];
	  var Prelude = PS["Prelude"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var writeDelayParams = function (props) {
	      return Data_Foreign.toForeign({
	          delayTime: WebAudio_Core.audioParamsToForeign(props.delayTime)
	      });
	  };
	  var setDelayTime = function (ps) {
	      return function (delay) {
	          var __setDelay = function (_1) {
	              if (_1 instanceof WebAudio_Core.ConstantValue) {
	                  return $foreign._setDelayTime(_1.value0)(delay);
	              };
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	          };
	          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(ps)(__setDelay);
	      };
	  };
	  var readDelayParams = function (value) {
	      return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("delayTime")(value))(WebAudio_Core.readAudioParams))(function (_0) {
	          return Prelude.pure(Data_Either.applicativeEither)({
	              delayTime: _0
	          });
	      });
	  };
	  exports["writeDelayParams"] = writeDelayParams;
	  exports["readDelayParams"] = readDelayParams;
	  exports["setDelayTime"] = setDelayTime;
	  exports["createDelay"] = $foreign.createDelay;;
	 
	})(PS["WebAudio.Delay"] = PS["WebAudio.Delay"] || {});
	(function(exports) {
	  // module WebAudio.AudioBufferSource


	  exports.createBufferSource = function(audioBuffer){
	      return function(context){
	          return function(){
	              console.log("[webaudio] createBufferSource ");
	              var source = context.createBufferSource(audioBuffer);
	              source.buffer = audioBuffer;
	              return source;
	          }
	      }
	  };

	  exports.startAudioBufferSource = function(when){
	      return function(offset){
	          return function(duration){
	              return function(source){
	                  return function(){
	                      if(when != null && offset != null && duration != null){
	                          source.start(when, offset, source);
	                      }else if(when != null && offset != null){
	                          source.start(when, offset);
	                      }else if(when != null){
	                          source.start(when);
	                      }else{
	                          source.start();
	                      }
	                  }
	              }
	          }
	      }
	  }


	  exports.detune = function(value){
	      return function(source){
	          return function(){
	              source.detune.value = value;
	          }
	      }
	  }
	})(PS["WebAudio.AudioBufferSource"] = PS["WebAudio.AudioBufferSource"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.AudioBufferSource"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];     
	  var audioBufferSourceToAudioNode = Unsafe_Coerce.unsafeCoerce;
	  exports["audioBufferSourceToAudioNode"] = audioBufferSourceToAudioNode;
	  exports["detune"] = $foreign.detune;
	  exports["startAudioBufferSource"] = $foreign.startAudioBufferSource;
	  exports["createBufferSource"] = $foreign.createBufferSource;;
	 
	})(PS["WebAudio.AudioBufferSource"] = PS["WebAudio.AudioBufferSource"] || {});
	(function(exports) {
	  // module WebAudio.BiquadFilter


	  exports.createBiquadFilter = function(context){
	      return function(){
	          return context.createBiquadFilter();
	      }
	  }

	  exports.biquadFilterToAudioNode = function(biquadFilter){
	      return biquadFilter;
	  }

	  exports._setBiquadFilterType= function(value){
	      return function(filter){
	          return function(){
	              filter.type = value;
	          }
	      }
	  }
	})(PS["WebAudio.BiquadFilter"] = PS["WebAudio.BiquadFilter"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.BiquadFilter"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var Lowpass = (function () {
	      function Lowpass() {

	      };
	      Lowpass.value = new Lowpass();
	      return Lowpass;
	  })();
	  var Highpass = (function () {
	      function Highpass() {

	      };
	      Highpass.value = new Highpass();
	      return Highpass;
	  })();
	  var Bandpass = (function () {
	      function Bandpass() {

	      };
	      Bandpass.value = new Bandpass();
	      return Bandpass;
	  })();
	  var Lowshelf = (function () {
	      function Lowshelf() {

	      };
	      Lowshelf.value = new Lowshelf();
	      return Lowshelf;
	  })();
	  var Highshelf = (function () {
	      function Highshelf() {

	      };
	      Highshelf.value = new Highshelf();
	      return Highshelf;
	  })();
	  var Peaking = (function () {
	      function Peaking() {

	      };
	      Peaking.value = new Peaking();
	      return Peaking;
	  })();
	  var Notch = (function () {
	      function Notch() {

	      };
	      Notch.value = new Notch();
	      return Notch;
	  })();
	  var Allpass = (function () {
	      function Allpass() {

	      };
	      Allpass.value = new Allpass();
	      return Allpass;
	  })();
	  var show_BiquadFilterType = new Prelude.Show(function (_6) {
	      if (_6 instanceof Lowpass) {
	          return "lowpass";
	      };
	      if (_6 instanceof Highpass) {
	          return "highpass";
	      };
	      if (_6 instanceof Bandpass) {
	          return "bandpass";
	      };
	      if (_6 instanceof Lowshelf) {
	          return "lowshelf";
	      };
	      if (_6 instanceof Highshelf) {
	          return "highshelf";
	      };
	      if (_6 instanceof Peaking) {
	          return "peaking";
	      };
	      if (_6 instanceof Notch) {
	          return "notch";
	      };
	      if (_6 instanceof Allpass) {
	          return "allpass";
	      };
	      throw new Error("Failed pattern match at WebAudio.BiquadFilter line 41, column 1 - line 51, column 1: " + [ _6.constructor.name ]);
	  });
	  var setBiquadFilterType = function (t) {
	      return function (filter) {
	          return $foreign._setBiquadFilterType(Prelude.show(show_BiquadFilterType)(t))(filter);
	      };
	  };
	  var readBiquadFilterType = function (name) {
	      if (name === "lowpass") {
	          return new Data_Either.Right(Lowpass.value);
	      };
	      if (name === "highpass") {
	          return new Data_Either.Right(Highpass.value);
	      };
	      if (name === "bandpass") {
	          return new Data_Either.Right(Bandpass.value);
	      };
	      if (name === "lowshelf") {
	          return new Data_Either.Right(Lowshelf.value);
	      };
	      if (name === "highshelf") {
	          return new Data_Either.Right(Highshelf.value);
	      };
	      if (name === "peaking") {
	          return new Data_Either.Right(Peaking.value);
	      };
	      if (name === "notch") {
	          return new Data_Either.Right(Notch.value);
	      };
	      if (name === "allpass") {
	          return new Data_Either.Right(Allpass.value);
	      };
	      return Data_Either.Left.create(new Data_Foreign.JSONError(name));
	  };
	  var isForeign_BiquadFilterType = new Data_Foreign_Class.IsForeign(function (value) {
	      return Prelude.bind(Data_Either.bindEither)(Data_Foreign.readString(value))(function (_5) {
	          return readBiquadFilterType(_5);
	      });
	  });
	  var foreignToBiquadFilterParams = function (props) {
	      return Prelude["<*>"](Data_Either.applyEither)(Prelude["<*>"](Data_Either.applyEither)(Prelude["<*>"](Data_Either.applyEither)(Prelude["<*>"](Data_Either.applyEither)(Prelude["<$>"](Data_Either.functorEither)(function (_0) {
	          return function (_1) {
	              return function (_2) {
	                  return function (_3) {
	                      return function (_4) {
	                          return {
	                              type: _0, 
	                              frequency: _1, 
	                              detune: _2, 
	                              q: _3, 
	                              gain: _4
	                          };
	                      };
	                  };
	              };
	          };
	      })(Data_Foreign_Class.readProp(isForeign_BiquadFilterType)(Data_Foreign_Index.indexString)("type")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("frequency")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("detune")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("q")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("gain")(props));
	  };
	  var eq_BiquadFilterType = new Prelude.Eq(function (x) {
	      return function (y) {
	          return Prelude["=="](Prelude.eqString)(Prelude.show(show_BiquadFilterType)(x))(Prelude.show(show_BiquadFilterType)(y));
	      };
	  });
	  var enumBiquadFilterType = [ Lowpass.value, Highpass.value, Bandpass.value, Lowshelf.value, Highshelf.value, Peaking.value, Notch.value, Allpass.value ];
	  var biquadFilterParamsToForeign = function (props) {
	      return Data_Foreign.toForeign({
	          type: Prelude.show(show_BiquadFilterType)(props.type), 
	          frequency: props.frequency, 
	          detune: props.detune, 
	          q: props.q, 
	          gain: props.gain
	      });
	  };
	  exports["Lowpass"] = Lowpass;
	  exports["Highpass"] = Highpass;
	  exports["Bandpass"] = Bandpass;
	  exports["Lowshelf"] = Lowshelf;
	  exports["Highshelf"] = Highshelf;
	  exports["Peaking"] = Peaking;
	  exports["Notch"] = Notch;
	  exports["Allpass"] = Allpass;
	  exports["foreignToBiquadFilterParams"] = foreignToBiquadFilterParams;
	  exports["biquadFilterParamsToForeign"] = biquadFilterParamsToForeign;
	  exports["enumBiquadFilterType"] = enumBiquadFilterType;
	  exports["readBiquadFilterType"] = readBiquadFilterType;
	  exports["setBiquadFilterType"] = setBiquadFilterType;
	  exports["isForeign_BiquadFilterType"] = isForeign_BiquadFilterType;
	  exports["show_BiquadFilterType"] = show_BiquadFilterType;
	  exports["eq_BiquadFilterType"] = eq_BiquadFilterType;
	  exports["biquadFilterToAudioNode"] = $foreign.biquadFilterToAudioNode;
	  exports["createBiquadFilter"] = $foreign.createBiquadFilter;;
	 
	})(PS["WebAudio.BiquadFilter"] = PS["WebAudio.BiquadFilter"] || {});
	(function(exports) {
	  // module WebAudio.MediaElementSource


	  exports.createMediaElementSource = function(element){
	      return function(context){
	          return function(){
	              // **workwround**
	              // In Chrome, `createMediaElementSource` causes an error when call it multiple times for same element:
	              //
	              //     Error: Failed to execute 'createMediaElementSource' on 'AudioContext': HTMLMediaElement already connected previously to a different MediaElementSourceNode.
	              //
	              // For workwround, save insntace in it's property and reuse it.
	              if(element["PS.WebAudio.createMediaElementSource"]){
	                  return element["PS.WebAudio.createMediaElementSource"];
	              }else{
	                  var mediaElementSource = context.createMediaElementSource(element);
	                  element["PS.WebAudio.createMediaElementSource"] = mediaElementSource;
	                  return mediaElementSource;
	              }
	          }
	      }
	  }

	  exports.mediaElementSourceToAudioNode = function(node){
	      return node;
	  }
	 
	})(PS["WebAudio.MediaElementSource"] = PS["WebAudio.MediaElementSource"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.MediaElementSource"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  exports["mediaElementSourceToAudioNode"] = $foreign.mediaElementSourceToAudioNode;
	  exports["createMediaElementSource"] = $foreign.createMediaElementSource;;
	 
	})(PS["WebAudio.MediaElementSource"] = PS["WebAudio.MediaElementSource"] || {});
	(function(exports) {
	  // module WebAudio.StereoPanner

	  exports.createStereoPanner = function(context){
	      return function(){
	          console.log("[webaudio] createStereoPanner");
	          return context.createStereoPanner();
	      }
	  };


	  exports._setPan = function(value){
	      return function(panner){
	          return function(){
	              panner.pan.value = value;
	          }
	      }
	  }
	 
	})(PS["WebAudio.StereoPanner"] = PS["WebAudio.StereoPanner"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.StereoPanner"];
	  var Prelude = PS["Prelude"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var WebAudio_Core = PS["WebAudio.Core"];                 
	  var setPan = function (ps) {
	      return function (panner) {
	          var __setPan = function (_0) {
	              if (_0 instanceof WebAudio_Core.ConstantValue) {
	                  return $foreign._setPan(_0.value0)(panner);
	              };
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	          };
	          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(ps)(__setPan);
	      };
	  };
	  exports["setPan"] = setPan;
	  exports["createStereoPanner"] = $foreign.createStereoPanner;;
	 
	})(PS["WebAudio.StereoPanner"] = PS["WebAudio.StereoPanner"] || {});
	(function(exports) {
	  // module WebAudio.Convolver

	  exports.createConvolver = function(context){
	      return function(){
	          return context.createConvolver();
	      }
	  }

	  exports.setBuffer = function(buffer){
	      return function(convolver){
	          return function(){
	              if(convolver.buffer != buffer){
	                  convolver.buffer = buffer;
	              }
	          }
	      }
	  }
	})(PS["WebAudio.Convolver"] = PS["WebAudio.Convolver"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Convolver"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  exports["setBuffer"] = $foreign.setBuffer;
	  exports["createConvolver"] = $foreign.createConvolver;;
	 
	})(PS["WebAudio.Convolver"] = PS["WebAudio.Convolver"] || {});
	(function(exports) {
	  // module WebAudio.Splitter

	  exports.createChannelSplitter = function(context){
	      return function(){
	          console.log("[webaudio] createChannelSplitter");
	          return context.createChannelSplitter();
	      }
	  };
	 
	})(PS["WebAudio.Splitter"] = PS["WebAudio.Splitter"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Splitter"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var WebAudio_Core = PS["WebAudio.Core"];     
	  var channelSplitterToAudioNode = Unsafe_Coerce.unsafeCoerce;
	  exports["channelSplitterToAudioNode"] = channelSplitterToAudioNode;
	  exports["createChannelSplitter"] = $foreign.createChannelSplitter;;
	 
	})(PS["WebAudio.Splitter"] = PS["WebAudio.Splitter"] || {});
	(function(exports) {
	  // module WebAudio.Merger

	  exports.createChannelMerger = function(context){
	      return function(){
	          console.log("[webaudio] createChannelMerger");
	          return context.createChannelMerger();
	      }
	  };
	 
	})(PS["WebAudio.Merger"] = PS["WebAudio.Merger"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Merger"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var WebAudio_Core = PS["WebAudio.Core"];     
	  var channelMergerToAudioNode = Unsafe_Coerce.unsafeCoerce;
	  exports["channelMergerToAudioNode"] = channelMergerToAudioNode;
	  exports["createChannelMerger"] = $foreign.createChannelMerger;;
	 
	})(PS["WebAudio.Merger"] = PS["WebAudio.Merger"] || {});
	(function(exports) {
	  // module WebAudio.Compressor


	  exports.createDynamicsCompressor = function(context){
	      return function(){
	          return context.createDynamicsCompressor();
	      }
	  }
	 
	})(PS["WebAudio.Compressor"] = PS["WebAudio.Compressor"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Compressor"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var writeDynamicsCompressorParams = function (props) {
	      return Data_Foreign.toForeign(props);
	  };
	  var readDynamicsCompressorParams = function (value) {
	      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("threshold")(value))(function (_5) {
	          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("knee")(value))(function (_4) {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("ratio")(value))(function (_3) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("reduction")(value))(function (_2) {
	                      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("attack")(value))(function (_1) {
	                          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("release")(value))(function (_0) {
	                              return Prelude.pure(Data_Either.applicativeEither)({
	                                  threshold: _5, 
	                                  knee: _4, 
	                                  ratio: _3, 
	                                  reduction: _2, 
	                                  attack: _1, 
	                                  release: _0
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      });
	  };
	  var dynamicsCompressorToAudioNode = Unsafe_Coerce.unsafeCoerce;
	  exports["readDynamicsCompressorParams"] = readDynamicsCompressorParams;
	  exports["writeDynamicsCompressorParams"] = writeDynamicsCompressorParams;
	  exports["dynamicsCompressorToAudioNode"] = dynamicsCompressorToAudioNode;
	  exports["createDynamicsCompressor"] = $foreign.createDynamicsCompressor;;
	 
	})(PS["WebAudio.Compressor"] = PS["WebAudio.Compressor"] || {});
	(function(exports) {
	  // module WebAudio.Oscillator


	  exports.createOscillator = function(context){
	      return function(){
	          return context.createOscillator();
	      }
	  }

	  exports.startOscillator = function(when){
	      return function(offset){
	          return function(oscillator){
	              return function(){
	                  oscillator.start(when, offset);
	              }
	          }
	      }
	  }
	})(PS["WebAudio.Oscillator"] = PS["WebAudio.Oscillator"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Oscillator"];
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Bind = PS["Control.Bind"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];     
	  var Sine = (function () {
	      function Sine() {

	      };
	      Sine.value = new Sine();
	      return Sine;
	  })();
	  var Square = (function () {
	      function Square() {

	      };
	      Square.value = new Square();
	      return Square;
	  })();
	  var Sawtooth = (function () {
	      function Sawtooth() {

	      };
	      Sawtooth.value = new Sawtooth();
	      return Sawtooth;
	  })();
	  var Triangle = (function () {
	      function Triangle() {

	      };
	      Triangle.value = new Triangle();
	      return Triangle;
	  })();
	  var Custom = (function () {
	      function Custom() {

	      };
	      Custom.value = new Custom();
	      return Custom;
	  })();
	  var show_OscillatorType = new Prelude.Show(function (_3) {
	      if (_3 instanceof Sine) {
	          return "sine";
	      };
	      if (_3 instanceof Square) {
	          return "square";
	      };
	      if (_3 instanceof Sawtooth) {
	          return "sawtooth";
	      };
	      if (_3 instanceof Triangle) {
	          return "triangle";
	      };
	      if (_3 instanceof Custom) {
	          return "custom";
	      };
	      throw new Error("Failed pattern match at WebAudio.Oscillator line 33, column 1 - line 40, column 1: " + [ _3.constructor.name ]);
	  });
	  var readOscillatorType = function (name) {
	      if (name === "sine") {
	          return new Data_Either.Right(Sine.value);
	      };
	      if (name === "square") {
	          return new Data_Either.Right(Square.value);
	      };
	      if (name === "sawtooth") {
	          return new Data_Either.Right(Sawtooth.value);
	      };
	      if (name === "triangle") {
	          return new Data_Either.Right(Triangle.value);
	      };
	      if (name === "custom") {
	          return new Data_Either.Right(Custom.value);
	      };
	      return Data_Either.Left.create(new Data_Foreign.JSONError(name));
	  };
	  var oscillatorParamsToForeign = function (props) {
	      return Data_Foreign.toForeign({
	          type: Prelude.show(show_OscillatorType)(props.type), 
	          frequency: props.frequency, 
	          detune: props.detune
	      });
	  };
	  var isForeign_OscillatorType = new Data_Foreign_Class.IsForeign(Control_Bind[">=>"](Data_Either.bindEither)(Data_Foreign.readString)(readOscillatorType));
	  var initialOscillatorParams = {
	      type: Sine.value, 
	      frequency: 440.0, 
	      detune: 0.0
	  };
	  var foreignToOscillatorParams = function (props) {
	      return Prelude["<*>"](Data_Either.applyEither)(Prelude["<*>"](Data_Either.applyEither)(Prelude["<$>"](Data_Either.functorEither)(function (_0) {
	          return function (_1) {
	              return function (_2) {
	                  return {
	                      type: _0, 
	                      frequency: _1, 
	                      detune: _2
	                  };
	              };
	          };
	      })(Data_Foreign_Class.readProp(isForeign_OscillatorType)(Data_Foreign_Index.indexString)("type")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("frequency")(props)))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("detune")(props));
	  };
	  var eq_OscillatorType = new Prelude.Eq(function (x) {
	      return function (y) {
	          return Prelude["=="](Prelude.eqString)(Prelude.show(show_OscillatorType)(x))(Prelude.show(show_OscillatorType)(y));
	      };
	  });
	  var enumOscillatorType = [ Sine.value, Square.value, Sawtooth.value, Triangle.value, Custom.value ];
	  exports["Sine"] = Sine;
	  exports["Square"] = Square;
	  exports["Sawtooth"] = Sawtooth;
	  exports["Triangle"] = Triangle;
	  exports["Custom"] = Custom;
	  exports["foreignToOscillatorParams"] = foreignToOscillatorParams;
	  exports["oscillatorParamsToForeign"] = oscillatorParamsToForeign;
	  exports["enumOscillatorType"] = enumOscillatorType;
	  exports["readOscillatorType"] = readOscillatorType;
	  exports["initialOscillatorParams"] = initialOscillatorParams;
	  exports["show_OscillatorType"] = show_OscillatorType;
	  exports["eq_OscillatorType"] = eq_OscillatorType;
	  exports["isForeign_OscillatorType"] = isForeign_OscillatorType;
	  exports["startOscillator"] = $foreign.startOscillator;
	  exports["createOscillator"] = $foreign.createOscillator;;
	 
	})(PS["WebAudio.Oscillator"] = PS["WebAudio.Oscillator"] || {});
	(function(exports) {
	  // module WebAudio.Analyser

	  exports.createAnalyser = function(context){
	      return function(){
	          console.log("[webaudio] createAnalyser");
	          return context.createAnalyser();
	      }
	  };

	 
	})(PS["WebAudio.Analyser"] = PS["WebAudio.Analyser"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.Analyser"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  exports["createAnalyser"] = $foreign.createAnalyser;;
	 
	})(PS["WebAudio.Analyser"] = PS["WebAudio.Analyser"] || {});
	(function(exports) {
	  // module WebAudio.MediaStream

	  exports.createMediaStreamSource = function(stream){ 
	      return function(context){
	          return function(){
	              console.log("[webaudio] createMediaStreamSource");
	              return context.createMediaStreamSource(stream);
	          }
	      }
	  };
	})(PS["WebAudio.MediaStream"] = PS["WebAudio.MediaStream"] || {});
	(function(exports) {
	  // module MediaStream


	  exports._getUserMedia = function(constraints){
	      return function(reject){
	          return function(resolve){
	              return function(){
	                  var getUserMedia = navigator.getUserMedia ||
	                         navigator.webkitGetUserMedia ||
	                         navigator.mozGetUserMedia ||
	                         navigator.msGetUserMedia;

	                  return getUserMedia.bind(navigator)(constraints, function(localMediaStream){
	                      resolve(localMediaStream)();
	                  }, function(err){
	                      reject(err)();
	                  });
	              }
	          }
	      }
	  }
	})(PS["MediaStream"] = PS["MediaStream"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["MediaStream"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var DOM = PS["DOM"];     
	  var getUserMedia = function (constraints) {
	      return Control_Monad_Aff.makeAff($foreign._getUserMedia(constraints));
	  };
	  exports["getUserMedia"] = getUserMedia;;
	 
	})(PS["MediaStream"] = PS["MediaStream"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebAudio.MediaStream"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var MediaStream = PS["MediaStream"];
	  exports["createMediaStreamSource"] = $foreign.createMediaStreamSource;;
	 
	})(PS["WebAudio.MediaStream"] = PS["WebAudio.MediaStream"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var WebAudio = PS["WebAudio"];
	  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
	  var Debug_Trace = PS["Debug.Trace"];
	  var MediaStream = PS["MediaStream"];
	  var VDestination = (function () {
	      function VDestination() {

	      };
	      VDestination.value = new VDestination();
	      return VDestination;
	  })();
	  var VGain = (function () {
	      function VGain(value0) {
	          this.value0 = value0;
	      };
	      VGain.create = function (value0) {
	          return new VGain(value0);
	      };
	      return VGain;
	  })();
	  var VDelay = (function () {
	      function VDelay(value0) {
	          this.value0 = value0;
	      };
	      VDelay.create = function (value0) {
	          return new VDelay(value0);
	      };
	      return VDelay;
	  })();
	  var VAudioBufferSource = (function () {
	      function VAudioBufferSource(value0) {
	          this.value0 = value0;
	      };
	      VAudioBufferSource.create = function (value0) {
	          return new VAudioBufferSource(value0);
	      };
	      return VAudioBufferSource;
	  })();
	  var VBiquadFilter = (function () {
	      function VBiquadFilter(value0) {
	          this.value0 = value0;
	      };
	      VBiquadFilter.create = function (value0) {
	          return new VBiquadFilter(value0);
	      };
	      return VBiquadFilter;
	  })();
	  var VVideoElement = (function () {
	      function VVideoElement(value0) {
	          this.value0 = value0;
	      };
	      VVideoElement.create = function (value0) {
	          return new VVideoElement(value0);
	      };
	      return VVideoElement;
	  })();
	  var VStereoPanner = (function () {
	      function VStereoPanner(value0) {
	          this.value0 = value0;
	      };
	      VStereoPanner.create = function (value0) {
	          return new VStereoPanner(value0);
	      };
	      return VStereoPanner;
	  })();
	  var VConvolver = (function () {
	      function VConvolver(value0) {
	          this.value0 = value0;
	      };
	      VConvolver.create = function (value0) {
	          return new VConvolver(value0);
	      };
	      return VConvolver;
	  })();
	  var VChannelSplitter = (function () {
	      function VChannelSplitter() {

	      };
	      VChannelSplitter.value = new VChannelSplitter();
	      return VChannelSplitter;
	  })();
	  var VChannelMerger = (function () {
	      function VChannelMerger() {

	      };
	      VChannelMerger.value = new VChannelMerger();
	      return VChannelMerger;
	  })();
	  var VDynamicsCompressor = (function () {
	      function VDynamicsCompressor(value0) {
	          this.value0 = value0;
	      };
	      VDynamicsCompressor.create = function (value0) {
	          return new VDynamicsCompressor(value0);
	      };
	      return VDynamicsCompressor;
	  })();
	  var VOscillator = (function () {
	      function VOscillator(value0) {
	          this.value0 = value0;
	      };
	      VOscillator.create = function (value0) {
	          return new VOscillator(value0);
	      };
	      return VOscillator;
	  })();
	  var VAnalyser = (function () {
	      function VAnalyser(value0) {
	          this.value0 = value0;
	      };
	      VAnalyser.create = function (value0) {
	          return new VAnalyser(value0);
	      };
	      return VAnalyser;
	  })();
	  var VMediaStream = (function () {
	      function VMediaStream(value0) {
	          this.value0 = value0;
	      };
	      VMediaStream.create = function (value0) {
	          return new VMediaStream(value0);
	      };
	      return VMediaStream;
	  })();
	  var VNode = (function () {
	      function VNode(value0) {
	          this.value0 = value0;
	      };
	      VNode.create = function (value0) {
	          return new VNode(value0);
	      };
	      return VNode;
	  })();
	  var eq_VNodeName = new Prelude.Eq(function (_2) {
	      return function (_3) {
	          return Prelude["=="](Prelude.eqString)(_2)(_3);
	      };
	  });
	  var eq_vNode = new Prelude.Eq(function (_0) {
	      return function (_1) {
	          return Prelude["=="](eq_VNodeName)(_0.value0.key)(_1.value0.key);
	      };
	  });
	  var eq_VConnection = new Prelude.Eq(function (_4) {
	      return function (_5) {
	          return Prelude["=="](eq_vNode)(_4.output)(_5.output) && (Prelude["=="](eq_vNode)(_4.input)(_5.input) && (_4.outputIndex === _5.outputIndex && _4.inputIndex === _5.inputIndex));
	      };
	  });
	  exports["VDestination"] = VDestination;
	  exports["VGain"] = VGain;
	  exports["VDelay"] = VDelay;
	  exports["VAudioBufferSource"] = VAudioBufferSource;
	  exports["VBiquadFilter"] = VBiquadFilter;
	  exports["VVideoElement"] = VVideoElement;
	  exports["VStereoPanner"] = VStereoPanner;
	  exports["VConvolver"] = VConvolver;
	  exports["VChannelSplitter"] = VChannelSplitter;
	  exports["VChannelMerger"] = VChannelMerger;
	  exports["VDynamicsCompressor"] = VDynamicsCompressor;
	  exports["VOscillator"] = VOscillator;
	  exports["VAnalyser"] = VAnalyser;
	  exports["VMediaStream"] = VMediaStream;
	  exports["VNode"] = VNode;
	  exports["eq_vNode"] = eq_vNode;
	  exports["eq_VNodeName"] = eq_VNodeName;
	  exports["eq_VConnection"] = eq_VConnection;;
	 
	})(PS["Sound.AudioGraph.Types"] = PS["Sound.AudioGraph.Types"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Sound.AudioGraph.Core"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var WebAudio_Gain = PS["WebAudio.Gain"];
	  var WebAudio_Delay = PS["WebAudio.Delay"];
	  var WebAudio_AudioBufferSource = PS["WebAudio.AudioBufferSource"];
	  var WebAudio_BiquadFilter = PS["WebAudio.BiquadFilter"];
	  var WebAudio_MediaElementSource = PS["WebAudio.MediaElementSource"];
	  var WebAudio_StereoPanner = PS["WebAudio.StereoPanner"];
	  var WebAudio_Convolver = PS["WebAudio.Convolver"];
	  var WebAudio_Splitter = PS["WebAudio.Splitter"];
	  var WebAudio_Merger = PS["WebAudio.Merger"];
	  var WebAudio_Compressor = PS["WebAudio.Compressor"];
	  var WebAudio_Oscillator = PS["WebAudio.Oscillator"];
	  var WebAudio_Analyser = PS["WebAudio.Analyser"];
	  var WebAudio_MediaStream = PS["WebAudio.MediaStream"];
	  var Data_Int = PS["Data.Int"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Control_Monad = PS["Control.Monad"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var WebAudio = PS["WebAudio"];
	  var Debug_Trace = PS["Debug.Trace"];
	  var Data_Foreign_EasyFFI = PS["Data.Foreign.EasyFFI"];
	  var Sound_AudioGraph_Types = PS["Sound.AudioGraph.Types"];     
	  var RNode = (function () {
	      function RNode(value0) {
	          this.value0 = value0;
	      };
	      RNode.create = function (value0) {
	          return new RNode(value0);
	      };
	      return RNode;
	  })();
	  var updateAudioGraph = function (context) {
	      return function (_29) {
	          return function (next) {
	              var getRNode = function (_30) {
	                  return function (nodes) {
	                      var _38 = Data_Array.head(Data_Array.filter(function (_20) {
	                          return Prelude["=="](Sound_AudioGraph_Types.eq_VNodeName)(_20.value0.name)(_30);
	                      })(nodes));
	                      if (_38 instanceof Data_Maybe.Nothing) {
	                          return new Data_Either.Left(_30);
	                      };
	                      if (_38 instanceof Data_Maybe.Just) {
	                          return new Data_Either.Right(_38.value0);
	                      };
	                      throw new Error("Failed pattern match at Sound.AudioGraph.Core line 172, column 5 - line 173, column 5: " + [ _38.constructor.name ]);
	                  };
	              };
	              var current = Data_Array.nub(Sound_AudioGraph_Types.eq_VConnection)(_29.graph);
	              var nextNodes = Data_Array.nub(Sound_AudioGraph_Types.eq_vNode)(Data_Array.concatMap(function (_21) {
	                  return [ _21.output, _21.input ];
	              })(next));
	              var currentNodes = Data_Array.nub(Sound_AudioGraph_Types.eq_vNode)(Data_Array.concatMap(function (_22) {
	                  return [ _22.output, _22.input ];
	              })(current));
	              return function __do() {
	                  Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(Data_Array["\\\\"](Sound_AudioGraph_Types.eq_VConnection)(current)(next))(function (_23) {
	                      return Data_Either.either(function (n) {
	                          return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("remove conns"));
	                      })(Prelude.id(Prelude.categoryFn))(Prelude.bind(Data_Either.bindEither)(getRNode(_23.output.value0.key)(_29.rnodes))(function (_4) {
	                          return Prelude.bind(Data_Either.bindEither)(getRNode(_23.input.value0.key)(_29.rnodes))(function (_3) {
	                              return Prelude.pure(Data_Either.applicativeEither)(WebAudio_Core.disconnect(_4.value0.node)(_3.value0.node)(_23.outputIndex)(_23.inputIndex));
	                          });
	                      }));
	                  })();
	                  var _17 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(Data_Array["\\\\"](Sound_AudioGraph_Types.eq_vNode)(currentNodes)(nextNodes))(function (_24) {
	                      return Data_Either.either(function (n_1) {
	                          return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("remove nodes"));
	                      })(Prelude.id(Prelude.categoryFn))(Prelude.bind(Data_Either.bindEither)(getRNode(_24.value0.key)(_29.rnodes))(function (_5) {
	                          return Prelude.pure(Data_Either.applicativeEither)(Prelude.pure(Control_Monad_Eff.applicativeEff)(new RNode(_5.value0)));
	                      }));
	                  })();
	                  var _16 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(Data_Array.intersect(Sound_AudioGraph_Types.eq_vNode)(nextNodes)(currentNodes))(function (_25) {
	                      return Data_Either.either(function (n_1) {
	                          return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("remaining"));
	                      })(Prelude.id(Prelude.categoryFn))(Prelude.bind(Data_Either.bindEither)(getRNode(_25.value0.key)(_29.rnodes))(function (_6) {
	                          return Prelude.pure(Data_Either.applicativeEither)(Prelude.pure(Control_Monad_Eff.applicativeEff)(new RNode(_6.value0)));
	                      }));
	                  })();
	                  var _15 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(Data_Array["\\\\"](Sound_AudioGraph_Types.eq_vNode)(nextNodes)(currentNodes))(function (_26) {
	                      return function __do() {
	                          var _11 = (function () {
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VDestination) {
	                                  return WebAudio_Core.getDestinationNode(context);
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VGain) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_Gain.gainToAudioNode)(WebAudio_Gain.createGain(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VDelay) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(Unsafe_Coerce.unsafeCoerce)(WebAudio_Delay.createDelay(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VAudioBufferSource) {
	                                  return function __do() {
	                                      var _7 = WebAudio_AudioBufferSource.createBufferSource(_26.value0.node.value0.buffer)(context)();
	                                      Control_Monad.when(Control_Monad_Eff.monadEff)(_26.value0.node.value0.playing)(WebAudio_AudioBufferSource.startAudioBufferSource(_26.value0.node.value0.when)(_26.value0.node.value0.offset)(_26.value0.node.value0.duration)(_7))();
	                                      WebAudio_AudioBufferSource.detune(_26.value0.node.value0.detune)(_7)();
	                                      return WebAudio_AudioBufferSource.audioBufferSourceToAudioNode(_7);
	                                  };
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VBiquadFilter) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_BiquadFilter.biquadFilterToAudioNode)(WebAudio_BiquadFilter.createBiquadFilter(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VVideoElement) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_MediaElementSource.mediaElementSourceToAudioNode)(WebAudio_MediaElementSource.createMediaElementSource(_26.value0.node.value0.element)(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VStereoPanner) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(Unsafe_Coerce.unsafeCoerce)(WebAudio_StereoPanner.createStereoPanner(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VConvolver) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(Unsafe_Coerce.unsafeCoerce)(WebAudio_Convolver.createConvolver(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VChannelSplitter) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_Splitter.channelSplitterToAudioNode)(WebAudio_Splitter.createChannelSplitter(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VChannelMerger) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_Merger.channelMergerToAudioNode)(WebAudio_Merger.createChannelMerger(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VDynamicsCompressor) {
	                                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(WebAudio_Compressor.dynamicsCompressorToAudioNode)(WebAudio_Compressor.createDynamicsCompressor(context));
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VOscillator) {
	                                  return function __do() {
	                                      var _8 = WebAudio_Oscillator.createOscillator(context)();
	                                      WebAudio_Oscillator.startOscillator(0.0)(0.0)(_8)();
	                                      return Unsafe_Coerce.unsafeCoerce(_8);
	                                  };
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VAnalyser) {
	                                  return function __do() {
	                                      var _9 = WebAudio_Analyser.createAnalyser(context)();
	                                      return Unsafe_Coerce.unsafeCoerce(_9);
	                                  };
	                              };
	                              if (_26.value0.node instanceof Sound_AudioGraph_Types.VMediaStream) {
	                                  return function __do() {
	                                      var _10 = WebAudio_MediaStream.createMediaStreamSource(_26.value0.node.value0)(context)();
	                                      return Unsafe_Coerce.unsafeCoerce(_10);
	                                  };
	                              };
	                              throw new Error("Failed pattern match at Sound.AudioGraph.Core line 53, column 1 - line 54, column 1: " + [ _26.value0.node.constructor.name ]);
	                          })()();
	                          return new RNode({
	                              name: _26.value0.key, 
	                              node: _11
	                          });
	                      };
	                  })();
	                  return (function () {
	                      var nextRNodes = Prelude["++"](Prelude.semigroupArray)(_16)(_15);
	                      return function __do() {
	                          Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(nextNodes)(function (_27) {
	                              var _82 = getRNode(_27.value0.key)(nextRNodes);
	                              if (_82 instanceof Data_Either.Left) {
	                                  return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error(_82.value0));
	                              };
	                              if (_82 instanceof Data_Either.Right) {
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VDestination) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VGain) {
	                                      return WebAudio_Gain.setGain(_27.value0.node.value0.gain)(Unsafe_Coerce.unsafeCoerce(_82.value0.value0.node));
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VDelay) {
	                                      return WebAudio_Delay.setDelayTime(_27.value0.node.value0.delayTime)(Unsafe_Coerce.unsafeCoerce(_82.value0.value0.node));
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VAudioBufferSource) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VBiquadFilter) {
	                                      return function __do() {
	                                          WebAudio_BiquadFilter.setBiquadFilterType(_27.value0.node.value0.type)(Unsafe_Coerce.unsafeCoerce(_82.value0.value0.node))();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.frequency.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.frequency)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.detune.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.detune)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.Q.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.q)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.gain.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.gain)();
	                                          return Prelude.unit;
	                                      };
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VVideoElement) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VStereoPanner) {
	                                      return WebAudio_StereoPanner.setPan(_27.value0.node.value0.pan)(Unsafe_Coerce.unsafeCoerce(_82.value0.value0.node));
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VConvolver) {
	                                      return WebAudio_Convolver.setBuffer(_27.value0.node.value0.buffer)(Unsafe_Coerce.unsafeCoerce(_82.value0.value0.node));
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VDynamicsCompressor) {
	                                      return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.threshold.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.threshold)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.knee.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.knee)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.ratio.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.ratio)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.reduction.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.reduction)();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.attack.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.attack)();
	                                          return Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.release.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.release)();
	                                      });
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VOscillator) {
	                                      return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.type = v;")(_82.value0.value0.node)(Prelude.show(WebAudio_Oscillator.show_OscillatorType)(_27.value0.node.value0.type))();
	                                          Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.frequency.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.frequency)();
	                                          return Data_Foreign_EasyFFI.unsafeForeignProcedure([ "n", "v", "" ])("n.detune.value = v;")(_82.value0.value0.node)(_27.value0.node.value0.detune)();
	                                      });
	                                  };
	                                  if (_27.value0.node instanceof Sound_AudioGraph_Types.VAnalyser) {
	                                      return Prelude["void"](Control_Monad_Eff.functorEff)(Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit));
	                                  };
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              throw new Error("Failed pattern match at Sound.AudioGraph.Core line 53, column 1 - line 54, column 1: " + [ _82.constructor.name ]);
	                          })();
	                          var _14 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(Data_Array["\\\\"](Sound_AudioGraph_Types.eq_VConnection)(next)(current))(function (_28) {
	                              return Data_Either.either(function (n) {
	                                  return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("add conns"));
	                              })(Prelude.id(Prelude.categoryFn))(Prelude.bind(Data_Either.bindEither)(getRNode(_28.output.value0.key)(nextRNodes))(function (_13) {
	                                  return Prelude.bind(Data_Either.bindEither)(getRNode(_28.input.value0.key)(nextRNodes))(function (_12) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(WebAudio_Core.connect(_13.value0.node)(_12.value0.node)(_28.outputIndex)(_28.inputIndex));
	                                  });
	                              }));
	                          })();
	                          var _108 = {};
	                          for (var _109 in _29) {
	                              if (_29.hasOwnProperty(_109)) {
	                                  _108[_109] = _29[_109];
	                              };
	                          };
	                          _108.graph = next;
	                          _108.rnodes = nextRNodes;
	                          return _108;
	                      };
	                  })()();
	              };
	          };
	      };
	  };
	  var update = function (next) {
	      return Control_Monad_Eff_Exception.catchException(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(function __do() {
	          var _2 = $foreign._readFromAudioGraph();
	          var _1 = $foreign.getAudioGraphContext();
	          var _0 = updateAudioGraph(_1)(_2)(next)();
	          return $foreign._writeToAudioGraph(_0)();
	      });
	  };
	  var renderOfflineAudio = function (numberOfChannel) {
	      return function (length) {
	          return function (sampleRate) {
	              return function (graph) {
	                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(WebAudio_Core.createOfflineAudioContext(numberOfChannel)(Data_Int.floor(sampleRate * length))(sampleRate)))(function (_19) {
	                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Exception.catchException(function (_118) {
	                          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create(_118));
	                      })(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Either.Right.create)(updateAudioGraph(WebAudio_Core.offlineAudioContextToAudioContext(_19))({
	                          graph: [  ], 
	                          rnodes: [  ]
	                      })(graph)))))(function (_18) {
	                          if (_18 instanceof Data_Either.Left) {
	                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(_18.value0);
	                          };
	                          if (_18 instanceof Data_Either.Right) {
	                              return WebAudio_Core.startRendering(_19);
	                          };
	                          throw new Error("Failed pattern match at Sound.AudioGraph.Core line 183, column 1 - line 184, column 1: " + [ _18.constructor.name ]);
	                      });
	                  });
	              };
	          };
	      };
	  };
	  exports["renderOfflineAudio"] = renderOfflineAudio;
	  exports["update"] = update;
	  exports["getAudioGraphContext"] = $foreign.getAudioGraphContext;;
	 
	})(PS["Sound.AudioGraph.Core"] = PS["Sound.AudioGraph.Core"] || {});
	(function(exports) {
	  /* global exports, require */
	  "use strict";

	  // module OpticUI.Internal.VirtualDOM

	  // VTree -> HTMLElement
	  exports.createElement = function () {
	    var vcreateElement = __webpack_require__(2);
	    return function (vtree) {
	      return vcreateElement(vtree);
	    };
	  }();

	  // VTree -> VTree -> Patch
	  exports.diff = function () {
	    var vdiff = __webpack_require__(15);
	    return function (a) {
	      return function (b) {
	        return vdiff(a, b);
	      };
	    };
	  }();

	  // forall eff. Patch -> HTMLElement -> Eff (dom :: DOM | eff) HTMLElement
	  exports.patch = function () {
	    var vpatch = __webpack_require__(20);
	    return function (p) {
	      return function (node) {
	        return function () {
	          return vpatch(node, p);
	        };
	      };
	    };
	  }();

	  // String -> VTree
	  exports.vtext = function () {
	    var VText = __webpack_require__(25);
	    return function (s) { return new VText(s); };
	  }();

	  // Nullable String -> String -> Nullable String -> Props -> Array VTree -> VTree
	  exports.vnode = function () {
	    var VirtualNode = __webpack_require__(26);
	    var SoftSetHook = __webpack_require__(27);
	    return function (ns) {
	      return function (name) {
	        return function (key) {
	          return function (props) {
	            return function (children) {
	              if (name === "input" && props.value !== undefined) {
	                props.value = new SoftSetHook(props.value);
	              }
	              return new VirtualNode(name, props, children, key, ns);
	            };
	          };
	        };
	      };
	    };
	  }();

	  // forall a. Fn2 String a Props
	  exports.prop = function (key, value) {
	    var props = {};
	    props[key] = value;
	    return props;
	  };

	  // Fn2 String String Props
	  exports.attrProp = function (key, value) {
	    var props = { attributes : {} };
	    props.attributes[key] = value;
	    return props;
	  };

	  // forall eff e. Fn2 String (e -> Eff eff Unit) Props
	  exports.handlerProp = function (key, f) {
	    var Hook  = function () {};
	    var props = {};
	    Hook.prototype.callback = function (e) {
	      f(e)();
	    };
	    Hook.prototype.hook = function (node) {
	      node.addEventListener(key, this.callback);
	    };
	    Hook.prototype.unhook = function (node) {
	      node.removeEventListener(key, this.callback);
	    };
	    props["opticui-hook-" + key] = new Hook(f);
	    return props;
	  };

	  // Fn2 Props Props Props
	  exports.concatProps = function () {
	    var hOP = Object.prototype.hasOwnProperty;
	    var copy = function (source, result) {
	      for (var key in source) {
	        if (hOP.call(source, key)) {
	          if (key === "attributes") {
	            var sourceAttrs = source[key];
	            var resultAttrs = result[key];

	            for (var attr in sourceAttrs) {
	              if (hOP.call(sourceAttrs, attr)) {
	                resultAttrs[attr] = sourceAttrs[attr];
	              }
	            }
	          } else {
	            result[key] = source[key];
	          }
	        }
	      }
	      return result;
	    };
	    return function (p, q) {
	      return copy(p, copy(q, { attributes: {} } ));
	    };
	  }();

	  // Props
	  exports.emptyProps = {};

	  //Fn2 String (HTMLElement -> Eff eff Unit) Props
	  exports.initializer = function(s, f){
	    var Hook = function () {};
	    Hook.prototype.hook = function (node) {
	      if(!node.initialized){
	        node.initialized = true;
	        f(node)();
	      }
	    };
	    var obj = {};
	    obj[s] = new Hook(f);
	    return obj;
	  };

	  //Fn2 String (HTMLElement -> Eff eff Unit) Props
	  exports.finalizer = function(s, f){
	    var Hook = function () {};
	    Hook.prototype.unhook = function (node) {
	      f(node)();
	    };
	    var obj = {};
	    obj[s] = new Hook(f);
	    return obj;
	  };
	 
	})(PS["OpticUI.Internal.VirtualDOM"] = PS["OpticUI.Internal.VirtualDOM"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["OpticUI.Internal.VirtualDOM"];
	  var Prelude = PS["Prelude"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Function = PS["Data.Function"];
	  var DOM = PS["DOM"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var Data_Nullable = PS["Data.Nullable"];     
	  var semigroupProps = new Prelude.Semigroup(Data_Function.runFn2($foreign.concatProps));
	  var monoidProps = new Data_Monoid.Monoid(function () {
	      return semigroupProps;
	  }, $foreign.emptyProps);
	  exports["semigroupProps"] = semigroupProps;
	  exports["monoidProps"] = monoidProps;
	  exports["finalizer"] = $foreign.finalizer;
	  exports["initializer"] = $foreign.initializer;
	  exports["handlerProp"] = $foreign.handlerProp;
	  exports["attrProp"] = $foreign.attrProp;
	  exports["prop"] = $foreign.prop;
	  exports["vnode"] = $foreign.vnode;
	  exports["vtext"] = $foreign.vtext;
	  exports["patch"] = $foreign.patch;
	  exports["diff"] = $foreign.diff;
	  exports["createElement"] = $foreign.createElement;;
	 
	})(PS["OpticUI.Internal.VirtualDOM"] = PS["OpticUI.Internal.VirtualDOM"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Exists = PS["Data.Exists"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
	  var PropE = (function () {
	      function PropE(value0) {
	          this.value0 = value0;
	      };
	      PropE.create = function (value0) {
	          return new PropE(value0);
	      };
	      return PropE;
	  })();
	  var AttrP = (function () {
	      function AttrP(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      AttrP.create = function (value0) {
	          return function (value1) {
	              return new AttrP(value0, value1);
	          };
	      };
	      return AttrP;
	  })();
	  var PropP = (function () {
	      function PropP(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      PropP.create = function (value0) {
	          return function (value1) {
	              return new PropP(value0, value1);
	          };
	      };
	      return PropP;
	  })();
	  var HandlerP = (function () {
	      function HandlerP(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      HandlerP.create = function (value0) {
	          return function (value1) {
	              return new HandlerP(value0, value1);
	          };
	      };
	      return HandlerP;
	  })();
	  var InitializerP = (function () {
	      function InitializerP(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      InitializerP.create = function (value0) {
	          return function (value1) {
	              return new InitializerP(value0, value1);
	          };
	      };
	      return InitializerP;
	  })();
	  var FinalizerP = (function () {
	      function FinalizerP(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      FinalizerP.create = function (value0) {
	          return function (value1) {
	              return new FinalizerP(value0, value1);
	          };
	      };
	      return FinalizerP;
	  })();
	  var KeyP = (function () {
	      function KeyP(value0) {
	          this.value0 = value0;
	      };
	      KeyP.create = function (value0) {
	          return new KeyP(value0);
	      };
	      return KeyP;
	  })();
	  var Text = (function () {
	      function Text(value0) {
	          this.value0 = value0;
	      };
	      Text.create = function (value0) {
	          return new Text(value0);
	      };
	      return Text;
	  })();
	  var Element = (function () {
	      function Element(value0, value1, value2, value3) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	          this.value3 = value3;
	      };
	      Element.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return function (value3) {
	                      return new Element(value0, value1, value2, value3);
	                  };
	              };
	          };
	      };
	      return Element;
	  })();
	  var Markup = (function () {
	      function Markup(value0) {
	          this.value0 = value0;
	      };
	      Markup.create = function (value0) {
	          return new Markup(value0);
	      };
	      return Markup;
	  })();
	  var text = function (t) {
	      return new Markup([ new Text(t) ]);
	  };
	  var runInitializer = function (f) {
	      return function (init) {
	          return f(Unsafe_Coerce.unsafeCoerce(init));
	      };
	  };
	  var runFinalizer = function (f) {
	      return function (i) {
	          return f(Unsafe_Coerce.unsafeCoerce(i));
	      };
	  };
	  var runEventHandler = function (f) {
	      return function (h) {
	          return f(Unsafe_Coerce.unsafeCoerce(h));
	      };
	  };
	  var prop = function (n) {
	      return function (v) {
	          return new PropP(n, Data_Exists.mkExists(new PropE(v)));
	      };
	  };
	  var mkInitializer = Unsafe_Coerce.unsafeCoerce;
	  var mkEventHandler = Unsafe_Coerce.unsafeCoerce;
	  var markupSemigroup = new Prelude.Semigroup(function (_0) {
	      return function (_1) {
	          return new Markup(Prelude["++"](Prelude.semigroupArray)(_0.value0)(_1.value0));
	      };
	  });
	  var markupMonoid = new Data_Monoid.Monoid(function () {
	      return markupSemigroup;
	  }, new Markup([  ]));
	  var key = KeyP.create;
	  var initializer = function (s) {
	      return function (f) {
	          return new InitializerP(s, mkInitializer(f));
	      };
	  };
	  var handle = function (n) {
	      return function (f) {
	          return new HandlerP(n, mkEventHandler(f));
	      };
	  };
	  var element = function (ns) {
	      return function (tag) {
	          return function (props) {
	              return function (childs) {
	                  return new Markup([ new Element(ns, tag, props, childs) ]);
	              };
	          };
	      };
	  };
	  var attr = function (n) {
	      return function (v) {
	          return new AttrP(n, v);
	      };
	  };
	  exports["PropE"] = PropE;
	  exports["AttrP"] = AttrP;
	  exports["PropP"] = PropP;
	  exports["HandlerP"] = HandlerP;
	  exports["InitializerP"] = InitializerP;
	  exports["FinalizerP"] = FinalizerP;
	  exports["KeyP"] = KeyP;
	  exports["Text"] = Text;
	  exports["Element"] = Element;
	  exports["Markup"] = Markup;
	  exports["runFinalizer"] = runFinalizer;
	  exports["initializer"] = initializer;
	  exports["runInitializer"] = runInitializer;
	  exports["mkInitializer"] = mkInitializer;
	  exports["runEventHandler"] = runEventHandler;
	  exports["mkEventHandler"] = mkEventHandler;
	  exports["key"] = key;
	  exports["handle"] = handle;
	  exports["prop"] = prop;
	  exports["attr"] = attr;
	  exports["text"] = text;
	  exports["element"] = element;
	  exports["markupSemigroup"] = markupSemigroup;
	  exports["markupMonoid"] = markupMonoid;;
	 
	})(PS["OpticUI.Markup"] = PS["OpticUI.Markup"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Prelude = PS["Prelude"];
	  var Data_Profunctor = PS["Data.Profunctor"];
	  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Control_Monad_State = PS["Control.Monad.State"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Lens = PS["Data.Lens"];
	  var Data_Profunctor_Star = PS["Data.Profunctor.Star"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
	  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
	  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
	  var Data_Identity = PS["Data.Identity"];     
	  var Handler = function (x) {
	      return x;
	  };
	  var Sink = (function () {
	      function Sink(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      Sink.create = function (value0) {
	          return function (value1) {
	              return new Sink(value0, value1);
	          };
	      };
	      return Sink;
	  })();
	  var withView = function (f) {
	      return function (_14) {
	          return function (s) {
	              return function (h) {
	                  return Prelude.map(Control_Monad_Eff.functorEff)(f)(_14(s)(h));
	              };
	          };
	      };
	  };
	  var $$with = function (f) {
	      return function (s) {
	          return function (h) {
	              var _30 = f(s)(h);
	              return _30(s)(h);
	          };
	      };
	  };
	  var uiSemigroup = function (__dict_Semigroup_0) {
	      return new Prelude.Semigroup(function (_22) {
	          return function (_23) {
	              return function (s) {
	                  return function (h) {
	                      return Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude.append(__dict_Semigroup_0))(_22(s)(h)))(_23(s)(h));
	                  };
	              };
	          };
	      });
	  };
	  var uiMonoid = function (__dict_Monoid_1) {
	      return new Data_Monoid.Monoid(function () {
	          return uiSemigroup(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
	      }, function (_6) {
	          return function (_5) {
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Monoid.mempty(__dict_Monoid_1));
	          };
	      });
	  };
	  var ui = function (v) {
	      return function (_8) {
	          return function (_7) {
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(v);
	          };
	      };
	  };
	  var toSink = function (_16) {
	      return function (s) {
	          return new Sink(s, _16(s));
	      };
	  };
	  var runUI = function (_12) {
	      return _12;
	  };
	  var runSink = function (_15) {
	      return _15.value1;
	  };
	  var runHandler = function (_13) {
	      return _13;
	  };
	  var handlerContravariant = new Data_Functor_Contravariant.Contravariant(function (f) {
	      return function (_24) {
	          return function (_74) {
	              return _24(f(_74));
	          };
	      };
	  });
	  var sinkFunctor = new Prelude.Functor(function (f) {
	      return function (_25) {
	          return new Sink(f(_25.value0), function (_75) {
	              return _25.value1(Data_Functor_Contravariant.cmap(handlerContravariant)(f)(_75));
	          });
	      };
	  });
	  var sinkApply = function (__dict_Semigroup_3) {
	      return new Prelude.Apply(function () {
	          return sinkFunctor;
	      }, function (_26) {
	          return function (_27) {
	              return new Sink(_26.value0(_27.value0), function (h) {
	                  return Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude.append(__dict_Semigroup_3))(_26.value1(Data_Functor_Contravariant.cmap(handlerContravariant)(function (_0) {
	                      return _0(_27.value0);
	                  })(h))))(_27.value1(Data_Functor_Contravariant.cmap(handlerContravariant)(Prelude["$"](_26.value0))(h)));
	              });
	          };
	      });
	  };
	  var sinkApplicative = function (__dict_Monoid_4) {
	      return new Prelude.Applicative(function () {
	          return sinkApply(__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]());
	      }, function (x) {
	          return new Sink(x, function (_11) {
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Monoid.mempty(__dict_Monoid_4));
	          });
	      });
	  };
	  var uiProfunctor = new Data_Profunctor.Profunctor(function (f) {
	      return function (g) {
	          return function (_17) {
	              return function (s) {
	                  return function (h) {
	                      return _17(f(s))(Data_Functor_Contravariant.cmap(handlerContravariant)(g)(h));
	                  };
	              };
	          };
	      };
	  });
	  var uiStrong = new Data_Profunctor_Strong.Strong(function () {
	      return uiProfunctor;
	  }, function (_20) {
	      return function (_3) {
	          return function (h) {
	              return _20(_3.value0)(Data_Functor_Contravariant.cmap(handlerContravariant)(function (r) {
	                  return new Data_Tuple.Tuple(r, _3.value1);
	              })(h));
	          };
	      };
	  }, function (_21) {
	      return function (_4) {
	          return function (h) {
	              return _21(_4.value1)(Data_Functor_Contravariant.cmap(handlerContravariant)(function (r) {
	                  return new Data_Tuple.Tuple(_4.value0, r);
	              })(h));
	          };
	      };
	  });
	  var fromSink = function (f) {
	      return function (_76) {
	          return runSink(f(_76));
	      };
	  };
	  var foreach = function (__dict_Monoid_6) {
	      return function (__dict_Traversable_7) {
	          return function (f) {
	              var indices = function (g) {
	                  return function (t) {
	                      return Control_Monad_State.evalState(Data_Traversable.traverse(__dict_Traversable_7)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (x) {
	                          return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (i) {
	                              return new Data_Tuple.Tuple(g(i)(x), i + 1 | 0);
	                          });
	                      })(t))(0);
	                  };
	              };
	              return fromSink(function (_78) {
	                  return Data_Traversable.sequence(__dict_Traversable_7)(sinkApplicative(__dict_Monoid_6))(indices(function (_79) {
	                      return toSink(f(_79));
	                  })(_78));
	              });
	          };
	      };
	  };
	  exports["Handler"] = Handler;
	  exports["foreach"] = foreach;
	  exports["withView"] = withView;
	  exports["with"] = $$with;
	  exports["ui"] = ui;
	  exports["runUI"] = runUI;
	  exports["runHandler"] = runHandler;
	  exports["uiProfunctor"] = uiProfunctor;
	  exports["uiStrong"] = uiStrong;
	  exports["uiSemigroup"] = uiSemigroup;
	  exports["uiMonoid"] = uiMonoid;
	  exports["handlerContravariant"] = handlerContravariant;;
	 
	})(PS["OpticUI.Core"] = PS["OpticUI.Core"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var OpticUI_Internal_VirtualDOM = PS["OpticUI.Internal.VirtualDOM"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var OpticUI_Core = PS["OpticUI.Core"];
	  var Control_Monad = PS["Control.Monad"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
	  var Control_Monad_State = PS["Control.Monad.State"];
	  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Exists = PS["Data.Exists"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Array = PS["Data.Array"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var DOM = PS["DOM"];
	  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
	  var DOM_Event_EventTypes = PS["DOM.Event.EventTypes"];
	  var DOM_HTML = PS["DOM.HTML"];
	  var DOM_HTML_Document = PS["DOM.HTML.Document"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var DOM_HTML_Window = PS["DOM.HTML.Window"];
	  var DOM_Node_Node = PS["DOM.Node.Node"];
	  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
	  var Data_Identity = PS["Data.Identity"];     
	  var onLoad = function (go) {
	      return function __do() {
	          var _24 = DOM_HTML.window();
	          return (function () {
	              var et = DOM_HTML_Types.windowToEventTarget(_24);
	              return DOM_Event_EventTarget.addEventListener(DOM_Event_EventTypes.load)(DOM_Event_EventTarget.eventListener(function (_29) {
	                  return go;
	              }))(false)(et);
	          })()();
	      };
	  };
	  var findProp = function (getter) {
	      return function (setter) {
	          return function (key) {
	              return function (newprop) {
	                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(getter))(function (_23) {
	                      var _37 = Data_StrMap.lookup(key)(_23);
	                      if (_37 instanceof Data_Maybe.Nothing) {
	                          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(setter(Data_StrMap.insert(key)(newprop)(_23))))(function () {
	                              return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(newprop);
	                          });
	                      };
	                      if (_37 instanceof Data_Maybe.Just) {
	                          return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(_37.value0);
	                      };
	                      throw new Error("Failed pattern match at OpticUI.Run line 109, column 1 - line 114, column 1: " + [ _37.constructor.name ]);
	                  });
	              };
	          };
	      };
	  };
	  var toVProp = function (_33) {
	      if (_33 instanceof OpticUI_Markup.AttrP) {
	          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(OpticUI_Internal_VirtualDOM.attrProp(_33.value0, _33.value1));
	      };
	      if (_33 instanceof OpticUI_Markup.HandlerP) {
	          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(OpticUI_Markup.runEventHandler(function (f) {
	              return OpticUI_Internal_VirtualDOM.handlerProp(_33.value0, f);
	          })(_33.value1));
	      };
	      if (_33 instanceof OpticUI_Markup.PropP) {
	          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Exists.runExists(function (_28) {
	              return OpticUI_Internal_VirtualDOM.prop(_33.value0, _28.value0);
	          })(_33.value1));
	      };
	      if (_33 instanceof OpticUI_Markup.InitializerP) {
	          return findProp(function (_0) {
	              return _0.initializers;
	          })(function (is) {
	              return function (_1) {
	                  var _48 = {};
	                  for (var _49 in _1) {
	                      if (_1.hasOwnProperty(_49)) {
	                          _48[_49] = _1[_49];
	                      };
	                  };
	                  _48.initializers = is;
	                  return _48;
	              };
	          })(_33.value0)(OpticUI_Markup.runInitializer(function (i) {
	              return OpticUI_Internal_VirtualDOM.initializer(_33.value0, i);
	          })(_33.value1));
	      };
	      if (_33 instanceof OpticUI_Markup.FinalizerP) {
	          return findProp(function (_2) {
	              return _2.finalizers;
	          })(function (fs) {
	              return function (_3) {
	                  var _52 = {};
	                  for (var _53 in _3) {
	                      if (_3.hasOwnProperty(_53)) {
	                          _52[_53] = _3[_53];
	                      };
	                  };
	                  _52.finalizers = fs;
	                  return _52;
	              };
	          })(_33.value0)(OpticUI_Markup.runFinalizer(function (i) {
	              return OpticUI_Internal_VirtualDOM.finalizer(_33.value0, i);
	          })(_33.value1));
	      };
	      if (_33 instanceof OpticUI_Markup.KeyP) {
	          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Monoid.mempty(OpticUI_Internal_VirtualDOM.monoidProps));
	      };
	      throw new Error("Failed pattern match at OpticUI.Run line 96, column 1 - line 97, column 1: " + [ _33.constructor.name ]);
	  };
	  var findKey = function (r) {
	      return function (_32) {
	          if (_32 instanceof OpticUI_Markup.KeyP) {
	              return new Data_Maybe.Just(_32.value0);
	          };
	          return r;
	      };
	  };
	  var toVTree = function (_31) {
	      if (_31 instanceof OpticUI_Markup.Text) {
	          return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(OpticUI_Internal_VirtualDOM.vtext(_31.value0));
	      };
	      if (_31 instanceof OpticUI_Markup.Element) {
	          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Array.foldM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(function (acc) {
	              return function (prop) {
	                  return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Prelude.append(OpticUI_Internal_VirtualDOM.semigroupProps)(acc))(toVProp(prop));
	              };
	          })(Data_Monoid.mempty(OpticUI_Internal_VirtualDOM.monoidProps))(_31.value2))(function (_22) {
	              var key = Data_Foldable.foldl(Data_Foldable.foldableArray)(findKey)(Data_Maybe.Nothing.value)(_31.value2);
	              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(toVTree)(_31.value3.value0))(function (_21) {
	                  return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(OpticUI_Internal_VirtualDOM.vnode(Data_Nullable.toNullable(_31.value0))(_31.value1)(Data_Nullable.toNullable(key))(_22)(_21));
	              });
	          });
	      };
	      throw new Error("Failed pattern match: " + [ _31.constructor.name ]);
	  };
	  var buildVTree = function (_30) {
	      return function (memo) {
	          var n = Data_Nullable.toNullable(Data_Maybe.Nothing.value);
	          var _71 = Control_Monad_State.runState(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(toVTree)(_30.value0))(memo);
	          return new Data_Tuple.Tuple(OpticUI_Internal_VirtualDOM.vnode(n)("div")(n)(Data_Monoid.mempty(OpticUI_Internal_VirtualDOM.monoidProps))(_71.value0), _71.value1);
	      };
	  };
	  var appendToBody = function (e) {
	      return function __do() {
	          var _27 = DOM_HTML.window();
	          var _26 = DOM_HTML_Window.document(_27)();
	          var _25 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(DOM_HTML_Document.body(_26))();
	          return (function () {
	              if (_25 instanceof Data_Maybe.Nothing) {
	                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	              };
	              if (_25 instanceof Data_Maybe.Just) {
	                  return Prelude["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.appendChild(DOM_HTML_Types.htmlElementToNode(e))(DOM_HTML_Types.htmlElementToNode(_25.value0)));
	              };
	              throw new Error("Failed pattern match at OpticUI.Run line 130, column 1 - line 131, column 1: " + [ _25.constructor.name ]);
	          })()();
	      };
	  };
	  var animate = function (s0) {
	      return function (ui) {
	          var v0 = OpticUI_Internal_VirtualDOM.vtext("");
	          var n0 = OpticUI_Internal_VirtualDOM.createElement(v0);
	          return function __do() {
	              var _20 = Control_Monad_Eff_Ref.newRef(v0)();
	              var _19 = Control_Monad_Eff_Ref.newRef(n0)();
	              var _18 = Control_Monad_Eff_Ref.newRef(s0)();
	              var _17 = Control_Monad_Eff_Ref.newRef(0)();
	              var _16 = Control_Monad_Eff_Ref.newRef({
	                  initializers: Data_StrMap.empty, 
	                  finalizers: Data_StrMap.empty
	              })();
	              return (function () {
	                  var checkGen = function (g) {
	                      return function (go) {
	                          return function __do() {
	                              var _4 = Control_Monad_Eff_Ref.readRef(_17)();
	                              return Control_Monad.when(Control_Monad_Eff.monadEff)(g === _4)(function __do() {
	                                  Control_Monad_Eff_Ref.writeRef(_17)(_4 + 1 | 0)();
	                                  return go();
	                              })();
	                          };
	                      };
	                  };
	                  var step = function (gen) {
	                      return function (s) {
	                          return checkGen(gen)(function __do() {
	                              var _12 = Control_Monad_Eff_Ref.readRef(_20)();
	                              var _11 = Control_Monad_Eff_Ref.readRef(_16)();
	                              var _10 = Prelude["<$>"](Control_Monad_Eff.functorEff)(function (tree) {
	                                  return buildVTree(tree)(_11);
	                              })(OpticUI_Core.runUI(ui)(s)(OpticUI_Core.Handler(step(gen + 1 | 0))))();
	                              var _9 = Control_Monad_Eff_Ref.writeRef(_16)(_10.value1)();
	                              var _8 = Control_Monad_Eff_Ref.writeRef(_20)(_10.value0)();
	                              var _7 = Control_Monad_Eff_Ref.writeRef(_18)(s)();
	                              var _6 = Control_Monad_Eff_Ref.readRef(_19)();
	                              var _5 = OpticUI_Internal_VirtualDOM.patch(OpticUI_Internal_VirtualDOM.diff(_12)(_10.value0))(_6)();
	                              return Control_Monad_Eff_Ref.writeRef(_19)(_5)();
	                          });
	                      };
	                  };
	                  var driver = function (f) {
	                      return function __do() {
	                          var _15 = Control_Monad_Eff_Ref.readRef(_17)();
	                          var _14 = Control_Monad_Eff_Ref.readRef(_18)();
	                          var _13 = f(_14)();
	                          return step(_15)(_13)();
	                      };
	                  };
	                  return function __do() {
	                      onLoad(function __do() {
	                          appendToBody(n0)();
	                          return step(0)(s0)();
	                      })();
	                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(driver)();
	                  };
	              })()();
	          };
	      };
	  };
	  exports["appendToBody"] = appendToBody;
	  exports["onLoad"] = onLoad;
	  exports["findProp"] = findProp;
	  exports["toVProp"] = toVProp;
	  exports["findKey"] = findKey;
	  exports["toVTree"] = toVTree;
	  exports["buildVTree"] = buildVTree;
	  exports["animate"] = animate;;
	 
	})(PS["OpticUI.Run"] = PS["OpticUI.Run"] || {});
	(function(exports) {
	  // module Soundknot.WebMidiLink 


	  exports.onWebMidiLink = function(callback){
	      return function(){
	          window.addEventListener("message", function(e){
	              var matches = /^midi,(\w\w),(\w\w),(\w\w)$/.exec(e.data);
	              if(matches){
	                  callback([
	                      parseInt(matches[1], 16), 
	                      parseInt(matches[2], 16), 
	                      parseInt(matches[3], 16)
	                  ])();
	              }
	          });
	      }
	  }
	})(PS["Soundknot.WebMidiLink"] = PS["Soundknot.WebMidiLink"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.WebMidiLink"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM = PS["DOM"];
	  exports["onWebMidiLink"] = $foreign.onWebMidiLink;;
	 
	})(PS["Soundknot.WebMidiLink"] = PS["Soundknot.WebMidiLink"] || {});
	(function(exports) {
	  // module WebMidi

	  "use strict"

	  exports._requestMIDIAccess = function(reject){
	      return function(resolve){
	          return function(){
	              navigator.requestMIDIAccess({ sysex: false }).then(
	                  function(access){
	                      resolve(access)()
	                  }, 
	                  function(e){
	                      reject(e)();
	                  }
	              );
	          }
	      }
	  }

	  exports.inputs = function(access){
	      return function(){
	          return access.inputs;
	      }
	  }

	  exports.maplikeToStrMap = function(maplike){
	      return function(){
	          var inputs = {};
	          maplike.forEach(function(port, key){
	              inputs[key] = port;
	          });
	          return inputs;
	      }
	  }

	  exports.onMidiMessage = function(handler){
	      return function(input){
	          return function(){
	              input.onmidimessage = function(msg){
	                  handler(msg)();
	              };
	          }
	      }
	  }

	  exports.midiData = function(e){
	      return e.data;
	  }

	  exports.manufacturer = function(input){
	      return input.manufacturer;
	  }

	  exports.name = function(input){
	      return input.name;
	  }

	  exports.version = function(input){
	      return input.version;
	  }

	  exports.state = function(input){
	      return input.state;
	  }

	  exports.id = function(input){
	      return input.id;
	  }

	  exports.onStateChange = function(handler){
	      return function(input){
	          return function(){
	              input.onstatechange = function(e){
	                  handler(e)();
	              };
	          }
	      }
	  }
	})(PS["WebMidi"] = PS["WebMidi"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["WebMidi"];
	  var Prelude = PS["Prelude"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var requestMIDIAccess = Control_Monad_Aff.makeAff($foreign._requestMIDIAccess);
	  exports["requestMIDIAccess"] = requestMIDIAccess;
	  exports["onStateChange"] = $foreign.onStateChange;
	  exports["id"] = $foreign.id;
	  exports["state"] = $foreign.state;
	  exports["version"] = $foreign.version;
	  exports["name"] = $foreign.name;
	  exports["manufacturer"] = $foreign.manufacturer;
	  exports["midiData"] = $foreign.midiData;
	  exports["onMidiMessage"] = $foreign.onMidiMessage;
	  exports["maplikeToStrMap"] = $foreign.maplikeToStrMap;
	  exports["inputs"] = $foreign.inputs;;
	 
	})(PS["WebMidi"] = PS["WebMidi"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Alternative = PS["Control.Alternative"];
	  var Control_MonadPlus = PS["Control.MonadPlus"];
	  var Control_Plus = PS["Control.Plus"];     
	  var ParseError = (function () {
	      function ParseError(value0) {
	          this.value0 = value0;
	      };
	      ParseError.create = function (value0) {
	          return new ParseError(value0);
	      };
	      return ParseError;
	  })();
	  var Parser = (function () {
	      function Parser(value0) {
	          this.value0 = value0;
	      };
	      Parser.create = function (value0) {
	          return new Parser(value0);
	      };
	      return Parser;
	  })();
	  var unParser = function (_7) {
	      return _7.value0;
	  };
	  var $$try = function (p) {
	      return new Parser(function (_6) {
	          return function (fc) {
	              return function (sc) {
	                  return unParser(p)(_6)(function (_5) {
	                      return fc(_6.pos);
	                  })(sc);
	              };
	          };
	      });
	  };
	  var showParseError = new Prelude.Show(function (_8) {
	      return _8.value0;
	  });
	  var functorParser = new Prelude.Functor(function (f) {
	      return function (p) {
	          return new Parser(function (s) {
	              return function (fc) {
	                  return function (sc) {
	                      return unParser(p)(s)(fc)(function (a) {
	                          return function (s$prime) {
	                              return sc(f(a))(s$prime);
	                          };
	                      });
	                  };
	              };
	          });
	      };
	  });
	  var fail = function (msg) {
	      return new Parser(function (_4) {
	          return function (fc) {
	              return function (_3) {
	                  return fc(_4.pos)(new ParseError(msg));
	              };
	          };
	      });
	  }; 
	  var applyParser = new Prelude.Apply(function () {
	      return functorParser;
	  }, function (f) {
	      return function (x) {
	          return new Parser(function (s) {
	              return function (fc) {
	                  return function (sc) {
	                      return unParser(f)(s)(fc)(function (f$prime) {
	                          return function (s$prime) {
	                              return unParser(x)(s$prime)(fc)(function (x$prime) {
	                                  return function (s$prime$prime) {
	                                      return sc(f$prime(x$prime))(s$prime$prime);
	                                  };
	                              });
	                          };
	                      });
	                  };
	              };
	          });
	      };
	  });
	  var bindParser = new Prelude.Bind(function () {
	      return applyParser;
	  }, function (p) {
	      return function (f) {
	          return new Parser(function (s) {
	              return function (fc) {
	                  return function (sc) {
	                      return unParser(p)(s)(fc)(function (a) {
	                          return function (s$prime) {
	                              return unParser(f(a))(s$prime)(fc)(sc);
	                          };
	                      });
	                  };
	              };
	          });
	      };
	  });
	  var applicativeParser = new Prelude.Applicative(function () {
	      return applyParser;
	  }, function (a) {
	      return new Parser(function (s) {
	          return function (_2) {
	              return function (sc) {
	                  return sc(a)(s);
	              };
	          };
	      });
	  });
	  var altParser = new Control_Alt.Alt(function () {
	      return functorParser;
	  }, function (p1) {
	      return function (p2) {
	          return new Parser(function (s) {
	              return function (fc) {
	                  return function (sc) {
	                      return unParser(p1)(s)(function (pos) {
	                          return function (msg) {
	                              var _28 = s.pos === pos;
	                              if (_28) {
	                                  return unParser(p2)(s)(fc)(sc);
	                              };
	                              if (!_28) {
	                                  return fc(pos)(msg);
	                              };
	                              throw new Error("Failed pattern match at Text.Parsing.StringParser line 60, column 1 - line 68, column 1: " + [ _28.constructor.name ]);
	                          };
	                      })(sc);
	                  };
	              };
	          });
	      };
	  });
	  exports["Parser"] = Parser;
	  exports["ParseError"] = ParseError;
	  exports["try"] = $$try;
	  exports["fail"] = fail;
	  exports["unParser"] = unParser;
	  exports["showParseError"] = showParseError;
	  exports["functorParser"] = functorParser;
	  exports["applyParser"] = applyParser;
	  exports["applicativeParser"] = applicativeParser;
	  exports["altParser"] = altParser;
	  exports["bindParser"] = bindParser;;
	 
	})(PS["Text.Parsing.StringParser"] = PS["Text.Parsing.StringParser"] || {});
	(function(exports) {
	  // module Text.Parsing.StringParser.Combinators

	  exports._many = function(parser){
	      return function(s){
	          return function(fc){
	              return function(sc){
	                  var results = [], err;
	                
	                  do{
	                      parser(s)(function(pos){
	                          return function(e){
	                              err = e;
	                          }
	                      })(function(v){
	                          return function(ps){
	                              s = ps;
	                              results.push(v);
	                          }
	                      });
	                  }while( ! err);

	                  return sc(results)(s);
	              }
	          }
	      }
	  }
	})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Text.Parsing.StringParser.Combinators"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_List = PS["Data.List"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Apply = PS["Control.Apply"];
	  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
	  var optional = function (p) {
	      return Control_Alt["<|>"](Text_Parsing_StringParser.altParser)(Prelude[">>="](Text_Parsing_StringParser.bindParser)(p)(function (_18) {
	          return Prelude["return"](Text_Parsing_StringParser.applicativeParser)(Prelude.unit);
	      }))(Prelude["return"](Text_Parsing_StringParser.applicativeParser)(Prelude.unit));
	  };
	  var many = function (_19) {
	      return new Text_Parsing_StringParser.Parser(function (s) {
	          return function (fc) {
	              return function (sc) {
	                  return $foreign._many(_19.value0)(s)(fc)(function (_41) {
	                      return sc(Data_List.toList(Data_Foldable.foldableArray)(_41));
	                  });
	              };
	          };
	      });
	  };
	  var many1 = function (p) {
	      return Prelude.bind(Text_Parsing_StringParser.bindParser)(p)(function (_1) {
	          return Prelude.bind(Text_Parsing_StringParser.bindParser)(many(p))(function (_0) {
	              return Prelude["return"](Text_Parsing_StringParser.applicativeParser)(new Data_List.Cons(_1, _0));
	          });
	      });
	  };
	  exports["optional"] = optional;
	  exports["many1"] = many1;
	  exports["many"] = many;;
	 
	})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_String = PS["Data.String"];
	  var Data_Char = PS["Data.Char"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
	  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
	  var Data_String_Regex = PS["Data.String.Regex"];
	  var Data_List = PS["Data.List"];
	  var Data_Monoid = PS["Data.Monoid"];     
	  var string = function (nt) {
	      return new Text_Parsing_StringParser.Parser(function (s) {
	          return function (fc) {
	              return function (sc) {
	                  if (Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqInt))(Data_String["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
	                      return sc(nt)({
	                          str: s.str, 
	                          pos: s.pos + Data_String.length(nt) | 0
	                      });
	                  };
	                  return fc(s.pos)(Text_Parsing_StringParser.ParseError.create("Expected '" + (nt + "'.")));
	              };
	          };
	      });
	  };
	  var eof = new Text_Parsing_StringParser.Parser(function (s) {
	      return function (fc) {
	          return function (sc) {
	              if (s.pos < Data_String.length(s.str)) {
	                  return fc(s.pos)(new Text_Parsing_StringParser.ParseError("Expected EOF"));
	              };
	              return sc(Prelude.unit)(s);
	          };
	      };
	  });  
	  var anyChar = new Text_Parsing_StringParser.Parser(function (s) {
	      return function (fc) {
	          return function (sc) {
	              var _18 = Data_String.charAt(s.pos)(s.str);
	              if (_18 instanceof Data_Maybe.Just) {
	                  return sc(_18.value0)({
	                      str: s.str, 
	                      pos: s.pos + 1 | 0
	                  });
	              };
	              if (_18 instanceof Data_Maybe.Nothing) {
	                  return fc(s.pos)(new Text_Parsing_StringParser.ParseError("Unexpected EOF"));
	              };
	              throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 35, column 1 - line 36, column 1: " + [ _18.constructor.name ]);
	          };
	      };
	  });
	  var satisfy = function (f) {
	      return Text_Parsing_StringParser["try"](Prelude.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (_1) {
	          var _23 = f(_1);
	          if (_23) {
	              return Prelude["return"](Text_Parsing_StringParser.applicativeParser)(_1);
	          };
	          if (!_23) {
	              return Text_Parsing_StringParser.fail("Character " + (Data_Char.toString(_1) + " did not satisfy predicate"));
	          };
	          throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 61, column 1 - line 62, column 1: " + [ _23.constructor.name ]);
	      }));
	  };
	  var noneOf = function (__dict_Foldable_0) {
	      return function (_25) {
	          return satisfy(Prelude.flip(Data_Foldable.notElem(__dict_Foldable_0)(Prelude.eqChar))(_25));
	      };
	  };
	  exports["noneOf"] = noneOf;
	  exports["satisfy"] = satisfy;
	  exports["string"] = string;
	  exports["anyChar"] = anyChar;
	  exports["eof"] = eof;;
	 
	})(PS["Text.Parsing.StringParser.String"] = PS["Text.Parsing.StringParser.String"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_List = PS["Data.List"];
	  var Data_String = PS["Data.String"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Control_Alt = PS["Control.Alt"];
	  var Control_Apply = PS["Control.Apply"];
	  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
	  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];
	  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
	  var Data_Unfoldable = PS["Data.Unfoldable"];     
	  var notEndOfLine = Text_Parsing_StringParser_String.satisfy(function (c) {
	      return Prelude["/="](Prelude.eqChar)(c)("\r") && Prelude["/="](Prelude.eqChar)(c)("\n");
	  });
	  var untilNewline = Prelude["<$>"](Text_Parsing_StringParser.functorParser)(function (_25) {
	      return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(_25));
	  })(Text_Parsing_StringParser_Combinators.many(notEndOfLine));
	  var value = Prelude["<$>"](Text_Parsing_StringParser.functorParser)(function (_26) {
	      return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(_26));
	  })(Text_Parsing_StringParser_Combinators.many1(notEndOfLine));
	  var newline = Control_Alt["<|>"](Text_Parsing_StringParser.altParser)(Control_Alt["<|>"](Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](Text_Parsing_StringParser_String.string("\r\n")))(Text_Parsing_StringParser_String.string("\r")))(Text_Parsing_StringParser_String.string("\n"));
	  var nameToIndex = function (note) {
	      if (note === "c-1") {
	          return 0;
	      };
	      if (note === "c#-1") {
	          return 1;
	      };
	      if (note === "d-1") {
	          return 2;
	      };
	      if (note === "d#-1") {
	          return 3;
	      };
	      if (note === "e-1") {
	          return 4;
	      };
	      if (note === "f-1") {
	          return 5;
	      };
	      if (note === "f#-1") {
	          return 6;
	      };
	      if (note === "g-1") {
	          return 7;
	      };
	      if (note === "g#-1") {
	          return 8;
	      };
	      if (note === "a-1") {
	          return 9;
	      };
	      if (note === "a#-1") {
	          return 10;
	      };
	      if (note === "b-1") {
	          return 11;
	      };
	      if (note === "c0") {
	          return 12;
	      };
	      if (note === "c#0") {
	          return 13;
	      };
	      if (note === "d0") {
	          return 14;
	      };
	      if (note === "d#0") {
	          return 15;
	      };
	      if (note === "e0") {
	          return 16;
	      };
	      if (note === "f0") {
	          return 16;
	      };
	      if (note === "f#0") {
	          return 18;
	      };
	      if (note === "g0") {
	          return 19;
	      };
	      if (note === "g#0") {
	          return 20;
	      };
	      if (note === "a0") {
	          return 21;
	      };
	      if (note === "a#0") {
	          return 22;
	      };
	      if (note === "b0") {
	          return 23;
	      };
	      if (note === "c1") {
	          return 24;
	      };
	      if (note === "c#1") {
	          return 25;
	      };
	      if (note === "d1") {
	          return 26;
	      };
	      if (note === "d#1") {
	          return 27;
	      };
	      if (note === "e1") {
	          return 28;
	      };
	      if (note === "f1") {
	          return 29;
	      };
	      if (note === "f#1") {
	          return 30;
	      };
	      if (note === "g1") {
	          return 31;
	      };
	      if (note === "g#1") {
	          return 32;
	      };
	      if (note === "a1") {
	          return 33;
	      };
	      if (note === "a#1") {
	          return 34;
	      };
	      if (note === "b1") {
	          return 35;
	      };
	      if (note === "c2") {
	          return 36;
	      };
	      if (note === "c#2") {
	          return 37;
	      };
	      if (note === "d2") {
	          return 38;
	      };
	      if (note === "d#2") {
	          return 39;
	      };
	      if (note === "e2") {
	          return 40;
	      };
	      if (note === "f2") {
	          return 41;
	      };
	      if (note === "f#2") {
	          return 42;
	      };
	      if (note === "g2") {
	          return 43;
	      };
	      if (note === "g#2") {
	          return 44;
	      };
	      if (note === "a2") {
	          return 45;
	      };
	      if (note === "a#2") {
	          return 46;
	      };
	      if (note === "b2") {
	          return 47;
	      };
	      if (note === "c3") {
	          return 48;
	      };
	      if (note === "c#3") {
	          return 49;
	      };
	      if (note === "d3") {
	          return 50;
	      };
	      if (note === "d#3") {
	          return 51;
	      };
	      if (note === "e3") {
	          return 52;
	      };
	      if (note === "f3") {
	          return 53;
	      };
	      if (note === "f#3") {
	          return 54;
	      };
	      if (note === "g3") {
	          return 55;
	      };
	      if (note === "g#3") {
	          return 56;
	      };
	      if (note === "a3") {
	          return 57;
	      };
	      if (note === "a#3") {
	          return 58;
	      };
	      if (note === "b3") {
	          return 59;
	      };
	      if (note === "c4") {
	          return 60;
	      };
	      if (note === "c#4") {
	          return 61;
	      };
	      if (note === "d4") {
	          return 62;
	      };
	      if (note === "d#4") {
	          return 63;
	      };
	      if (note === "e4") {
	          return 64;
	      };
	      if (note === "f4") {
	          return 65;
	      };
	      if (note === "f#4") {
	          return 66;
	      };
	      if (note === "g4") {
	          return 67;
	      };
	      if (note === "g#4") {
	          return 68;
	      };
	      if (note === "a4") {
	          return 69;
	      };
	      if (note === "a#4") {
	          return 70;
	      };
	      if (note === "b4") {
	          return 71;
	      };
	      if (note === "c5") {
	          return 72;
	      };
	      if (note === "c#5") {
	          return 73;
	      };
	      if (note === "d5") {
	          return 74;
	      };
	      if (note === "d#5") {
	          return 75;
	      };
	      if (note === "e5") {
	          return 76;
	      };
	      if (note === "f5") {
	          return 77;
	      };
	      if (note === "f#5") {
	          return 78;
	      };
	      if (note === "g5") {
	          return 79;
	      };
	      if (note === "g#5") {
	          return 80;
	      };
	      if (note === "a5") {
	          return 81;
	      };
	      if (note === "a#5") {
	          return 82;
	      };
	      if (note === "b5") {
	          return 83;
	      };
	      if (note === "c6") {
	          return 84;
	      };
	      if (note === "c#6") {
	          return 85;
	      };
	      if (note === "d6") {
	          return 86;
	      };
	      if (note === "d#6") {
	          return 87;
	      };
	      if (note === "e6") {
	          return 88;
	      };
	      if (note === "f6") {
	          return 89;
	      };
	      if (note === "f#6") {
	          return 90;
	      };
	      if (note === "g6") {
	          return 91;
	      };
	      if (note === "g#6") {
	          return 92;
	      };
	      if (note === "a6") {
	          return 93;
	      };
	      if (note === "a#6") {
	          return 94;
	      };
	      if (note === "b6") {
	          return 95;
	      };
	      if (note === "c7") {
	          return 96;
	      };
	      if (note === "c#7") {
	          return 97;
	      };
	      if (note === "d7") {
	          return 98;
	      };
	      if (note === "d#7") {
	          return 99;
	      };
	      if (note === "e7") {
	          return 100;
	      };
	      if (note === "f7") {
	          return 101;
	      };
	      if (note === "f#7") {
	          return 102;
	      };
	      if (note === "g7") {
	          return 103;
	      };
	      if (note === "g#7") {
	          return 104;
	      };
	      if (note === "a7") {
	          return 105;
	      };
	      if (note === "a#7") {
	          return 106;
	      };
	      if (note === "b7") {
	          return 107;
	      };
	      if (note === "c8") {
	          return 108;
	      };
	      if (note === "c#8") {
	          return 109;
	      };
	      if (note === "d8") {
	          return 110;
	      };
	      if (note === "d#8") {
	          return 111;
	      };
	      if (note === "e8") {
	          return 112;
	      };
	      if (note === "f8") {
	          return 113;
	      };
	      if (note === "f#8") {
	          return 114;
	      };
	      if (note === "g8") {
	          return 115;
	      };
	      if (note === "g#8") {
	          return 116;
	      };
	      if (note === "a8") {
	          return 117;
	      };
	      if (note === "a#8") {
	          return 118;
	      };
	      if (note === "b8") {
	          return 119;
	      };
	      if (note === "c9") {
	          return 120;
	      };
	      if (note === "c#9") {
	          return 121;
	      };
	      if (note === "d9") {
	          return 122;
	      };
	      if (note === "d#9") {
	          return 123;
	      };
	      if (note === "e9") {
	          return 124;
	      };
	      if (note === "f9") {
	          return 125;
	      };
	      if (note === "f#9") {
	          return 126;
	      };
	      if (note === "g9") {
	          return 127;
	      };
	      return 60;
	  };
	  var regionIndex = function (sfz) {
	      return function (keyIndex) {
	          return Data_List.findIndex(function (region) {
	              return Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup("lokey")(region))(function (_7) {
	                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup("hikey")(region))(function (_6) {
	                      return Prelude.pure(Data_Maybe.applicativeMaybe)(nameToIndex(_7) <= keyIndex && keyIndex <= nameToIndex(_6));
	                  });
	              }));
	          })(sfz);
	      };
	  };
	  var lineComment = Prelude["void"](Text_Parsing_StringParser.functorParser)(Prelude.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("//"))(function () {
	      return Prelude.bind(Text_Parsing_StringParser.bindParser)(untilNewline)(function () {
	          return newline;
	      });
	  }));
	  var keyCenter = function (sfz) {
	      return function (i) {
	          return Prelude.bind(Data_Maybe.bindMaybe)(Data_List.index(sfz)(i))(function (_8) {
	              return Control_Alt["<|>"](Data_Maybe.altMaybe)(Data_StrMap.lookup("pitch_keycenter")(_8))(Prelude.pure(Data_Maybe.applicativeMaybe)("c4"));
	          });
	      };
	  };
	  var key = Prelude["<$>"](Text_Parsing_StringParser.functorParser)(function (_27) {
	      return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(_27));
	  })(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_String.noneOf(Data_Foldable.foldableArray)([ "=", "\r", "\n", "<" ])));
	  var hasNote = function (sfz) {
	      return function (keyIndex) {
	          return Data_Foldable.any(Data_List.foldableList)(Prelude.booleanAlgebraBoolean)(function (region) {
	              return Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup("lokey")(region))(function (_5) {
	                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup("hikey")(region))(function (_4) {
	                      return Prelude.pure(Data_Maybe.applicativeMaybe)(nameToIndex(_5) <= keyIndex && keyIndex <= nameToIndex(_4));
	                  });
	              }));
	          })(sfz);
	      };
	  };
	  var flattenSFZ = function (sfz) {
	      return Data_List.concatMap(function (g) {
	          return Prelude.map(Data_List.functorList)(function (regions) {
	              return Data_StrMap.fromList(Prelude["++"](Data_List.semigroupList)(regions)(g.pairs));
	          })(g.regions);
	      })(sfz);
	  };
	  var findBuffer = function (sfz) {
	      return function (dir) {
	          return function (strMap) {
	              return function (i) {
	                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_List.index(sfz)(i))(function (_11) {
	                      return Prelude.bind(Data_Maybe.bindMaybe)(Control_Alt["<|>"](Data_Maybe.altMaybe)(Data_StrMap.lookup("pitch_keycenter")(_11))(Prelude.pure(Data_Maybe.applicativeMaybe)("c4")))(function (_10) {
	                          return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup("sample")(_11))(function (_9) {
	                              return Data_StrMap.lookup(dir + Data_String.replace("#")("%23")(_9))(strMap);
	                          });
	                      });
	                  });
	              };
	          };
	      };
	  };                                                                                                                                                                                                                                                
	  var $$break = Prelude["void"](Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_Combinators.many(Control_Alt["<|>"](Text_Parsing_StringParser.altParser)(Prelude["void"](Text_Parsing_StringParser.functorParser)(newline))(lineComment)));
	  var line = function (parser) {
	      return Prelude.bind(Text_Parsing_StringParser.bindParser)(parser)(function (_0) {
	          return Prelude.bind(Text_Parsing_StringParser.bindParser)($$break)(function () {
	              return Prelude.pure(Text_Parsing_StringParser.applicativeParser)(_0);
	          });
	      });
	  };
	  var pairs = Text_Parsing_StringParser_Combinators.many1(line(Prelude["<*>"](Text_Parsing_StringParser.applyParser)(Control_Apply["<*"](Text_Parsing_StringParser.applyParser)(Prelude["<$>"](Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)(key))(Text_Parsing_StringParser_String.string("=")))(value)));
	  var group = Prelude.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.optional(line(Text_Parsing_StringParser_String.string("<group>"))))(function () {
	      return Prelude.bind(Text_Parsing_StringParser.bindParser)(pairs)(function (_2) {
	          return Prelude.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many1(Prelude.bind(Text_Parsing_StringParser.bindParser)(line(Text_Parsing_StringParser_String.string("<region>")))(function () {
	              return pairs;
	          })))(function (_1) {
	              return Prelude.pure(Text_Parsing_StringParser.applicativeParser)({
	                  pairs: _2, 
	                  regions: _1
	              });
	          });
	      });
	  });
	  var soundFont = Prelude.bind(Text_Parsing_StringParser.bindParser)($$break)(function () {
	      return Prelude.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many1(group))(function (_3) {
	          return Prelude.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.eof)(function () {
	              return Prelude.pure(Text_Parsing_StringParser.applicativeParser)(_3);
	          });
	      });
	  });
	  var parseSFZ = function (source) {
	      return Text_Parsing_StringParser.unParser(soundFont)({
	          str: source, 
	          pos: 0
	      })(function (pos) {
	          return function (err) {
	              return new Data_Either.Left({
	                  pos: pos, 
	                  err: err
	              });
	          };
	      })(function (result) {
	          return function (pos) {
	              return new Data_Either.Right(result);
	          };
	      });
	  };
	  exports["hasNote"] = hasNote;
	  exports["keyCenter"] = keyCenter;
	  exports["findBuffer"] = findBuffer;
	  exports["regionIndex"] = regionIndex;
	  exports["flattenSFZ"] = flattenSFZ;
	  exports["nameToIndex"] = nameToIndex;
	  exports["parseSFZ"] = parseSFZ;;
	 
	})(PS["SoundFont"] = PS["SoundFont"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var $eq$minus$eq = function (p) {
	      return function (q) {
	          return {
	              x: p.x - q.x, 
	              y: p.y - q.y
	          };
	      };
	  };
	  var $eq$plus$eq = function (p) {
	      return function (q) {
	          return {
	              x: p.x + q.x, 
	              y: p.y + q.y
	          };
	      };
	  };
	  var $dot$times$eq = function (t) {
	      return function (p) {
	          return {
	              x: t * p.x, 
	              y: t * p.y
	          };
	      };
	  };
	  exports[".*="] = $dot$times$eq;
	  exports["=-="] = $eq$minus$eq;
	  exports["=+="] = $eq$plus$eq;;
	 
	})(PS["Soundknot.Linear"] = PS["Soundknot.Linear"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_List = PS["Data.List"];
	  var undoable = function (_4) {
	      return !Data_List["null"](_4.undoList);
	  };
	  var undoList = function (_7) {
	      return _7.undoList;
	  };
	  var undo = function (_1) {
	      if (_1.undoList instanceof Data_List.Nil) {
	          return _1;
	      };
	      if (_1.undoList instanceof Data_List.Cons) {
	          var _13 = {};
	          for (var _14 in _1) {
	              if (_1.hasOwnProperty(_14)) {
	                  _13[_14] = _1[_14];
	              };
	          };
	          _13.state = _1.undoList.value0;
	          _13.undoList = _1.undoList.value1;
	          _13.redoList = Data_List[":"](_1.state)(_1.redoList);
	          return _13;
	      };
	      throw new Error("Failed pattern match at Soundknot.Historical line 25, column 1 - line 26, column 1: " + [ _1.undoList.constructor.name ]);
	  };
	  var runHistorical = function (_0) {
	      return _0.state;
	  };
	  var redoable = function (_5) {
	      return !Data_List["null"](_5.redoList);
	  };
	  var redoList = function (_8) {
	      return _8.redoList;
	  };
	  var redo = function (_2) {
	      if (_2.redoList instanceof Data_List.Nil) {
	          return _2;
	      };
	      if (_2.redoList instanceof Data_List.Cons) {
	          var _22 = {};
	          for (var _23 in _2) {
	              if (_2.hasOwnProperty(_23)) {
	                  _22[_23] = _2[_23];
	              };
	          };
	          _22.state = _2.redoList.value0;
	          _22.undoList = Data_List[":"](_2.state)(_2.undoList);
	          _22.redoList = _2.redoList.value1;
	          return _22;
	      };
	      throw new Error("Failed pattern match at Soundknot.Historical line 34, column 1 - line 35, column 1: " + [ _2.redoList.constructor.name ]);
	  };
	  var record = function (__dict_Eq_0) {
	      return function (_3) {
	          return function (next) {
	              if (Prelude.otherwise) {
	                  var _28 = {};
	                  for (var _29 in _3) {
	                      if (_3.hasOwnProperty(_29)) {
	                          _28[_29] = _3[_29];
	                      };
	                  };
	                  _28.state = next;
	                  _28.undoList = Data_List[":"](_3.state)(_3.undoList);
	                  _28.redoList = Data_List.Nil.value;
	                  return _28;
	              };
	              throw new Error("Failed pattern match at Soundknot.Historical line 43, column 1 - line 45, column 1: " + [ _3.constructor.name, next.constructor.name ]);
	          };
	      };
	  };
	  var overwrite = function (_6) {
	      return function (x) {
	          var _32 = {};
	          for (var _33 in _6) {
	              if (_6.hasOwnProperty(_33)) {
	                  _32[_33] = _6[_33];
	              };
	          };
	          _32.state = x;
	          return _32;
	      };
	  };
	  var historical = function (h) {
	      return {
	          state: h, 
	          undoList: Data_List.Nil.value, 
	          redoList: Data_List.Nil.value
	      };
	  };
	  exports["redoList"] = redoList;
	  exports["undoList"] = undoList;
	  exports["overwrite"] = overwrite;
	  exports["record"] = record;
	  exports["redoable"] = redoable;
	  exports["undoable"] = undoable;
	  exports["redo"] = redo;
	  exports["undo"] = undo;
	  exports["runHistorical"] = runHistorical;
	  exports["historical"] = historical;;
	 
	})(PS["Soundknot.Historical"] = PS["Soundknot.Historical"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $$Math = PS["Math"];
	  var Data_Ord = PS["Data.Ord"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Int = PS["Data.Int"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var WebAudio = PS["WebAudio"];
	  var Data_Either = PS["Data.Either"];
	  var Seconds = function (x) {
	      return x;
	  };
	  var Beats = function (x) {
	      return x;
	  };
	  var SampledAudioTrack = (function () {
	      function SampledAudioTrack(value0) {
	          this.value0 = value0;
	      };
	      SampledAudioTrack.create = function (value0) {
	          return new SampledAudioTrack(value0);
	      };
	      return SampledAudioTrack;
	  })();
	  var SequencerTrack = (function () {
	      function SequencerTrack(value0) {
	          this.value0 = value0;
	      };
	      SequencerTrack.create = function (value0) {
	          return new SequencerTrack(value0);
	      };
	      return SequencerTrack;
	  })();                                          
	  var timelineInitialState = {
	      bpm: 120.0, 
	      tracks: [ {
	          name: "", 
	          solo: false, 
	          mute: false, 
	          selected: false, 
	          content: new SampledAudioTrack({
	              clips: [  ]
	          })
	      } ], 
	      markers: [ {
	          name: "start", 
	          position: 0.0
	      }, {
	          name: "end", 
	          position: 8.0
	      } ], 
	      translation: -2.0, 
	      scale: 16, 
	      width: 640, 
	      cursor: 0.0, 
	      start: Data_Nullable.toNullable(Data_Maybe.Nothing.value), 
	      scrolling: false, 
	      mouseDownPoint: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
	  };
	  var secondsToIndex = function (sampleRate) {
	      return function (_5) {
	          return Data_Int.floor(_5 * sampleRate);
	      };
	  };
	  var secondsToBeats = function (bpm) {
	      return function (_4) {
	          return (bpm / 60.0) * _4;
	      };
	  };
	  var runSeconds = function (_1) {
	      return _1;
	  };
	  var runBeats = function (_2) {
	      return _2;
	  };
	  var readTimeline = function (value) {
	      return Prelude.pure(Data_Either.applicativeEither)(Unsafe_Coerce.unsafeCoerce(value));
	  };
	  var indexToSeconds = function (sampleRate) {
	      return function (index) {
	          return Data_Int.toNumber(index) / sampleRate;
	      };
	  };
	  var eq_Beats = new Prelude.Eq(function (_8) {
	      return function (_9) {
	          return Prelude.eq(Prelude.eqNumber)(_8)(_9);
	      };
	  });
	  var ord_Beats = new Prelude.Ord(function () {
	      return eq_Beats;
	  }, function (_10) {
	      return function (_11) {
	          return Prelude.compare(Prelude.ordNumber)(_10)(_11);
	      };
	  });
	  var clipLength = function (sampleRate) {
	      return function (table) {
	          return function (bpm) {
	              return function (clip) {
	                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
	                      return function (y) {
	                          return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($$Math.max)(x))(y);
	                      };
	                  })(new Data_Maybe.Just(0.0))(Prelude.map(Prelude.functorArray)(function (slice) {
	                      var _24 = Data_Nullable.toMaybe(slice.length);
	                      if (_24 instanceof Data_Maybe.Nothing) {
	                          var _25 = Data_StrMap.lookup(slice.buffer)(table);
	                          if (_25 instanceof Data_Maybe.Nothing) {
	                              return Data_Maybe.Nothing.value;
	                          };
	                          if (_25 instanceof Data_Maybe.Just) {
	                              return Data_Maybe.Just.create(runSeconds(indexToSeconds(sampleRate)((Unsafe_Coerce.unsafeCoerce(_25.value0)).length)));
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Types line 155, column 1 - line 156, column 1: " + [ _25.constructor.name ]);
	                      };
	                      if (_24 instanceof Data_Maybe.Just) {
	                          return new Data_Maybe.Just(runSeconds(slice.offset) + runSeconds(_24.value0));
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Types line 155, column 1 - line 156, column 1: " + [ _24.constructor.name ]);
	                  })(clip.slices));
	              };
	          };
	      };
	  };
	  var clampScale = function (s) {
	      return Data_Ord.max(Prelude.ordInt)(0)(Data_Ord.min(Prelude.ordInt)(50)(s));
	  };
	  var beatsToSeconds = function (bpm) {
	      return function (_3) {
	          return _3 / (bpm / 60.0);
	      };
	  };
	  var audioClipLengthInSeconds = function (sampleRate) {
	      return function (table) {
	          return function (clip) {
	              var ms = Prelude.map(Prelude.functorArray)(function (slice) {
	                  var _30 = Data_Nullable.toMaybe(slice.length);
	                  if (_30 instanceof Data_Maybe.Just) {
	                      return new Data_Maybe.Just(runSeconds(slice.offset) + runSeconds(_30.value0));
	                  };
	                  if (_30 instanceof Data_Maybe.Nothing) {
	                      return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(slice.buffer)(table))(function (_0) {
	                          return Prelude.pure(Data_Maybe.applicativeMaybe)(runSeconds(slice.offset) + Data_Int.toNumber(WebAudio_Core.audioBufferLength(_0)) / sampleRate);
	                      });
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Types line 216, column 5 - line 217, column 5: " + [ _30.constructor.name ]);
	              })(clip.slices);
	              var appendMaybes = function (_12) {
	                  return function (_13) {
	                      if (_12 instanceof Data_Maybe.Just && _13 instanceof Data_Maybe.Just) {
	                          return new Data_Maybe.Just($$Math.max(_12.value0)(_13.value0));
	                      };
	                      return Data_Maybe.Nothing.value;
	                  };
	              };
	              return Data_Foldable.foldr(Data_Foldable.foldableArray)(appendMaybes)(new Data_Maybe.Just(0.0))(ms);
	          };
	      };
	  };
	  var addSeconds = function (_6) {
	      return function (_7) {
	          return _6 + _7;
	      };
	  };
	  exports["SampledAudioTrack"] = SampledAudioTrack;
	  exports["SequencerTrack"] = SequencerTrack;
	  exports["Beats"] = Beats;
	  exports["Seconds"] = Seconds;
	  exports["audioClipLengthInSeconds"] = audioClipLengthInSeconds;
	  exports["readTimeline"] = readTimeline;
	  exports["clampScale"] = clampScale;
	  exports["clipLength"] = clipLength;
	  exports["addSeconds"] = addSeconds;
	  exports["indexToSeconds"] = indexToSeconds;
	  exports["secondsToIndex"] = secondsToIndex;
	  exports["secondsToBeats"] = secondsToBeats;
	  exports["beatsToSeconds"] = beatsToSeconds;
	  exports["runBeats"] = runBeats;
	  exports["runSeconds"] = runSeconds;
	  exports["timelineInitialState"] = timelineInitialState;
	  exports["eq_Beats"] = eq_Beats;
	  exports["ord_Beats"] = ord_Beats;;
	 
	})(PS["Soundknot.UI.Timeline.Types"] = PS["Soundknot.UI.Timeline.Types"] || {});
	(function(exports) {
	  /* global exports */
	  /* global XMLHttpRequest */
	  /* global module */
	  "use strict";

	  // module Network.HTTP.Affjax

	  // jshint maxparams: 5
	  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
	    var platformSpecific = { };
	    if (typeof module !== "undefined" && module.require) {
	      // We are on node.js
	      platformSpecific.newXHR = function () {
	        var XHR = module.require("xhr2");
	        return new XHR();
	      };

	      platformSpecific.fixupUrl = function (url) {
	        var urllib = module.require("url");
	        var u = urllib.parse(url);
	        u.protocol = u.protocol || "http:";
	        u.hostname = u.hostname || "localhost";
	        return urllib.format(u);
	      };

	      platformSpecific.getResponse = function (xhr) {
	        return xhr.response;
	      };
	    } else {
	      // We are in the browser
	      platformSpecific.newXHR = function () {
	        return new XMLHttpRequest();
	      };

	      platformSpecific.fixupUrl = function (url) {
	        return url || "/";
	      };

	      platformSpecific.getResponse = function (xhr) {
	        return xhr.response;
	      };
	    }

	    return function () {
	      var xhr = platformSpecific.newXHR();
	      var fixedUrl = platformSpecific.fixupUrl(options.url);
	      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
	      if (options.headers) {
	        for (var i = 0, header; (header = options.headers[i]) != null; i++) {
	          xhr.setRequestHeader(header.field, header.value);
	        }
	      }
	      xhr.onerror = function () {
	        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
	      };
	      xhr.onload = function () {
	        callback({
	          status: xhr.status,
	          headers: xhr.getAllResponseHeaders().split("\n")
	            .filter(function (header) {
	              return header.length > 0;
	            })
	            .map(function (header) {
	              var i = header.indexOf(":");
	              return mkHeader(header.substring(0, i))(header.substring(i + 2));
	            }),
	          response: platformSpecific.getResponse(xhr)
	        })();
	      };
	      xhr.responseType = options.responseType;
	      xhr.send(options.content);
	      return canceler(xhr);
	    };
	  };

	  // jshint maxparams: 4
	  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
	    return function () {
	      try { xhr.abort(); } catch (e) { return callback(false)(); }
	      return callback(true)();
	    };
	  };

	 
	})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var mimeTypeToString = function (_0) {
	      return _0;
	  };
	  exports["mimeTypeToString"] = mimeTypeToString;;
	 
	})(PS["Network.HTTP.MimeType"] = PS["Network.HTTP.MimeType"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  var DOM_XHR_Types = PS["DOM.XHR.Types"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
	  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
	  var Requestable = function (toRequest) {
	      this.toRequest = toRequest;
	  };
	  var toRequest = function (dict) {
	      return dict.toRequest;
	  }; 
	  var defaultToRequest = function (_0) {
	      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce(_0));
	  };                                                                   
	  var requestableUnit = new Requestable(defaultToRequest);
	  exports["Requestable"] = Requestable;
	  exports["toRequest"] = toRequest;
	  exports["requestableUnit"] = requestableUnit;;
	 
	})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Control_Bind = PS["Control.Bind"];
	  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
	  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
	  var ArrayBufferResponse = (function () {
	      function ArrayBufferResponse() {

	      };
	      ArrayBufferResponse.value = new ArrayBufferResponse();
	      return ArrayBufferResponse;
	  })();
	  var BlobResponse = (function () {
	      function BlobResponse() {

	      };
	      BlobResponse.value = new BlobResponse();
	      return BlobResponse;
	  })();
	  var DocumentResponse = (function () {
	      function DocumentResponse() {

	      };
	      DocumentResponse.value = new DocumentResponse();
	      return DocumentResponse;
	  })();
	  var JSONResponse = (function () {
	      function JSONResponse() {

	      };
	      JSONResponse.value = new JSONResponse();
	      return JSONResponse;
	  })();
	  var StringResponse = (function () {
	      function StringResponse() {

	      };
	      StringResponse.value = new StringResponse();
	      return StringResponse;
	  })();
	  var Respondable = function (fromResponse, responseType) {
	      this.fromResponse = fromResponse;
	      this.responseType = responseType;
	  }; 
	  var responseTypeToString = function (_0) {
	      if (_0 instanceof ArrayBufferResponse) {
	          return "arraybuffer";
	      };
	      if (_0 instanceof BlobResponse) {
	          return "blob";
	      };
	      if (_0 instanceof DocumentResponse) {
	          return "document";
	      };
	      if (_0 instanceof JSONResponse) {
	          return "text";
	      };
	      if (_0 instanceof StringResponse) {
	          return "text";
	      };
	      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 52, column 1 - line 53, column 1: " + [ _0.constructor.name ]);
	  };
	  var responseType = function (dict) {
	      return dict.responseType;
	  };                                                                                                                                                                 
	  var responsableString = new Respondable(Data_Foreign.readString, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));          
	  var responsableArrayBuffer = new Respondable(Data_Foreign.unsafeReadTagged("ArrayBuffer"), new Data_Tuple.Tuple(Data_Maybe.Nothing.value, ArrayBufferResponse.value));
	  var fromResponse = function (dict) {
	      return dict.fromResponse;
	  };
	  exports["ArrayBufferResponse"] = ArrayBufferResponse;
	  exports["BlobResponse"] = BlobResponse;
	  exports["DocumentResponse"] = DocumentResponse;
	  exports["JSONResponse"] = JSONResponse;
	  exports["StringResponse"] = StringResponse;
	  exports["Respondable"] = Respondable;
	  exports["fromResponse"] = fromResponse;
	  exports["responseType"] = responseType;
	  exports["responseTypeToString"] = responseTypeToString;
	  exports["responsableString"] = responsableString;
	  exports["responsableArrayBuffer"] = responsableArrayBuffer;;
	 
	})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var DELETE = (function () {
	      function DELETE() {

	      };
	      DELETE.value = new DELETE();
	      return DELETE;
	  })();
	  var GET = (function () {
	      function GET() {

	      };
	      GET.value = new GET();
	      return GET;
	  })();
	  var HEAD = (function () {
	      function HEAD() {

	      };
	      HEAD.value = new HEAD();
	      return HEAD;
	  })();
	  var OPTIONS = (function () {
	      function OPTIONS() {

	      };
	      OPTIONS.value = new OPTIONS();
	      return OPTIONS;
	  })();
	  var PATCH = (function () {
	      function PATCH() {

	      };
	      PATCH.value = new PATCH();
	      return PATCH;
	  })();
	  var POST = (function () {
	      function POST() {

	      };
	      POST.value = new POST();
	      return POST;
	  })();
	  var PUT = (function () {
	      function PUT() {

	      };
	      PUT.value = new PUT();
	      return PUT;
	  })();
	  var MOVE = (function () {
	      function MOVE() {

	      };
	      MOVE.value = new MOVE();
	      return MOVE;
	  })();
	  var COPY = (function () {
	      function COPY() {

	      };
	      COPY.value = new COPY();
	      return COPY;
	  })();
	  var CustomMethod = (function () {
	      function CustomMethod(value0) {
	          this.value0 = value0;
	      };
	      CustomMethod.create = function (value0) {
	          return new CustomMethod(value0);
	      };
	      return CustomMethod;
	  })();
	  var showMethod = new Prelude.Show(function (_3) {
	      if (_3 instanceof DELETE) {
	          return "DELETE";
	      };
	      if (_3 instanceof GET) {
	          return "GET";
	      };
	      if (_3 instanceof HEAD) {
	          return "HEAD";
	      };
	      if (_3 instanceof OPTIONS) {
	          return "OPTIONS";
	      };
	      if (_3 instanceof PATCH) {
	          return "PATCH";
	      };
	      if (_3 instanceof POST) {
	          return "POST";
	      };
	      if (_3 instanceof PUT) {
	          return "PUT";
	      };
	      if (_3 instanceof MOVE) {
	          return "MOVE";
	      };
	      if (_3 instanceof COPY) {
	          return "COPY";
	      };
	      if (_3 instanceof CustomMethod) {
	          return "(CustomMethod " + (Prelude.show(Prelude.showString)(_3.value0) + ")");
	      };
	      throw new Error("Failed pattern match at Network.HTTP.Method line 29, column 1 - line 41, column 1: " + [ _3.constructor.name ]);
	  });
	  var methodToString = function (_0) {
	      if (_0 instanceof CustomMethod) {
	          return _0.value0;
	      };
	      return Prelude.show(showMethod)(_0);
	  };
	  exports["DELETE"] = DELETE;
	  exports["GET"] = GET;
	  exports["HEAD"] = HEAD;
	  exports["OPTIONS"] = OPTIONS;
	  exports["PATCH"] = PATCH;
	  exports["POST"] = POST;
	  exports["PUT"] = PUT;
	  exports["MOVE"] = MOVE;
	  exports["COPY"] = COPY;
	  exports["CustomMethod"] = CustomMethod;
	  exports["methodToString"] = methodToString;
	  exports["showMethod"] = showMethod;;
	 
	})(PS["Network.HTTP.Method"] = PS["Network.HTTP.Method"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];     
	  var Accept = (function () {
	      function Accept(value0) {
	          this.value0 = value0;
	      };
	      Accept.create = function (value0) {
	          return new Accept(value0);
	      };
	      return Accept;
	  })();
	  var ContentType = (function () {
	      function ContentType(value0) {
	          this.value0 = value0;
	      };
	      ContentType.create = function (value0) {
	          return new ContentType(value0);
	      };
	      return ContentType;
	  })();
	  var RequestHeader = (function () {
	      function RequestHeader(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      RequestHeader.create = function (value0) {
	          return function (value1) {
	              return new RequestHeader(value0, value1);
	          };
	      };
	      return RequestHeader;
	  })();
	  var requestHeaderValue = function (_1) {
	      if (_1 instanceof Accept) {
	          return Network_HTTP_MimeType.mimeTypeToString(_1.value0);
	      };
	      if (_1 instanceof ContentType) {
	          return Network_HTTP_MimeType.mimeTypeToString(_1.value0);
	      };
	      if (_1 instanceof RequestHeader) {
	          return _1.value1;
	      };
	      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 28, column 1 - line 29, column 1: " + [ _1.constructor.name ]);
	  };
	  var requestHeaderName = function (_0) {
	      if (_0 instanceof Accept) {
	          return "Accept";
	      };
	      if (_0 instanceof ContentType) {
	          return "Content-Type";
	      };
	      if (_0 instanceof RequestHeader) {
	          return _0.value0;
	      };
	      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 23, column 1 - line 24, column 1: " + [ _0.constructor.name ]);
	  };
	  exports["Accept"] = Accept;
	  exports["ContentType"] = ContentType;
	  exports["RequestHeader"] = RequestHeader;
	  exports["requestHeaderValue"] = requestHeaderValue;
	  exports["requestHeaderName"] = requestHeaderName;;
	 
	})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];     
	  var ResponseHeader = (function () {
	      function ResponseHeader(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      ResponseHeader.create = function (value0) {
	          return function (value1) {
	              return new ResponseHeader(value0, value1);
	          };
	      };
	      return ResponseHeader;
	  })();
	  var responseHeader = function (field) {
	      return function (value) {
	          return new ResponseHeader(field, value);
	      };
	  };
	  exports["responseHeader"] = responseHeader;;
	 
	})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Network.HTTP.Affjax"];
	  var Prelude = PS["Prelude"];
	  var Control_Bind = PS["Control.Bind"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
	  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Function = PS["Data.Function"];
	  var Data_Int = PS["Data.Int"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var $$Math = PS["Math"];
	  var DOM_XHR_Types = PS["DOM.XHR.Types"];
	  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
	  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
	  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
	  var Network_HTTP_Method = PS["Network.HTTP.Method"];
	  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
	  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
	  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
	  var defaultRequest = {
	      method: Network_HTTP_Method.GET.value, 
	      url: "/", 
	      headers: [  ], 
	      content: Data_Maybe.Nothing.value, 
	      username: Data_Maybe.Nothing.value, 
	      password: Data_Maybe.Nothing.value
	  };
	  var cancelAjax = function (xhr) {
	      return function (err) {
	          return Control_Monad_Aff.makeAff(function (eb) {
	              return function (cb) {
	                  return $foreign._cancelAjax(xhr, err, eb, cb);
	              };
	          });
	      };
	  };
	  var affjax$prime = function (__dict_Requestable_1) {
	      return function (__dict_Respondable_2) {
	          return function (req) {
	              return function (eb) {
	                  return function (cb) {
	                      var responseSettings = Network_HTTP_Affjax_Response.responseType(__dict_Respondable_2);
	                      var requestSettings = (function () {
	                          var _32 = Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(__dict_Requestable_1))(req.content);
	                          if (_32 instanceof Data_Maybe.Nothing) {
	                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
	                          };
	                          if (_32 instanceof Data_Maybe.Just) {
	                              return new Data_Tuple.Tuple(_32.value0.value0, new Data_Maybe.Just(_32.value0.value1));
	                          };
	                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ _32.constructor.name ]);
	                      })();
	                      var fromResponse$prime = (function () {
	                          var _36 = Data_Tuple.snd(responseSettings);
	                          if (_36 instanceof Network_HTTP_Affjax_Response.JSONResponse) {
	                              return Control_Bind["<=<"](Data_Either.bindEither)(Network_HTTP_Affjax_Response.fromResponse(__dict_Respondable_2))(Control_Bind["<=<"](Data_Either.bindEither)(Data_Foreign.parseJSON)(Data_Foreign.readString));
	                          };
	                          return Network_HTTP_Affjax_Response.fromResponse(__dict_Respondable_2);
	                      })();
	                      var cb$prime = function (res) {
	                          var _39 = Prelude["<$>"](Data_Either.functorEither)(function (_0) {
	                              var _37 = {};
	                              for (var _38 in res) {
	                                  if (res.hasOwnProperty(_38)) {
	                                      _37[_38] = res[_38];
	                                  };
	                              };
	                              _37.response = _0;
	                              return _37;
	                          })(fromResponse$prime(res.response));
	                          if (_39 instanceof Data_Either.Left) {
	                              return eb(Control_Monad_Eff_Exception.error(Prelude.show(Data_Foreign.showForeignError)(_39.value0)));
	                          };
	                          if (_39 instanceof Data_Either.Right) {
	                              return cb(_39.value0);
	                          };
	                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ _39.constructor.name ]);
	                      };
	                      var addHeader = function (h) {
	                          return function (hs) {
	                              if (h instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Function.on(Prelude.eq(Prelude.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(h.value0))(hs)) {
	                                  return Data_Array.snoc(hs)(h.value0);
	                              };
	                              return hs;
	                          };
	                      };
	                      var headers = addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
	                      var req$prime = {
	                          method: Network_HTTP_Method.methodToString(req.method), 
	                          url: req.url, 
	                          headers: Prelude["<$>"](Prelude.functorArray)(function (h) {
	                              return {
	                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
	                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
	                              };
	                          })(headers), 
	                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
	                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
	                          username: Data_Nullable.toNullable(req.username), 
	                          password: Data_Nullable.toNullable(req.password)
	                      };
	                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
	                  };
	              };
	          };
	      };
	  };
	  var affjax = function (__dict_Requestable_3) {
	      return function (__dict_Respondable_4) {
	          return function (_57) {
	              return Control_Monad_Aff["makeAff'"](affjax$prime(__dict_Requestable_3)(__dict_Respondable_4)(_57));
	          };
	      };
	  };                                                                   
	  var get = function (__dict_Respondable_6) {
	      return function (u) {
	          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(__dict_Respondable_6)((function () {
	              var _46 = {};
	              for (var _47 in defaultRequest) {
	                  if (defaultRequest.hasOwnProperty(_47)) {
	                      _46[_47] = defaultRequest[_47];
	                  };
	              };
	              _46.url = u;
	              return _46;
	          })());
	      };
	  };
	  exports["get"] = get;
	  exports["affjax"] = affjax;
	  exports["defaultRequest"] = defaultRequest;;
	 
	})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $$Math = PS["Math"];
	  var Data_Int = PS["Data.Int"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Array = PS["Data.Array"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Data_Date = PS["Data.Date"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
	  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
	  var DOM = PS["DOM"];
	  var DOM_Timer = PS["DOM.Timer"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var WebAudio = PS["WebAudio"];
	  var WebMidi = PS["WebMidi"];
	  var MediaStream = PS["MediaStream"];
	  var SoundFont = PS["SoundFont"];
	  var OpticUI = PS["OpticUI"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_UI_Timeline_Types = PS["Soundknot.UI.Timeline.Types"];
	  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
	  var WebAudio_Core = PS["WebAudio.Core"];     
	  var NewProject = (function () {
	      function NewProject() {

	      };
	      NewProject.value = new NewProject();
	      return NewProject;
	  })();
	  var ExistingProject = (function () {
	      function ExistingProject(value0) {
	          this.value0 = value0;
	      };
	      ExistingProject.create = function (value0) {
	          return new ExistingProject(value0);
	      };
	      return ExistingProject;
	  })();
	  var AudioNodeValue = (function () {
	      function AudioNodeValue() {

	      };
	      AudioNodeValue.value = new AudioNodeValue();
	      return AudioNodeValue;
	  })();
	  var AudioBufferValue = (function () {
	      function AudioBufferValue() {

	      };
	      AudioBufferValue.value = new AudioBufferValue();
	      return AudioBufferValue;
	  })();
	  var MidiValue = (function () {
	      function MidiValue() {

	      };
	      MidiValue.value = new MidiValue();
	      return MidiValue;
	  })();
	  var NoteOn = (function () {
	      function NoteOn(value0, value1, value2) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	      };
	      NoteOn.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return new NoteOn(value0, value1, value2);
	              };
	          };
	      };
	      return NoteOn;
	  })();
	  var NoteOff = (function () {
	      function NoteOff(value0, value1, value2, value3) {
	          this.value0 = value0;
	          this.value1 = value1;
	          this.value2 = value2;
	          this.value3 = value3;
	      };
	      NoteOff.create = function (value0) {
	          return function (value1) {
	              return function (value2) {
	                  return function (value3) {
	                      return new NoteOff(value0, value1, value2, value3);
	                  };
	              };
	          };
	      };
	      return NoteOff;
	  })();
	  var FileSource = (function () {
	      function FileSource(value0, value1) {
	          this.value0 = value0;
	          this.value1 = value1;
	      };
	      FileSource.create = function (value0) {
	          return function (value1) {
	              return new FileSource(value0, value1);
	          };
	      };
	      return FileSource;
	  })();
	  var URLMediaSource = (function () {
	      function URLMediaSource(value0) {
	          this.value0 = value0;
	      };
	      URLMediaSource.create = function (value0) {
	          return new URLMediaSource(value0);
	      };
	      return URLMediaSource;
	  })();
	  var DestinationFrame = (function () {
	      function DestinationFrame(value0) {
	          this.value0 = value0;
	      };
	      DestinationFrame.create = function (value0) {
	          return new DestinationFrame(value0);
	      };
	      return DestinationFrame;
	  })();
	  var GainFrame = (function () {
	      function GainFrame(value0) {
	          this.value0 = value0;
	      };
	      GainFrame.create = function (value0) {
	          return new GainFrame(value0);
	      };
	      return GainFrame;
	  })();
	  var DelayFrame = (function () {
	      function DelayFrame(value0) {
	          this.value0 = value0;
	      };
	      DelayFrame.create = function (value0) {
	          return new DelayFrame(value0);
	      };
	      return DelayFrame;
	  })();
	  var AudioBufferFrame = (function () {
	      function AudioBufferFrame(value0) {
	          this.value0 = value0;
	      };
	      AudioBufferFrame.create = function (value0) {
	          return new AudioBufferFrame(value0);
	      };
	      return AudioBufferFrame;
	  })();
	  var VideoFrame = (function () {
	      function VideoFrame(value0) {
	          this.value0 = value0;
	      };
	      VideoFrame.create = function (value0) {
	          return new VideoFrame(value0);
	      };
	      return VideoFrame;
	  })();
	  var StereoPannerFrame = (function () {
	      function StereoPannerFrame(value0) {
	          this.value0 = value0;
	      };
	      StereoPannerFrame.create = function (value0) {
	          return new StereoPannerFrame(value0);
	      };
	      return StereoPannerFrame;
	  })();
	  var ConvolverFrame = (function () {
	      function ConvolverFrame() {

	      };
	      ConvolverFrame.value = new ConvolverFrame();
	      return ConvolverFrame;
	  })();
	  var AnalyserFrame = (function () {
	      function AnalyserFrame(value0) {
	          this.value0 = value0;
	      };
	      AnalyserFrame.create = function (value0) {
	          return new AnalyserFrame(value0);
	      };
	      return AnalyserFrame;
	  })();
	  var ChannelSplitterFrame = (function () {
	      function ChannelSplitterFrame() {

	      };
	      ChannelSplitterFrame.value = new ChannelSplitterFrame();
	      return ChannelSplitterFrame;
	  })();
	  var ChannelMergerFrame = (function () {
	      function ChannelMergerFrame() {

	      };
	      ChannelMergerFrame.value = new ChannelMergerFrame();
	      return ChannelMergerFrame;
	  })();
	  var DynamicsCompressorFrame = (function () {
	      function DynamicsCompressorFrame(value0) {
	          this.value0 = value0;
	      };
	      DynamicsCompressorFrame.create = function (value0) {
	          return new DynamicsCompressorFrame(value0);
	      };
	      return DynamicsCompressorFrame;
	  })();
	  var BiquadFilterFrame = (function () {
	      function BiquadFilterFrame(value0) {
	          this.value0 = value0;
	      };
	      BiquadFilterFrame.create = function (value0) {
	          return new BiquadFilterFrame(value0);
	      };
	      return BiquadFilterFrame;
	  })();
	  var WaveShaperFrame = (function () {
	      function WaveShaperFrame(value0) {
	          this.value0 = value0;
	      };
	      WaveShaperFrame.create = function (value0) {
	          return new WaveShaperFrame(value0);
	      };
	      return WaveShaperFrame;
	  })();
	  var OscillatorFrame = (function () {
	      function OscillatorFrame(value0) {
	          this.value0 = value0;
	      };
	      OscillatorFrame.create = function (value0) {
	          return new OscillatorFrame(value0);
	      };
	      return OscillatorFrame;
	  })();
	  var MediaStreamFrame = (function () {
	      function MediaStreamFrame() {

	      };
	      MediaStreamFrame.value = new MediaStreamFrame();
	      return MediaStreamFrame;
	  })();
	  var KeyboardFrame = (function () {
	      function KeyboardFrame(value0) {
	          this.value0 = value0;
	      };
	      KeyboardFrame.create = function (value0) {
	          return new KeyboardFrame(value0);
	      };
	      return KeyboardFrame;
	  })();
	  var TimelineFrame = (function () {
	      function TimelineFrame(value0) {
	          this.value0 = value0;
	      };
	      TimelineFrame.create = function (value0) {
	          return new TimelineFrame(value0);
	      };
	      return TimelineFrame;
	  })();
	  var InstrumentFrame = (function () {
	      function InstrumentFrame(value0) {
	          this.value0 = value0;
	      };
	      InstrumentFrame.create = function (value0) {
	          return new InstrumentFrame(value0);
	      };
	      return InstrumentFrame;
	  })();
	  var MidiInputFrame = (function () {
	      function MidiInputFrame(value0) {
	          this.value0 = value0;
	      };
	      MidiInputFrame.create = function (value0) {
	          return new MidiInputFrame(value0);
	      };
	      return MidiInputFrame;
	  })();
	  var WebMidiLinkFrame = (function () {
	      function WebMidiLinkFrame() {

	      };
	      WebMidiLinkFrame.value = new WebMidiLinkFrame();
	      return WebMidiLinkFrame;
	  })();
	  var PitchDetectFrame = (function () {
	      function PitchDetectFrame() {

	      };
	      PitchDetectFrame.value = new PitchDetectFrame();
	      return PitchDetectFrame;
	  })();
	  var NodeState = function (x) {
	      return x;
	  };
	  var State = function (x) {
	      return x;
	  };   
	  var webMidiLinkSymbol = "WebMidiLink";
	  var waveShaperSymbol = "Wave Shaper";
	  var videoSymbol = "Media Element";
	  var timelineSymbol = "Timeline";
	  var stereoPannerSymbol = "Stereo Panner";
	  var show_PortValue = new Prelude.Show(function (_12) {
	      if (_12 instanceof AudioNodeValue) {
	          return "audio";
	      };
	      if (_12 instanceof AudioBufferValue) {
	          return "buffer";
	      };
	      if (_12 instanceof MidiValue) {
	          return "midi";
	      };
	      throw new Error("Failed pattern match at Soundknot.Types line 459, column 1 - line 464, column 1: " + [ _12.constructor.name ]);
	  });
	  var scaleBase = 1.2;
	  var screenToWorld = function (_2) {
	      return function (p) {
	          return Soundknot_Linear[".*="](1.0 / $$Math.pow(scaleBase)(Data_Int.toNumber(_2.scaleFactor)))(Soundknot_Linear["=-="](p)(_2.translation));
	      };
	  };
	  var processMidiCommand = function (_4) {
	      return function (command) {
	          return function (b) {
	              return function (c) {
	                  return function (inst) {
	                      var notes = Data_Array.catMaybes(Prelude.map(Prelude.functorArray)(function (note) {
	                          if (note instanceof NoteOn && note.value0 === b) {
	                              return Data_Maybe.Just.create(new NoteOff(note.value0, note.value1, note.value2, _4));
	                          };
	                          if (note instanceof NoteOff && note.value3 + 0.3 < _4) {
	                              return Data_Maybe.Nothing.value;
	                          };
	                          return new Data_Maybe.Just(note);
	                      })(inst.notes));
	                      if (144 <= command && command <= 159) {
	                          return new Data_Maybe.Just((function () {
	                              var _38 = {};
	                              for (var _39 in inst) {
	                                  if (inst.hasOwnProperty(_39)) {
	                                      _38[_39] = inst[_39];
	                                  };
	                              };
	                              _38.notes = Data_Array[":"](new NoteOn(b, _4, c))(notes);
	                              return _38;
	                          })());
	                      };
	                      if (128 <= command && command <= 143) {
	                          return Data_Maybe.Just.create((function () {
	                              var _40 = {};
	                              for (var _41 in inst) {
	                                  if (inst.hasOwnProperty(_41)) {
	                                      _40[_41] = inst[_41];
	                                  };
	                              };
	                              _40.notes = notes;
	                              return _40;
	                          })());
	                      };
	                      return Data_Maybe.Nothing.value;
	                  };
	              };
	          };
	      };
	  };
	  var pitchDetectSymbol = "PitchDetect";
	  var oscillatorSymbol = "Oscillator";
	  var minScaleFactor = -15;
	  var midiInputSymbol = "Midi Input";
	  var mediaStreamSymbol = "Media Stream";
	  var maxScaleFactor = 5;
	  var keyboardSymbol = "Keyboard";
	  var instrumentSymbol = "Instrument";
	  var initialState = function (projectName) {
	      return function (theme) {
	          return {
	              projectName: projectName, 
	              projectEntries: [  ], 
	              selectedProject: Data_Maybe.Nothing.value, 
	              projectListVisible: false, 
	              scaleFactor: 0, 
	              translation: {
	                  x: 0.0, 
	                  y: 0.0
	              }, 
	              scrolling: Data_Maybe.Nothing.value, 
	              dragging: Data_Maybe.Nothing.value, 
	              connecting: Data_Maybe.Nothing.value, 
	              transition: false, 
	              appendingNode: Data_Maybe.Nothing.value, 
	              project: Soundknot_Historical.historical({
	                  nodes: [  ], 
	                  edges: [  ]
	              }), 
	              driver: Data_Maybe.Nothing.value, 
	              audioBuffers: Data_StrMap.empty, 
	              audioFiles: Data_StrMap.empty, 
	              localMediaStream: Data_Maybe.Nothing.value, 
	              instruments: Data_StrMap.empty, 
	              midiInputs: Data_StrMap.empty, 
	              sfzMap: Data_StrMap.empty, 
	              config: {
	                  theme: theme
	              }, 
	              clipboard: Data_Maybe.Nothing.value, 
	              displayAbout: true
	          };
	      };
	  };
	  var iconName = function (p) {
	      if (p instanceof DestinationFrame) {
	          return "headphones";
	      };
	      if (p instanceof GainFrame) {
	          return "volume-up";
	      };
	      if (p instanceof DelayFrame) {
	          return "hourglass";
	      };
	      if (p instanceof AudioBufferFrame) {
	          return "oil";
	      };
	      if (p instanceof VideoFrame) {
	          return "music";
	      };
	      if (p instanceof StereoPannerFrame) {
	          return "resize-horizontal";
	      };
	      if (p instanceof ConvolverFrame) {
	          return "random";
	      };
	      if (p instanceof AnalyserFrame) {
	          return "equalizer";
	      };
	      if (p instanceof ChannelSplitterFrame) {
	          return "resize-full";
	      };
	      if (p instanceof ChannelMergerFrame) {
	          return "resize-small";
	      };
	      if (p instanceof DynamicsCompressorFrame) {
	          return "compressed";
	      };
	      if (p instanceof BiquadFilterFrame) {
	          return "filter";
	      };
	      if (p instanceof WaveShaperFrame) {
	          return "";
	      };
	      if (p instanceof OscillatorFrame) {
	          return "bullhorn";
	      };
	      if (p instanceof MediaStreamFrame) {
	          return "record";
	      };
	      if (p instanceof KeyboardFrame) {
	          return "menu-hamburger";
	      };
	      if (p instanceof TimelineFrame) {
	          return "time";
	      };
	      if (p instanceof InstrumentFrame) {
	          return "bell";
	      };
	      if (p instanceof MidiInputFrame) {
	          return "piggy-bank";
	      };
	      if (p instanceof WebMidiLinkFrame) {
	          return "cloud";
	      };
	      if (p instanceof PitchDetectFrame) {
	          return "dashboard";
	      };
	      throw new Error("Failed pattern match at Soundknot.Types line 296, column 1 - line 297, column 1: " + [ p.constructor.name ]);
	  };
	  var getOutputPorts = function (node) {
	      return function (_1) {
	          if (_1 instanceof DestinationFrame) {
	              return [  ];
	          };
	          if (_1 instanceof GainFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof DelayFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof AudioBufferFrame) {
	              return [ {
	                  type: AudioBufferValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof VideoFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof StereoPannerFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof ConvolverFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof AnalyserFrame) {
	              return [  ];
	          };
	          if (_1 instanceof ChannelSplitterFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output-0"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "output-1"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "output-2"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "output-3"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "output-4"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "output-5"
	              } ];
	          };
	          if (_1 instanceof ChannelMergerFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof DynamicsCompressorFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof BiquadFilterFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof WaveShaperFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof OscillatorFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof MediaStreamFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof KeyboardFrame) {
	              return [ {
	                  type: MidiValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof TimelineFrame) {
	              return Prelude["<#>"](Prelude.functorArray)(Data_Array[".."](0)(Data_Array.length(_1.value0.tracks) - 1))(function (i) {
	                  return {
	                      type: AudioNodeValue.value, 
	                      name: "output-" + Prelude.show(Prelude.showInt)(i)
	                  };
	              });
	          };
	          if (_1 instanceof InstrumentFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof MidiInputFrame) {
	              return [ {
	                  type: MidiValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof WebMidiLinkFrame) {
	              return [ {
	                  type: MidiValue.value, 
	                  name: "output"
	              } ];
	          };
	          if (_1 instanceof PitchDetectFrame) {
	              return [  ];
	          };
	          throw new Error("Failed pattern match at Soundknot.Types line 353, column 1 - line 354, column 1: " + [ node.constructor.name, _1.constructor.name ]);
	      };
	  };
	  var getInputPorts = function (node) {
	      return function (_0) {
	          if (_0 instanceof DestinationFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof GainFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof DelayFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof AudioBufferFrame) {
	              return [  ];
	          };
	          if (_0 instanceof VideoFrame) {
	              return [  ];
	          };
	          if (_0 instanceof StereoPannerFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof ConvolverFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              }, {
	                  type: AudioBufferValue.value, 
	                  name: "buffer"
	              } ];
	          };
	          if (_0 instanceof AnalyserFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof ChannelSplitterFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof ChannelMergerFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input-0"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "input-1"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "input-2"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "input-3"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "input-4"
	              }, {
	                  type: AudioNodeValue.value, 
	                  name: "input-5"
	              } ];
	          };
	          if (_0 instanceof DynamicsCompressorFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof BiquadFilterFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof WaveShaperFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof OscillatorFrame) {
	              return [  ];
	          };
	          if (_0 instanceof MediaStreamFrame) {
	              return [  ];
	          };
	          if (_0 instanceof KeyboardFrame) {
	              return [  ];
	          };
	          if (_0 instanceof TimelineFrame) {
	              return [  ];
	          };
	          if (_0 instanceof InstrumentFrame) {
	              return [ {
	                  type: MidiValue.value, 
	                  name: "input"
	              } ];
	          };
	          if (_0 instanceof MidiInputFrame) {
	              return [  ];
	          };
	          if (_0 instanceof WebMidiLinkFrame) {
	              return [  ];
	          };
	          if (_0 instanceof PitchDetectFrame) {
	              return [ {
	                  type: AudioNodeValue.value, 
	                  name: "input"
	              } ];
	          };
	          throw new Error("Failed pattern match at Soundknot.Types line 320, column 1 - line 321, column 1: " + [ node.constructor.name, _0.constructor.name ]);
	      };
	  };
	  var gainSymbol = "Gain";
	  var eq_ProjectEntrySelect = new Prelude.Eq(function (_17) {
	      return function (_18) {
	          if (_17 instanceof NewProject && _18 instanceof NewProject) {
	              return true;
	          };
	          if (_17 instanceof ExistingProject && _18 instanceof ExistingProject) {
	              return Prelude["=="](Prelude.eqString)(_17.value0)(_18.value0);
	          };
	          return false;
	      };
	  });
	  var eq_PortValue = new Prelude.Eq(function (x) {
	      return function (y) {
	          return Prelude["=="](Prelude.eqString)(Prelude.show(show_PortValue)(x))(Prelude.show(show_PortValue)(y));
	      };
	  });
	  var eq_Port = new Prelude.Eq(function (_6) {
	      return function (_7) {
	          return Prelude.eq(Prelude.eqString)(_6.node)(_7.node) && Prelude.eq(Prelude.eqString)(_6.connector)(_7.connector);
	      };
	  });
	  var eq_NodeState = new Prelude.Eq(function (_13) {
	      return function (_14) {
	          return Prelude["=="](Prelude.eqString)(_13.name)(_14.name) && (_13.position.x === _14.position.x && (_13.position.y === _14.position.y && (Prelude["=="](Prelude.eqBoolean)(_13.dragging)(_14.dragging) && _13.zIndex === _14.zIndex)));
	      };
	  });
	  var eq_Edge = new Prelude.Eq(function (_8) {
	      return function (_9) {
	          return Prelude.eq(eq_Port)(_8.output)(_9.output) && Prelude.eq(eq_Port)(_8.input)(_9.input);
	      };
	  });
	  var eq_Project = new Prelude.Eq(function (_15) {
	      return function (_16) {
	          return Prelude["=="](Prelude.eqArray(eq_NodeState))(_15.nodes)(_16.nodes) && Prelude["=="](Prelude.eqArray(eq_Edge))(_15.edges)(_16.edges);
	      };
	  });
	  var dynamicsCompressorSymbol = "Dynamics Compressor";
	  var destinationSymbol = "Destination";
	  var delaySymbol = "Delay";
	  var convolverSymbol = "Convolver";
	  var channelSplitterSymbol = "Channel Splitter";
	  var channelMergerSymbol = "Channel Merger";
	  var biquadFilterSymbol = "Biquad Filter";
	  var audioBufferSymbol = "Audio Buffer";
	  var analyserSymbol = "Analyser";
	  var frameTypeToTitle = function (p) {
	      if (p instanceof DestinationFrame) {
	          return destinationSymbol;
	      };
	      if (p instanceof GainFrame) {
	          return gainSymbol;
	      };
	      if (p instanceof DelayFrame) {
	          return delaySymbol;
	      };
	      if (p instanceof AudioBufferFrame) {
	          return audioBufferSymbol;
	      };
	      if (p instanceof VideoFrame) {
	          return videoSymbol;
	      };
	      if (p instanceof StereoPannerFrame) {
	          return stereoPannerSymbol;
	      };
	      if (p instanceof ConvolverFrame) {
	          return convolverSymbol;
	      };
	      if (p instanceof AnalyserFrame) {
	          return analyserSymbol;
	      };
	      if (p instanceof ChannelSplitterFrame) {
	          return channelSplitterSymbol;
	      };
	      if (p instanceof ChannelMergerFrame) {
	          return channelMergerSymbol;
	      };
	      if (p instanceof DynamicsCompressorFrame) {
	          return dynamicsCompressorSymbol;
	      };
	      if (p instanceof BiquadFilterFrame) {
	          return biquadFilterSymbol;
	      };
	      if (p instanceof WaveShaperFrame) {
	          return waveShaperSymbol;
	      };
	      if (p instanceof OscillatorFrame) {
	          return oscillatorSymbol;
	      };
	      if (p instanceof MediaStreamFrame) {
	          return mediaStreamSymbol;
	      };
	      if (p instanceof KeyboardFrame) {
	          return keyboardSymbol;
	      };
	      if (p instanceof TimelineFrame) {
	          return timelineSymbol;
	      };
	      if (p instanceof InstrumentFrame) {
	          return instrumentSymbol;
	      };
	      if (p instanceof MidiInputFrame) {
	          return midiInputSymbol;
	      };
	      if (p instanceof WebMidiLinkFrame) {
	          return webMidiLinkSymbol;
	      };
	      if (p instanceof PitchDetectFrame) {
	          return pitchDetectSymbol;
	      };
	      throw new Error("Failed pattern match at Soundknot.Types line 209, column 1 - line 210, column 1: " + [ p.constructor.name ]);
	  };
	  var allNotesOff = function (_5) {
	      return function (notes) {
	          return Data_Array.catMaybes(Prelude.map(Prelude.functorArray)(function (note) {
	              if (note instanceof NoteOn) {
	                  return Data_Maybe.Just.create(new NoteOff(note.value0, note.value1, note.value2, _5));
	              };
	              if (note instanceof NoteOff && note.value3 + 0.3 < _5) {
	                  return Data_Maybe.Nothing.value;
	              };
	              return new Data_Maybe.Just(note);
	          })(notes));
	      };
	  };
	  exports["AudioNodeValue"] = AudioNodeValue;
	  exports["AudioBufferValue"] = AudioBufferValue;
	  exports["MidiValue"] = MidiValue;
	  exports["NoteOn"] = NoteOn;
	  exports["NoteOff"] = NoteOff;
	  exports["DestinationFrame"] = DestinationFrame;
	  exports["GainFrame"] = GainFrame;
	  exports["DelayFrame"] = DelayFrame;
	  exports["AudioBufferFrame"] = AudioBufferFrame;
	  exports["VideoFrame"] = VideoFrame;
	  exports["StereoPannerFrame"] = StereoPannerFrame;
	  exports["ConvolverFrame"] = ConvolverFrame;
	  exports["AnalyserFrame"] = AnalyserFrame;
	  exports["ChannelSplitterFrame"] = ChannelSplitterFrame;
	  exports["ChannelMergerFrame"] = ChannelMergerFrame;
	  exports["DynamicsCompressorFrame"] = DynamicsCompressorFrame;
	  exports["BiquadFilterFrame"] = BiquadFilterFrame;
	  exports["WaveShaperFrame"] = WaveShaperFrame;
	  exports["OscillatorFrame"] = OscillatorFrame;
	  exports["MediaStreamFrame"] = MediaStreamFrame;
	  exports["KeyboardFrame"] = KeyboardFrame;
	  exports["TimelineFrame"] = TimelineFrame;
	  exports["InstrumentFrame"] = InstrumentFrame;
	  exports["MidiInputFrame"] = MidiInputFrame;
	  exports["WebMidiLinkFrame"] = WebMidiLinkFrame;
	  exports["PitchDetectFrame"] = PitchDetectFrame;
	  exports["FileSource"] = FileSource;
	  exports["URLMediaSource"] = URLMediaSource;
	  exports["NodeState"] = NodeState;
	  exports["State"] = State;
	  exports["NewProject"] = NewProject;
	  exports["ExistingProject"] = ExistingProject;
	  exports["maxScaleFactor"] = maxScaleFactor;
	  exports["minScaleFactor"] = minScaleFactor;
	  exports["allNotesOff"] = allNotesOff;
	  exports["processMidiCommand"] = processMidiCommand;
	  exports["screenToWorld"] = screenToWorld;
	  exports["scaleBase"] = scaleBase;
	  exports["getOutputPorts"] = getOutputPorts;
	  exports["getInputPorts"] = getInputPorts;
	  exports["iconName"] = iconName;
	  exports["pitchDetectSymbol"] = pitchDetectSymbol;
	  exports["webMidiLinkSymbol"] = webMidiLinkSymbol;
	  exports["midiInputSymbol"] = midiInputSymbol;
	  exports["instrumentSymbol"] = instrumentSymbol;
	  exports["timelineSymbol"] = timelineSymbol;
	  exports["keyboardSymbol"] = keyboardSymbol;
	  exports["mediaStreamSymbol"] = mediaStreamSymbol;
	  exports["oscillatorSymbol"] = oscillatorSymbol;
	  exports["waveShaperSymbol"] = waveShaperSymbol;
	  exports["biquadFilterSymbol"] = biquadFilterSymbol;
	  exports["dynamicsCompressorSymbol"] = dynamicsCompressorSymbol;
	  exports["channelMergerSymbol"] = channelMergerSymbol;
	  exports["channelSplitterSymbol"] = channelSplitterSymbol;
	  exports["analyserSymbol"] = analyserSymbol;
	  exports["convolverSymbol"] = convolverSymbol;
	  exports["stereoPannerSymbol"] = stereoPannerSymbol;
	  exports["videoSymbol"] = videoSymbol;
	  exports["audioBufferSymbol"] = audioBufferSymbol;
	  exports["delaySymbol"] = delaySymbol;
	  exports["gainSymbol"] = gainSymbol;
	  exports["destinationSymbol"] = destinationSymbol;
	  exports["frameTypeToTitle"] = frameTypeToTitle;
	  exports["initialState"] = initialState;
	  exports["eq_Port"] = eq_Port;
	  exports["eq_Edge"] = eq_Edge;
	  exports["show_PortValue"] = show_PortValue;
	  exports["eq_PortValue"] = eq_PortValue;
	  exports["eq_NodeState"] = eq_NodeState;
	  exports["eq_Project"] = eq_Project;
	  exports["eq_ProjectEntrySelect"] = eq_ProjectEntrySelect;;
	 
	})(PS["Soundknot.Types"] = PS["Soundknot.Types"] || {});
	(function(exports) {
	  // module Soundknot.UI


	  exports.showSplash = function(){
	      document.getElementById("splash").style.display = "block";
	  }
	})(PS["Soundknot.UI"] = PS["Soundknot.UI"] || {});
	(function(exports) {
	  // module Soundknot.UI.Timeline.Markup

	  exports.renderWaveform = function(sampleRate){
	      return function(leftIndex){
	          return function(rightIndex){
	              return function(length){
	                  return function(slices){
	                      return function(audioBufferMap){

	                          var isLoaded = slices.every(function(slice){ return !!audioBufferMap[slice.buffer]; });
	                          if( ! isLoaded){ return ""; }

	                          var height = 36;
	                          var stride = ((rightIndex - leftIndex) / length) | 0;
	                          var step = stride > 1000 ? 10 : 1;

	                          var _leftIndex = Math.max(0, leftIndex)
	                          var d = "M 0 " + (height + height * 0.5).toFixed(4);

	                          // count number Of Channels 
	                          var numberOfChannels = 0;
	                          for(var sliceIndex = 0; sliceIndex < slices.length; sliceIndex++){
	                              var slice = slices[sliceIndex];         
	                              var buffer = audioBufferMap[slice.buffer];               
	                              numberOfChannels = Math.max(numberOfChannels, buffer.numberOfChannels);
	                          }

	                        
	                          // render wave form
	                          var waveFormData = "";

	                          for(var channelIndex = 0; channelIndex < numberOfChannels; channelIndex++){
	                              var maxArray = new Float32Array(length);
	                              var minArray = new Float32Array(length);          

	                              for(var sliceIndex = 0; sliceIndex < slices.length; sliceIndex++){
	                                  var slice = slices[sliceIndex];                        
	                                  var buffer = audioBufferMap[slice.buffer];

	                                  if(channelIndex < buffer.numberOfChannels){

	                                      var count = slice.count || audioBufferMap[slice.buffer].length;

	                                      var channelData = buffer.getChannelData(channelIndex);
	                                      var sliceSampleIndex = (sampleRate * slice.offset) | 0;



	                                      (function(){

	                                          for(var i = 0; i < length; i++){
	                                              var max = -1.0;
	                                              var min = 1.0;

	                                              for(var s = 0; s < stride; s += step){
	                                                  var index = (_leftIndex - sliceSampleIndex) + stride * i + s;
	                                                  if(index <= 0){
	                                                      continue;
	                                                  }else if(channelData.length <= index){
	                                                      return;
	                                                  }
	                                                  var v = channelData[index];
	                                                  max = Math.max(max, v);
	                                                  min = Math.min(min, v);
	                                              }

	                                              maxArray[i] = Math.max(maxArray[i], max);
	                                              minArray[i] = Math.min(minArray[i], min);
	                                          }
	                                      })();
	                                  }
	                              }

	                              var waveHeight = height / numberOfChannels;
	                              var offsetY = waveHeight + waveHeight * 2 * channelIndex;
	                              waveFormData += "M 0 " + offsetY.toFixed(4);
	                              for(var i = 0; i < length; i++){
	                                  waveFormData += " L " + i + " " + (offsetY + waveHeight * minArray[i]).toFixed(4); 
	                                  waveFormData += " L " + i + " " + (offsetY + waveHeight * maxArray[i]).toFixed(4);
	                              }
	                          }   
	                        
	                          return waveFormData;
	                      }
	                  }
	              }
	          }
	      }
	  }





	 
	})(PS["Soundknot.UI.Timeline.Markup"] = PS["Soundknot.UI.Timeline.Markup"] || {});
	(function(exports) {
	  // module Soundknot.Utils



	  exports._openFile = function(reject){
	      return function(resolve){
	          return function(){
	              //console.log("openfile");
	              var input = document.createElement("input");
	              input.value = null;
	              input.setAttribute("type", "file");
	              input.addEventListener("change", function(){
	                  resolve(input.files[0])();
	              });
	              input.addEventListener("error", function(e){
	                  reject(e.toString())();
	              });
	              var e = document.createEvent("MouseEvents");
	              e.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	              input.dispatchEvent(e);
	          }
	      }
	  }
	  exports.now = function(){
	      return performance.now();
	  }

	  exports.toFixed = function(x){
	      return function(d){
	          return x.toFixed(d);
	      }
	  }







	  exports.getOffset = function(e) {
	      var target = e.currentTarget, x = 0, y = 0;
	      while (target && ! isNaN(target.offsetLeft) && ! isNaN(target.offsetTop)) {
	          x += target.offsetLeft - target.scrollLeft;
	          y += target.offsetTop - target.scrollTop;
	          target = target.offsetParent;
	      }
	      return { 
	          x: e.clientX - x, 
	          y: e.clientY - y 
	      };
	  }


	  exports.getAudioFile = function(e){
	      if(e.dataTransfer && e.dataTransfer.items){
	          for(var i = 0; i < e.dataTransfer.items.length; i++){
	              var item = e.dataTransfer.items[i];
	              if(
	                  item.kind == "file" && (
	                  item.type == "audio/wav" ||
	                  item.type == "audio/mp3" ||
	                  item.type == "audio/ogg" ||          
	                  item.type == "video/mp4" ||
	                  item.type == "video/avi" ||
	                  item.type == "video/ogg")
	              ){
	                  return item.getAsFile();
	              }
	          }
	      }
	      return null;
	  }





	  exports.createFile = function(blobs){
	      return function(name){
	          return new File(blobs, name);
	      }
	  }

	  exports.download = function(file){
	      return function(){
	          var blobURL = URL.createObjectURL(file);
	          var a = document.createElement('a');
	          a.download = file.name;
	          a.href = blobURL;
	          a.click();
	      }
	  }
	})(PS["Soundknot.Utils"] = PS["Soundknot.Utils"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Prelude = PS["Prelude"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];                
	  var video = OpticUI_Markup.element(Data_Maybe.Nothing.value)("video");
	  var valueA = OpticUI_Markup.prop("value");                    
	  var typeA = OpticUI_Markup.attr("type");                              
	  var tr = OpticUI_Markup.element(Data_Maybe.Nothing.value)("tr");      
	  var th = OpticUI_Markup.element(Data_Maybe.Nothing.value)("th");      
	  var table = OpticUI_Markup.element(Data_Maybe.Nothing.value)("table");
	  var styleA = OpticUI_Markup.attr("style");
	  var style = OpticUI_Markup.element(Data_Maybe.Nothing.value)("style");
	  var span = OpticUI_Markup.element(Data_Maybe.Nothing.value)("span");  
	  var select = OpticUI_Markup.element(Data_Maybe.Nothing.value)("select");
	  var option = OpticUI_Markup.element(Data_Maybe.Nothing.value)("option");    
	  var onWheel = function (h) {
	      return OpticUI_Markup.handle("wheel")(h);
	  };
	  var onMouseUp = function (h) {
	      return OpticUI_Markup.handle("mouseup")(h);
	  };
	  var onMouseMove = function (h) {
	      return OpticUI_Markup.handle("mousemove")(h);
	  };
	  var onMouseLeave = function (h) {
	      return OpticUI_Markup.handle("mouseleave")(h);
	  };
	  var onMouseDown = function (h) {
	      return OpticUI_Markup.handle("mousedown")(h);
	  };
	  var onDrop = function (h) {
	      return OpticUI_Markup.handle("drop")(h);
	  };
	  var onDragStart = function (h) {
	      return OpticUI_Markup.handle("dragstart")(h);
	  };
	  var onDragOver = function (h) {
	      return OpticUI_Markup.handle("dragover")(h);
	  };
	  var onClick = function (h) {
	      return OpticUI_Markup.handle("click")(h);
	  };                                                                
	  var input_ = function (ps) {
	      return OpticUI_Markup.element(Data_Maybe.Nothing.value)("input")(ps)(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	  };                                                              
	  var getProp = function (__dict_IsForeign_0) {
	      return function (prop) {
	          return function (_1) {
	              return Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Foreign_Class.readProp(__dict_IsForeign_0)(Data_Foreign_Index.indexString)(prop)(Data_Foreign.toForeign((function (_0) {
	                  return _0.target;
	              })(_1))));
	          };
	      };
	  };
	  var onInput = function (__dict_IsForeign_1) {
	      return function (h) {
	          return OpticUI_Markup.handle("input")(function (e) {
	              return h(e)(getProp(__dict_IsForeign_1)("value")(e));
	          });
	      };
	  };                                                              
	  var draggableA = OpticUI_Markup.attr("draggable")("true");               
	  var div = OpticUI_Markup.element(Data_Maybe.Nothing.value)("div");  
	  var classA = OpticUI_Markup.attr("class");
	  exports["getProp"] = getProp;
	  exports["onDrop"] = onDrop;
	  exports["onDragOver"] = onDragOver;
	  exports["onDragStart"] = onDragStart;
	  exports["onInput"] = onInput;
	  exports["onWheel"] = onWheel;
	  exports["onMouseLeave"] = onMouseLeave;
	  exports["onMouseMove"] = onMouseMove;
	  exports["onMouseUp"] = onMouseUp;
	  exports["onMouseDown"] = onMouseDown;
	  exports["onClick"] = onClick;
	  exports["draggableA"] = draggableA;
	  exports["valueA"] = valueA;
	  exports["styleA"] = styleA;
	  exports["typeA"] = typeA;
	  exports["classA"] = classA;
	  exports["video"] = video;
	  exports["tr"] = tr;
	  exports["th"] = th;
	  exports["table"] = table;
	  exports["style"] = style;
	  exports["span"] = span;
	  exports["select"] = select;
	  exports["option"] = option;
	  exports["input_"] = input_;
	  exports["div"] = div;;
	 
	})(PS["OpticUI.Markup.HTML"] = PS["OpticUI.Markup.HTML"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Utils"];
	  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
	  var Prelude = PS["Prelude"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var DOM = PS["DOM"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];     
	  var spacer = OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width:16px") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	  var signum = function (x) {
	      var _0 = x > 0.0;
	      if (_0) {
	          return -1.0;
	      };
	      if (!_0) {
	          var _1 = x < 0.0;
	          if (_1) {
	              return 1.0;
	          };
	          if (!_1) {
	              return 0.0;
	          };
	          throw new Error("Failed pattern match: " + [ _1.constructor.name ]);
	      };
	      throw new Error("Failed pattern match at Soundknot.Utils line 46, column 1 - line 47, column 1: " + [ _0.constructor.name ]);
	  };
	  var openFile = Control_Monad_Aff.makeAff($foreign._openFile);
	  var nop = function (__dict_Applicative_0) {
	      return Prelude.pure(__dict_Applicative_0)(Prelude.unit);
	  };
	  var indices = function (xs) {
	      return Data_Array[".."](0)(Data_Array.length(xs) - 1);
	  };
	  var withIndex = function (xs) {
	      return function (f) {
	          return Data_Array.zipWith(f)(indices(xs))(xs);
	      };
	  };
	  var glyphicon = function (icon) {
	      return OpticUI_Markup_HTML.span([ OpticUI_Markup_HTML.classA("glyphicon glyphicon-" + icon) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	  };
	  var iconButton = function (icon) {
	      return function (handler) {
	          return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("icon button"), OpticUI_Markup_HTML.onClick(function (e) {
	              return handler;
	          }) ])(glyphicon(icon));
	      };
	  };
	  var clientPosition = function (e) {
	      return {
	          x: e.clientX, 
	          y: e.clientY
	      };
	  };
	  exports["spacer"] = spacer;
	  exports["iconButton"] = iconButton;
	  exports["glyphicon"] = glyphicon;
	  exports["indices"] = indices;
	  exports["withIndex"] = withIndex;
	  exports["signum"] = signum;
	  exports["clientPosition"] = clientPosition;
	  exports["openFile"] = openFile;
	  exports["nop"] = nop;
	  exports["download"] = $foreign.download;
	  exports["createFile"] = $foreign.createFile;
	  exports["getAudioFile"] = $foreign.getAudioFile;
	  exports["getOffset"] = $foreign.getOffset;
	  exports["toFixed"] = $foreign.toFixed;
	  exports["now"] = $foreign.now;;
	 
	})(PS["Soundknot.Utils"] = PS["Soundknot.Utils"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Data_StrMap = PS["Data.StrMap"];
	  var $$Math = PS["Math"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Array = PS["Data.Array"];
	  var Sound_AudioGraph = PS["Sound.AudioGraph"];
	  var WebAudio = PS["WebAudio"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Soundknot_UI_Timeline_Types = PS["Soundknot.UI.Timeline.Types"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Sound_AudioGraph_Types = PS["Sound.AudioGraph.Types"];     
	  var renderTimelineAudio = function (_0) {
	      return function (_1) {
	          return function (nodeName) {
	              return function (timeline) {
	                  var cursor = Soundknot_UI_Timeline_Types.runSeconds(Soundknot_UI_Timeline_Types.beatsToSeconds(timeline.bpm)(timeline.cursor));
	                  var _6 = Data_Nullable.toMaybe(timeline.start);
	                  if (_6 instanceof Data_Maybe.Nothing) {
	                      return new Data_Tuple.Tuple([  ], [  ]);
	                  };
	                  if (_6 instanceof Data_Maybe.Just) {
	                      var nodes = Soundknot_Utils.withIndex(timeline.tracks)(function (i) {
	                          return function (track) {
	                              if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                  var sources = Data_Array.catMaybes(Data_Array.concatMap(function (clip) {
	                                      return Prelude.map(Prelude.functorArray)(function (slice) {
	                                          var _8 = Data_StrMap.lookup(slice.buffer)(_1.audioBuffers);
	                                          if (_8 instanceof Data_Maybe.Nothing) {
	                                              return Data_Maybe.Nothing.value;
	                                          };
	                                          if (_8 instanceof Data_Maybe.Just) {
	                                              var position = Soundknot_UI_Timeline_Types.runSeconds(Soundknot_UI_Timeline_Types.addSeconds(Soundknot_UI_Timeline_Types.beatsToSeconds(timeline.bpm)(clip.position))(slice.offset)) - cursor;
	                                              var when = _0 + position;
	                                              var offset = $$Math.max(0.0)(-position);
	                                              return Data_Maybe.Just.create(new Sound_AudioGraph_Types.VNode({
	                                                  key: slice.key, 
	                                                  node: new Sound_AudioGraph_Types.VAudioBufferSource({
	                                                      buffer: _8.value0, 
	                                                      detune: 0, 
	                                                      playing: true, 
	                                                      when: Data_Nullable.toNullable(Data_Maybe.Just.create($$Math.max(0.0)(when))), 
	                                                      offset: Data_Nullable.toNullable(Data_Maybe.Just.create(offset)), 
	                                                      duration: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
	                                                  })
	                                              }));
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Audio line 44, column 21 - line 50, column 21: " + [ _8.constructor.name ]);
	                                      })(clip.slices);
	                                  })(track.content.value0.clips));
	                                  var gainName = nodeName + ("-output-" + Prelude.show(Prelude.showInt)(i));
	                                  var gain = new Sound_AudioGraph_Types.VNode({
	                                      key: gainName, 
	                                      node: new Sound_AudioGraph_Types.VGain({
	                                          gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                                      })
	                                  });
	                                  var connections = Prelude.map(Prelude.functorArray)(function (source) {
	                                      return {
	                                          output: source, 
	                                          outputIndex: 0, 
	                                          input: gain, 
	                                          inputIndex: 0
	                                      };
	                                  })(sources);
	                                  return new Data_Tuple.Tuple(Prelude["++"](Prelude.semigroupArray)([ gain ])(sources), connections);
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Audio line 19, column 13 - line 55, column 9: " + [ track.content.constructor.name ]);
	                          };
	                      });
	                      return new Data_Tuple.Tuple(Data_Array.concatMap(Data_Tuple.fst)(nodes), Data_Array.concatMap(Data_Tuple.snd)(nodes));
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Audio line 15, column 1 - line 16, column 1: " + [ _6.constructor.name ]);
	              };
	          };
	      };
	  };
	  exports["renderTimelineAudio"] = renderTimelineAudio;;
	 
	})(PS["Soundknot.UI.Timeline.Audio"] = PS["Soundknot.UI.Timeline.Audio"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Data_StrMap = PS["Data.StrMap"];
	  var Soundknot_UI_Timeline_Audio = PS["Soundknot.UI.Timeline.Audio"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
	  var DOM = PS["DOM"];
	  var DOM_HTML = PS["DOM.HTML"];
	  var DOM_HTML_Window = PS["DOM.HTML.Window"];
	  var DOM_HTML_Types = PS["DOM.HTML.Types"];
	  var DOM_Node_NonElementParentNode = PS["DOM.Node.NonElementParentNode"];
	  var DOM_Node_Types = PS["DOM.Node.Types"];
	  var WebAudio = PS["WebAudio"];
	  var Sound_AudioGraph = PS["Sound.AudioGraph"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var SoundFont = PS["SoundFont"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Sound_AudioGraph_Types = PS["Sound.AudioGraph.Types"];
	  var Data_Monoid = PS["Data.Monoid"];     
	  var renderAudio = function (_21) {
	      return function (_22) {
	          var project = (function () {
	              var _27 = Soundknot_Historical.runHistorical(_22.project);
	              return _27;
	          })();
	          var con = function (x) {
	              return function (y) {
	                  return {
	                      output: x, 
	                      outputIndex: 0, 
	                      input: y, 
	                      inputIndex: 0
	                  };
	              };
	          };
	          return function __do() {
	              var _15 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(project.nodes)(function (_18) {
	                  if (_18.props instanceof Soundknot_Types.DestinationFrame) {
	                      var gain = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VGain(_18.props.value0)
	                      });
	                      var dest = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "#dest", 
	                          node: Sound_AudioGraph_Types.VDestination.value
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ dest, gain ], [ con(gain)(dest) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.BiquadFilterFrame) {
	                      var filter = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VBiquadFilter(_18.props.value0)
	                      });
	                      var gain = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VGain({
	                              gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ filter, gain ], [ con(filter)(gain) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.VideoFrame) {
	                      return function __do() {
	                          var _1 = Prelude["<$>"](Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToNonElementParentNode)(Prelude[">>="](Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document))();
	                          var _0 = DOM_Node_NonElementParentNode.getElementById(_18.name)(_1)();
	                          return (function () {
	                              var output = new Sound_AudioGraph_Types.VNode({
	                                  key: _18.name + "-output", 
	                                  node: new Sound_AudioGraph_Types.VVideoElement({
	                                      element: Unsafe_Coerce.unsafeCoerce(_0)
	                                  })
	                              });
	                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ output ], [  ]));
	                          })()();
	                      };
	                  };
	                  if (_18.props instanceof Soundknot_Types.GainFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VGain(_18.props.value0)
	                      });
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VGain({
	                              gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ input, output ], [ con(input)(output) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.DelayFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VDelay(_18.props.value0)
	                      });
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VGain({
	                              gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ input, output ], [ con(input)(output) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.StereoPannerFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VStereoPanner(_18.props.value0)
	                      });
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VGain({
	                              gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ input, output ], [ con(input)(output) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.ConvolverFrame) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.fromMaybe(new Data_Tuple.Tuple([  ], [  ]))(Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(Data_Array.filter(function (_16) {
	                          return Prelude["=="](Soundknot_Types.eq_Port)(_16.input)({
	                              node: _18.name, 
	                              connector: _18.name + "-buffer"
	                          });
	                      })(project.edges)))(function (_5) {
	                          return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(Data_Array.filter(function (_17) {
	                              return Prelude["=="](Prelude.eqString)(_17.name)(_5.output.node);
	                          })(project.nodes)))(function (_4) {
	                              if (_4.props instanceof Soundknot_Types.AudioBufferFrame) {
	                                  return Prelude.bind(Data_Maybe.bindMaybe)(_4.props.value0.file)(function (_3) {
	                                      return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup((Unsafe_Coerce.unsafeCoerce(_3)).name)(_22.audioBuffers))(function (_2) {
	                                          var input = new Sound_AudioGraph_Types.VNode({
	                                              key: _18.name + "-input", 
	                                              node: new Sound_AudioGraph_Types.VConvolver({
	                                                  buffer: _2
	                                              })
	                                          });
	                                          var output = new Sound_AudioGraph_Types.VNode({
	                                              key: _18.name + "-output", 
	                                              node: new Sound_AudioGraph_Types.VGain({
	                                                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                                              })
	                                          });
	                                          return Prelude.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple([ input, output ], [ con(input)(output) ]));
	                                      });
	                                  });
	                              };
	                              return Prelude.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple([  ], [  ]));
	                          });
	                      })));
	                  };
	                  if (_18.props instanceof Soundknot_Types.ChannelSplitterFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: Sound_AudioGraph_Types.VChannelSplitter.value
	                      });
	                      var outputs = Prelude.map(Prelude.functorArray)(function (i) {
	                          return new Sound_AudioGraph_Types.VNode({
	                              key: _18.name + ("-output-" + Prelude.show(Prelude.showInt)(i)), 
	                              node: new Sound_AudioGraph_Types.VGain({
	                                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                              })
	                          });
	                      })(Data_Array[".."](0)(5));
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple(Prelude["++"](Prelude.semigroupArray)([ input ])(outputs), Soundknot_Utils.withIndex(outputs)(function (i) {
	                          return function (output) {
	                              return {
	                                  output: input, 
	                                  outputIndex: i, 
	                                  input: output, 
	                                  inputIndex: 0
	                              };
	                          };
	                      })));
	                  };
	                  if (_18.props instanceof Soundknot_Types.ChannelMergerFrame) {
	                      var inputs = Prelude.map(Prelude.functorArray)(function (i) {
	                          return new Sound_AudioGraph_Types.VNode({
	                              key: _18.name + ("-input-" + Prelude.show(Prelude.showInt)(i)), 
	                              node: new Sound_AudioGraph_Types.VGain({
	                                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                              })
	                          });
	                      })(Data_Array[".."](0)(5));
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: Sound_AudioGraph_Types.VChannelMerger.value
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple(Prelude["++"](Prelude.semigroupArray)(inputs)([ output ]), Soundknot_Utils.withIndex(inputs)(function (i) {
	                          return function (input) {
	                              return {
	                                  output: input, 
	                                  outputIndex: 0, 
	                                  input: output, 
	                                  inputIndex: i
	                              };
	                          };
	                      })));
	                  };
	                  if (_18.props instanceof Soundknot_Types.DynamicsCompressorFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VDynamicsCompressor(_18.props.value0)
	                      });
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VGain({
	                              gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ input, output ], [ con(input)(output) ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.OscillatorFrame) {
	                      var output = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-output", 
	                          node: new Sound_AudioGraph_Types.VOscillator(_18.props.value0)
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ output ], [  ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.AnalyserFrame) {
	                      var input = new Sound_AudioGraph_Types.VNode({
	                          key: _18.name + "-input", 
	                          node: new Sound_AudioGraph_Types.VAnalyser({
	                              handler: function (value) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              }
	                          })
	                      });
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([ input ], [  ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.MediaStreamFrame) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple(Data_Maybe.maybe([  ])(function (stream) {
	                          return [ new Sound_AudioGraph_Types.VNode({
	                              key: _18.name + "-output", 
	                              node: new Sound_AudioGraph_Types.VMediaStream(stream)
	                          }) ];
	                      })(_22.localMediaStream), [  ]));
	                  };
	                  if (_18.props instanceof Soundknot_Types.TimelineFrame) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Soundknot_UI_Timeline_Audio.renderTimelineAudio(_21)(_22)(_18.name)(_18.props.value0));
	                  };
	                  if (_18.props instanceof Soundknot_Types.InstrumentFrame) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.fromMaybe(new Data_Tuple.Tuple([  ], [  ]))((function () {
	                          var output = new Sound_AudioGraph_Types.VNode({
	                              key: _18.name + "-output", 
	                              node: new Sound_AudioGraph_Types.VGain({
	                                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	                              })
	                          });
	                          return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(_18.props.value0.instrument)(_22.sfzMap))(function (_12) {
	                              var regions = SoundFont.flattenSFZ(_12);
	                              return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Array.unzip)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(_18.props.value0.notes)(function (note) {
	                                  return Prelude.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.fromMaybe(new Data_Tuple.Tuple([  ], [  ]))((function () {
	                                      var getGain = function (_23) {
	                                          return function (params) {
	                                              return new Sound_AudioGraph_Types.VNode({
	                                                  key: _18.name + ("-gain-" + Prelude.show(Prelude.showNumber)(_23)), 
	                                                  node: new Sound_AudioGraph_Types.VGain({
	                                                      gain: params
	                                                  })
	                                              });
	                                          };
	                                      };
	                                      var getSource = function (keyIndex) {
	                                          return function (_24) {
	                                              var flatSFZ = SoundFont.flattenSFZ(_12);
	                                              return Prelude.bind(Data_Maybe.bindMaybe)(SoundFont.regionIndex(flatSFZ)(keyIndex))(function (_8) {
	                                                  return Prelude.bind(Data_Maybe.bindMaybe)(SoundFont.keyCenter(flatSFZ)(_8))(function (_7) {
	                                                      return Prelude.bind(Data_Maybe.bindMaybe)(SoundFont.findBuffer(flatSFZ)("soundfont/sonatina-symphonic-orchestra/")(_22.audioBuffers)(_8))(function (_6) {
	                                                          return Data_Maybe.Just.create(new Sound_AudioGraph_Types.VNode({
	                                                              key: _18.name + ("-source-" + Prelude.show(Prelude.showNumber)(_24)), 
	                                                              node: new Sound_AudioGraph_Types.VAudioBufferSource({
	                                                                  buffer: _6, 
	                                                                  detune: 100 * (keyIndex - SoundFont.nameToIndex(_7)) | 0, 
	                                                                  playing: true, 
	                                                                  when: Data_Nullable.toNullable(new Data_Maybe.Just(_24)), 
	                                                                  offset: Data_Nullable.toNullable(new Data_Maybe.Just(0.0)), 
	                                                                  duration: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
	                                                              })
	                                                          }));
	                                                      });
	                                                  });
	                                              });
	                                          };
	                                      };
	                                      if (note instanceof Soundknot_Types.NoteOn) {
	                                          var gain = getGain(note.value1)([ new WebAudio_Core.ConstantValue(1.0) ]);
	                                          return Prelude.bind(Data_Maybe.bindMaybe)(getSource(note.value0)(note.value1))(function (_9) {
	                                              return Data_Maybe.Just.create(new Data_Tuple.Tuple([ _9, gain ], [ con(_9)(gain), con(gain)(output) ]));
	                                          });
	                                      };
	                                      if (note instanceof Soundknot_Types.NoteOff) {
	                                          var gain = getGain(note.value1)([ new WebAudio_Core.SetTargetAtTime(0.0, WebAudio_Core.AudioTime(note.value3 + 5.0e-2), 0.1) ]);
	                                          return Prelude.bind(Data_Maybe.bindMaybe)(getSource(note.value0)(note.value1))(function (_10) {
	                                              return Data_Maybe.Just.create(new Data_Tuple.Tuple([ _10, gain ], [ con(_10)(gain), con(gain)(output) ]));
	                                          });
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.Audio line 34, column 1 - line 35, column 1: " + [ note.constructor.name ]);
	                                  })()));
	                              })))(function (_11) {
	                                  return Prelude.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Prelude["++"](Prelude.semigroupArray)(Data_Array.concat(_11.value0))([ output ]), Data_Array.concat(_11.value1)));
	                              });
	                          });
	                      })()));
	                  };
	                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple([  ], [  ]));
	              })();
	              return (function () {
	                  var xs = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(Data_Tuple.snd)(_15);
	                  var nodes = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(Data_Tuple.fst)(_15);
	                  var edges = Data_Array.catMaybes(Prelude.map(Prelude.functorArray)(function (_20) {
	                      var find = function (name) {
	                          return Data_Array.head(Data_Array.filter(function (_19) {
	                              return Prelude["=="](Sound_AudioGraph_Types.eq_VNodeName)(_19.value0.key)(name);
	                          })(nodes));
	                      };
	                      return Prelude.bind(Data_Maybe.bindMaybe)(find(_20.output.connector))(function (_14) {
	                          return Prelude.bind(Data_Maybe.bindMaybe)(find(_20.input.connector))(function (_13) {
	                              var oIndex = (function () {
	                                  if (_14.value0.node instanceof Sound_AudioGraph_Types.VChannelSplitter) {
	                                      if (_20.output.connector === "output-0") {
	                                          return 0;
	                                      };
	                                      if (_20.output.connector === "output-1") {
	                                          return 1;
	                                      };
	                                      if (_20.output.connector === "output-2") {
	                                          return 2;
	                                      };
	                                      if (_20.output.connector === "output-3") {
	                                          return 3;
	                                      };
	                                      if (_20.output.connector === "output-4") {
	                                          return 4;
	                                      };
	                                      if (_20.output.connector === "output-5") {
	                                          return 5;
	                                      };
	                                      return 0;
	                                  };
	                                  return 0;
	                              })();
	                              var iIndex = (function () {
	                                  if (_13.value0.node instanceof Sound_AudioGraph_Types.VChannelMerger) {
	                                      if (_20.input.connector === "input-0") {
	                                          return 0;
	                                      };
	                                      if (_20.input.connector === "input-1") {
	                                          return 1;
	                                      };
	                                      if (_20.input.connector === "input-2") {
	                                          return 2;
	                                      };
	                                      if (_20.input.connector === "input-3") {
	                                          return 3;
	                                      };
	                                      if (_20.input.connector === "input-4") {
	                                          return 4;
	                                      };
	                                      if (_20.input.connector === "input-5") {
	                                          return 5;
	                                      };
	                                      return 0;
	                                  };
	                                  return 0;
	                              })();
	                              return Prelude.pure(Data_Maybe.applicativeMaybe)({
	                                  output: new Sound_AudioGraph_Types.VNode(_14.value0), 
	                                  outputIndex: oIndex, 
	                                  input: new Sound_AudioGraph_Types.VNode(_13.value0), 
	                                  inputIndex: iIndex
	                              });
	                          });
	                      });
	                  })(project.edges));
	                  var result = Prelude["++"](Prelude.semigroupArray)(xs)(edges);
	                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(result);
	              })()();
	          };
	      };
	  };
	  exports["renderAudio"] = renderAudio;;
	 
	})(PS["Soundknot.Audio"] = PS["Soundknot.Audio"] || {});
	(function(exports) {
	  // module Sound.MP3Encoder

	  exports._encodeAudioBufferToMp3 = function(audioBuffer){
	      return function(reject){
	          return function(resolve){
	              return function(){
	                
	                  console.log("Converting to Mp3");
	                  var start = new Date();
	                  console.log("start: " + start);
	                  //log.innerHTML += "\n" + "Converting to Mp3";

	                  var channelData = audioBuffer.getChannelData(0);

	                  var worker = new Worker("js/recorderWorker.js");
	                  worker.onmessage = function(e){
	                      var blob = e.data;
	                      resolve(blob)();

	                      console.log("Done converting to Mp3");
	                      var finish = new Date();
	                      console.log("finish: " + ((finish - start) * 0.001).toFixed(1) + " secs.");
	                    
	                  };                
	                  worker.postMessage({
	                      command: 'init',
	                      config: {
	                          sampleRate: audioBuffer.sampleRate,
	                          mp3LibPath: 'lame.all.js',
	                          vorbisLibPath: 'libvorbis.module.min.js',
	                          recordAsMP3: true,
	                          recordAsOGG: false
	                      }
	                  });
	                  worker.postMessage({
	                      command: 'record',
	                      buffer: [channelData]
	                  });
	                  worker.postMessage({
	                      command: 'exportMP3'
	                  });
	              }
	          }
	      }
	  }









	 
	})(PS["Sound.MP3Encoder"] = PS["Sound.MP3Encoder"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Sound.MP3Encoder"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var WebAudio = PS["WebAudio"];
	  var DOM_File_Types = PS["DOM.File.Types"];     
	  var encodeAudioBufferToMp3 = function (buffer) {
	      return Control_Monad_Aff.makeAff($foreign._encodeAudioBufferToMp3(buffer));
	  };
	  exports["encodeAudioBufferToMp3"] = encodeAudioBufferToMp3;;
	 
	})(PS["Sound.MP3Encoder"] = PS["Sound.MP3Encoder"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Maybe = PS["Data.Maybe"];        
	  var transformA = OpticUI_Markup.attr("transform");
	  var svgNamespace = new Data_Maybe.Just("http://www.w3.org/2000/svg");
	  var svg = OpticUI_Markup.element(svgNamespace)("svg");        
	  var path = OpticUI_Markup.element(svgNamespace)("path");                    
	  var line = OpticUI_Markup.element(svgNamespace)("line");  
	  var g = OpticUI_Markup.element(svgNamespace)("g");          
	  var fillA = OpticUI_Markup.attr("fill");
	  exports["fillA"] = fillA;
	  exports["transformA"] = transformA;
	  exports["svg"] = svg;
	  exports["path"] = path;
	  exports["line"] = line;
	  exports["g"] = g;
	  exports["svgNamespace"] = svgNamespace;;
	 
	})(PS["OpticUI.Markup.SVG"] = PS["OpticUI.Markup.SVG"] || {});
	(function(exports) {
	  //module Soundknot.Polyfill




	  exports.setTransferData = function(type){
	      return function(data){
	          return function(e){
	              return function(){
	                  e.dataTransfer.setData(type, data);
	              }
	          }
	      }
	  }
	})(PS["Soundknot.Polyfill"] = PS["Soundknot.Polyfill"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Polyfill"];
	  var DOM_Event_Event = PS["DOM.Event.Event"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Prelude = PS["Prelude"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var DOM = PS["DOM"];     
	  var stopPropagation = function (e) {
	      return Unsafe_Coerce.unsafeCoerce(DOM_Event_Event.stopPropagation)(e);
	  };
	  var preventDefault = function (e) {
	      return Unsafe_Coerce.unsafeCoerce(DOM_Event_Event.preventDefault)(e);
	  };
	  exports["preventDefault"] = preventDefault;
	  exports["stopPropagation"] = stopPropagation;
	  exports["setTransferData"] = $foreign.setTransferData;;
	 
	})(PS["Soundknot.Polyfill"] = PS["Soundknot.Polyfill"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Int = PS["Data.Int"];
	  var Prelude = PS["Prelude"];
	  var Global = PS["Global"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var DOM = PS["DOM"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];     
	  var textDropDownList = function (xs) {
	      return function (mapper) {
	          return function (selected) {
	              return function (props) {
	                  return function (handler) {
	                      var ss = Prelude.map(Prelude.functorArray)(Prelude.show(Prelude.showString))(xs);
	                      return OpticUI_Markup_HTML.select(Prelude["++"](Prelude.semigroupArray)(props)([ OpticUI_Markup.handle("change")(function (e) {
	                          var _2 = OpticUI_Markup_HTML.getProp(Data_Foreign_Class.stringIsForeign)("value")(e);
	                          if (_2 instanceof Data_Maybe.Nothing) {
	                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                          };
	                          if (_2 instanceof Data_Maybe.Just) {
	                              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(xs)(function (x) {
	                                  var _3 = Prelude["=="](Prelude.eqString)(mapper(x))(_2.value0);
	                                  if (_3) {
	                                      return handler(x);
	                                  };
	                                  if (!_3) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Components line 72, column 1 - line 73, column 1: " + [ _3.constructor.name ]);
	                              });
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Components line 72, column 1 - line 73, column 1: " + [ _2.constructor.name ]);
	                      }) ]))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (s) {
	                          return OpticUI_Markup_HTML.option((function () {
	                              var _5 = Prelude["=="](Prelude.eqString)(s)(selected);
	                              if (_5) {
	                                  return [ OpticUI_Markup.attr("selected")("") ];
	                              };
	                              if (!_5) {
	                                  return [  ];
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Components line 72, column 1 - line 73, column 1: " + [ _5.constructor.name ]);
	                          })())(OpticUI_Markup.text(mapper(s)));
	                      })(xs));
	                  };
	              };
	          };
	      };
	  };
	  var onChange$prime = function (__dict_IsForeign_0) {
	      return function (h) {
	          return OpticUI_Markup.handle("change")(function (e) {
	              return h(e)(OpticUI_Markup_HTML.getProp(__dict_IsForeign_0)("value")(e));
	          });
	      };
	  };
	  var rangeInput = function (s) {
	      return function (props) {
	          return function (handler) {
	              return function (changehandler) {
	                  return OpticUI_Markup_HTML.input_(Prelude["++"](Prelude.semigroupArray)(props)([ OpticUI_Markup_HTML.valueA(Prelude.show(Prelude.showNumber)(s)), OpticUI_Markup_HTML.typeA("range"), OpticUI_Markup.attr("min")("0.0"), OpticUI_Markup.attr("max")("1.0"), OpticUI_Markup.attr("step")("0.01"), OpticUI_Markup_HTML.onInput(Data_Foreign_Class.stringIsForeign)(function (e) {
	                      return function (v) {
	                          return handler(Global.readFloat(Data_Maybe.maybe("1.0")(Prelude.id(Prelude.categoryFn))(v)));
	                      };
	                  }), onChange$prime(Data_Foreign_Class.stringIsForeign)(function (e) {
	                      return function (v) {
	                          return handler(Global.readFloat(Data_Maybe.maybe("1.0")(Prelude.id(Prelude.categoryFn))(v)));
	                      };
	                  }) ]));
	              };
	          };
	      };
	  };
	  var numberInput = function (s) {
	      return function (props) {
	          return function (handler) {
	              return OpticUI_Markup_HTML.input_(Prelude["++"](Prelude.semigroupArray)(props)([ OpticUI_Markup_HTML.valueA(Soundknot_Utils.toFixed(s)(3)), OpticUI_Markup_HTML.typeA("number"), OpticUI_Markup.attr("step")("1"), OpticUI_Markup_HTML.onInput(Data_Foreign_Class.stringIsForeign)(function (e) {
	                  return function (v) {
	                      var _6 = Data_Maybe.maybe("1.0")(Prelude.id(Prelude.categoryFn))(v);
	                      if (_6 === "") {
	                          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                      };
	                      return handler(Global.readFloat(_6));
	                  };
	              }) ]));
	          };
	      };
	  };
	  var intRangeInput = function (s) {
	      return function (props) {
	          return function (handler) {
	              return function (changehandler) {
	                  return OpticUI_Markup_HTML.input_(Prelude["++"](Prelude.semigroupArray)(props)([ OpticUI_Markup_HTML.valueA(Prelude.show(Prelude.showInt)(s)), OpticUI_Markup_HTML.typeA("range"), OpticUI_Markup.attr("min")("0"), OpticUI_Markup.attr("max")("100"), OpticUI_Markup.attr("step")("1"), OpticUI_Markup_HTML.onInput(Data_Foreign_Class.stringIsForeign)(function (e) {
	                      return function (v) {
	                          return handler(Data_Int.floor(Global.readFloat(Data_Maybe.maybe("0")(Prelude.id(Prelude.categoryFn))(v))));
	                      };
	                  }), onChange$prime(Data_Foreign_Class.stringIsForeign)(function (e) {
	                      return function (v) {
	                          return handler(Data_Int.floor(Global.readFloat(Data_Maybe.maybe("0")(Prelude.id(Prelude.categoryFn))(v))));
	                      };
	                  }) ]));
	              };
	          };
	      };
	  };
	  var dropDownList = function (__dict_Eq_1) {
	      return function (__dict_Show_2) {
	          return function (xs) {
	              return function (selected) {
	                  return function (props) {
	                      return function (handler) {
	                          var ss = Prelude.map(Prelude.functorArray)(Prelude.show(__dict_Show_2))(xs);
	                          return OpticUI_Markup_HTML.select(Prelude["++"](Prelude.semigroupArray)(props)([ OpticUI_Markup.handle("change")(function (e) {
	                              var x = Prelude.bind(Data_Maybe.bindMaybe)(OpticUI_Markup_HTML.getProp(Data_Foreign_Class.stringIsForeign)("value")(e))(function (_1) {
	                                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.elemIndex(Prelude.eqString)(_1)(ss))(function (_0) {
	                                      return Data_Array["!!"](xs)(_0);
	                                  });
	                              });
	                              return function __do() {
	                                  (function () {
	                                      if (x instanceof Data_Maybe.Nothing) {
	                                          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                      };
	                                      if (x instanceof Data_Maybe.Just) {
	                                          return handler(x.value0);
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Components line 53, column 1 - line 54, column 1: " + [ x.constructor.name ]);
	                                  })()();
	                                  return Prelude.unit;
	                              };
	                          }) ]))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (s) {
	                              return OpticUI_Markup_HTML.option((function () {
	                                  var _11 = Prelude["=="](__dict_Eq_1)(s)(selected);
	                                  if (_11) {
	                                      return [ OpticUI_Markup.attr("selected")("") ];
	                                  };
	                                  if (!_11) {
	                                      return [  ];
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Components line 53, column 1 - line 54, column 1: " + [ _11.constructor.name ]);
	                              })())(OpticUI_Markup.text(Prelude.show(__dict_Show_2)(s)));
	                          })(xs));
	                      };
	                  };
	              };
	          };
	      };
	  };
	  exports["textDropDownList"] = textDropDownList;
	  exports["dropDownList"] = dropDownList;
	  exports["numberInput"] = numberInput;
	  exports["intRangeInput"] = intRangeInput;
	  exports["rangeInput"] = rangeInput;;
	 
	})(PS["Soundknot.UI.Components"] = PS["Soundknot.UI.Components"] || {});
	(function(exports) {
	  //module Soundknot.Update


	  // for connections
	  var start;
	  var offset;
	  var pathList;         
	  var screenToWorld;
	  var mouse;

	  // for analysers
	  var dataArray;
	  var pitchDetectBuf;

	  function next(){


	      /////////////////////////////////////////////////////////////////////////////////////////////////////////
	      // update analyser
	      /////////////////////////////////////////////////////////////////////////////////////////////////////////
	      var audioGraph = PS["Sound.AudioGraph.Core"]._readFromAudioGraph();

	      var analyserList = document.querySelectorAll("div.wiring-frame[data-node-type=Analyser]");

	      var now = performance.now();

	      var context = PS["Sound.AudioGraph.Core"].getAudioGraphContext();

	      for(var analyserListIndex = 0; analyserListIndex < analyserList.length; analyserListIndex++){
	          var analyserFrame = analyserList[analyserListIndex];
	          var analyserSVG = analyserFrame.querySelector("svg.analyser");
	          var path = analyserSVG.querySelector("path.frequency");
	          var analyserName = analyserSVG.getAttribute("data-name");
	        
	          for(var audioGraphIndex = 0; audioGraphIndex < audioGraph.rnodes.length; audioGraphIndex++){
	              var rnode = audioGraph.rnodes[audioGraphIndex];
	              if(rnode.value0.name === analyserName){

	                  var analyser = rnode.value0.node;

	                  analyserSVG.setAttribute("width", analyser.frequencyBinCount);
	                  analyserSVG.setAttribute("height", 256);                

	                  dataArray = dataArray || new Uint8Array(analyser.frequencyBinCount);

	                  /// frequency domain ///////////////////////////////////////////////////////////////////////////////////
	                  analyser.getByteFrequencyData(dataArray);

	                  var d = "M 0 256";
	                  for(var x = 0; x < dataArray.length; x++){
	                      d += " L " + x + " " + (256 - dataArray[x]);
	                  }
	                  d += " L " + dataArray.length + " 255 Z";

	                  path.setAttribute("d", d);



	                  /// time domain ///////////////////////////////////////////////////////////////////////////////

	                  var timeDomainPath = analyserSVG.querySelector("path.timeDomain");    
	                  var timeDomainRendered = timeDomainPath.getAttribute("timeDomainRendered");
	                  if(timeDomainRendered === null || 1000 < (now - parseFloat(timeDomainRendered))){
	                      analyser.getByteTimeDomainData(dataArray);
	                      var d = "M 0 " + dataArray[0];
	                      for(var x = 1; x < dataArray.length; x++){
	                          d += " L " + x + " " + (255 - dataArray[x]);
	                      }
	                      timeDomainPath.setAttribute("d", d);
	                      timeDomainPath.setAttribute("timeDomainRendered", now);    
	                  }                    

	                  /// Pitch detect /////////////////////////////////////////////////////////////////////////////////
	                
	                  pitchDetectBuf = pitchDetectBuf || new Float32Array(1024);
	                  analyser.getFloatTimeDomainData(pitchDetectBuf);
	                  var pitch = autoCorrelate(pitchDetectBuf, context.sampleRate);
	                  if(pitch !== -1){
	                      var noteStrings = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
	                      var note =  noteFromPitch( pitch );
	                      var str = noteStrings[note % 12];
	                      var detune = centsOffFromPitch(pitch, note);
	                      var mark = detune == 0 ? "" : 
	                                 detune <  0 ? "flat" : "sharp";

	                      var pitchHistory = analyserFrame.data_pitchHistory || [];
	                      pitchHistory.push(pitch);
	                      while(5 < pitchHistory.length){
	                          pitchHistory.shift();
	                      }
	                      analyserFrame.data_pitchHistory = pitchHistory;

	                      // get the highest occurrence frequency
	                      var xs = {};
	                      pitchHistory.forEach(function(v){
	                          var p = v | 0;
	                          xs[p] = xs[p] ? (xs[p] + 1) : 1;
	                      });
	                      var mV = 0, mI = 0;
	                      Object.keys(xs).forEach(function(i){
	                          var v = xs[i];
	                          if(mI < v){
	                              mI = i;
	                              mV = v;
	                          }
	                      });
	                      var pitchAvarage = mI;



	                      //var pitchAvarage = pitchHistory.reduce(function(x, y){ return x + y }, 0) / pitchHistory.length;
	                      var note =  noteFromPitch( pitchAvarage | 0 );
	                      var str = noteStrings[note % 12];


	                      analyserFrame.querySelector("div.pitch").textContent = "pitch: " + pitchAvarage + " Hz";
	                      analyserFrame.querySelector("div.note").textContent = "note: " + str;

	                  }

	                  break;
	              }
	          }
	      }


	      ////////////////////////////////////////////////////////////////////////////////////////////////
	      // update timeline cursor position
	      ////////////////////////////////////////////////////////////////////////////////////////
	      var context = PS["Sound.AudioGraph.Core"].getAudioGraphContext();
	      var now = context.currentTime;

	      var list = document.querySelectorAll(".timeline .cursor");
	      for(var i = 0; i < list.length; i++){
	          var cursor = list[i];
	          if(cursor.getAttribute("data-play") === "true"){
	              var bpm = parseFloat(cursor.getAttribute("data-bpm"));
	              var scale = parseFloat(cursor.getAttribute("data-scale"));
	              var time = parseFloat(cursor.getAttribute("data-time"));
	              var translationInBeats = parseFloat(cursor.getAttribute("data-translation"));            
	              var positionInBeats = parseFloat(cursor.getAttribute("data-position"));

	              var deltaInSeconds = now - time;
	              var deltaInBeats = (bpm / 60.0) * deltaInSeconds;

	              var currentPositionInBeats = positionInBeats + deltaInBeats;
	              var positionInScreenCoord = scale * (currentPositionInBeats - translationInBeats);


	              cursor.style.left = positionInScreenCoord + "px";

	              cursor.setAttribute("data-current-position", currentPositionInBeats);
	          }
	      }


	      //**** Anothor Hack ***
	      // disable an frame that have 0.0 of opacity
	      var frameList = document.querySelectorAll("div.wiring-frame");
	      for(var i = 0; i < frameList.length; i++){
	          var frame = frameList[i];
	          if(parseFloat(frame.style.opacity) === 0 && frame.style.display !== "none"){
	              frame.style.display = "none";
	          }else if(parseFloat(frame.style.opacity) !== 0 && frame.style.display === "none"){
	              frame.style.display = "block";
	          } 
	      }

	      var videoFramesList = document.querySelectorAll("div.videoFrames");
	      for(var k = 0; k < videoFramesList.length; k++){
	          var videoFrames = videoFramesList[k];
	          for(var i = 0; i < videoFrames.children.length; i++){
	              var frame = videoFrames.children[i];
	              if(frame.currentTime != 10 * i){
	                  frame.currentTime = 10 * i;
	              }
	          }
	      }



	      ///////////////////////////////////////////////////////////////////////////////////////////////////////
	      // update connection
	      ///////////////////////////////////////////////////////////////////////////////////////////////////////
	      function getPosition(name){      
	          var n = path.getAttribute(name);
	          if(n === ""){
	              return mouse;
	          }
	          var target = document.getElementById(n);
	          var bounds = target.getBoundingClientRect();
	          return {
	              x: (bounds.left + bounds.right) * 0.5,
	              y: (bounds.top + bounds.bottom) * 0.5
	          }

	      }

	      if((performance.now() - start) < (300 + 10)){
	          for(var z = 0; z < pathList.length; z++){
	              var path = pathList[z];
	              var o = getPosition("data-output");
	              var i = getPosition("data-input");
	              if(i !== "" && i !== null){
	                  var a = screenToWorld({ x: o.x - offset.left, y: o.y - offset.top });
	                  var b = screenToWorld(i == "" ? mouse : { x: i.x - offset.left, y: i.y - offset.top });
	                  var dx = Math.abs(a.x - b.x) * 0.5;
	                  var dy = Math.min(300, Math.abs(a.y - b.y) * 0.5);
	                  var d = Math.max(dx, dy);
	                  path.setAttribute("d", ["M", a.x, a.y, "C", a.x + d, a.y, b.x - d, b.y, b.x, b.y].join(" "));                     
	              }
	          }
	      }

	      window.requestAnimationFrame(next);    
	  }

	  next();

	  exports._updatePath = function(_screenToWorld){
	      return function(_mouse){
	          return function(){

	              // keep to use the latest transformation function
	              screenToWorld = _screenToWorld;
	              mouse = _mouse;

	              var svg = document.querySelector("svg");
	              pathList = document.querySelectorAll("path.connection");           

	              if(svg){
	                  offset = svg.getBoundingClientRect();
	                  start = performance.now();
	              }
	          }
	      }
	  }






















	  /*
	The MIT License (MIT)
	Copyright (c) 2014 Chris Wilson
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/  




	  function autoCorrelate( buf, sampleRate ) {
	      var MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.

	      var SIZE = buf.length;
	      var MAX_SAMPLES = Math.floor(SIZE/2);
	      var best_offset = -1;
	      var best_correlation = 0;
	      var rms = 0;
	      var foundGoodCorrelation = false;
	      var correlations = new Array(MAX_SAMPLES);

	      for (var i=0;i<SIZE;i++) {
	          var val = buf[i];
	          rms += val*val;
	      }
	      rms = Math.sqrt(rms/SIZE);
	      if (rms<0.01) // not enough signal
	          return -1;

	      var lastCorrelation=1;
	      for (var offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {
	          var correlation = 0;

	          for (var i=0; i<MAX_SAMPLES; i++) {
	              correlation += Math.abs((buf[i])-(buf[i+offset]));
	          }
	          correlation = 1 - (correlation/MAX_SAMPLES);
	          correlations[offset] = correlation; // store it, for the tweaking we need to do below.
	          if ((correlation>0.9) && (correlation > lastCorrelation)) {
	              foundGoodCorrelation = true;
	              if (correlation > best_correlation) {
	                  best_correlation = correlation;
	                  best_offset = offset;
	              }
	          } else if (foundGoodCorrelation) {
	              // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.
	              // Now we need to tweak the offset - by interpolating between the values to the left and right of the
	              // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -
	              // we need to do a curve fit on correlations[] around best_offset in order to better determine precise
	              // (anti-aliased) offset.

	              // we know best_offset >=1, 
	              // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and 
	              // we can't drop into this clause until the following pass (else if).
	              var shift = (correlations[best_offset+1] - correlations[best_offset-1])/correlations[best_offset];  
	              return sampleRate/(best_offset+(8*shift));
	          }
	          lastCorrelation = correlation;
	      }
	      if (best_correlation > 0.01) {
	          // console.log("f = " + sampleRate/best_offset + "Hz (rms: " + rms + " confidence: " + best_correlation + ")")
	          return sampleRate/best_offset;
	      }
	      return -1;
	  //  var best_frequency = sampleRate/best_offset;
	  }




	  function noteFromPitch( frequency ) {
	      var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );
	      return Math.round( noteNum ) + 69;
	  }

	  function frequencyFromNoteNumber( note ) {
	      return 440 * Math.pow(2,(note-69)/12);
	  }

	  function centsOffFromPitch( frequency, note ) {
	      return Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );
	  }
	})(PS["Soundknot.Update"] = PS["Soundknot.Update"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_StrMap = PS["Data.StrMap"];     
	  var ssoDir = "soundfont/sonatina-symphonic-orchestra/";
	  var sfzList = [ "Brass - Bass Trombone Solo.sfz", "Brass - Horn Solo.sfz", "Brass - Horns Staccato.sfz", "Brass - Horns Sustain.sfz", "Brass - Tenor Trombone Solo.sfz", "Brass - Trombones Staccato.sfz", "Brass - Trombones Sustain.sfz", "Brass - Trumpet Solo.sfz", "Brass - Trumpets Staccato.sfz", "Brass - Trumpets Sustain.sfz", "Brass - Tuba Staccato.sfz", "Brass - Tuba Sustain.sfz", "Chorus - Female.sfz", "Chorus - Male.sfz", "Chorus - Mixed.sfz", "Concert Harp.sfz", "Keys - Grand Piano.sfz", "Percussion - All Percussion.sfz", "Percussion - Bass Drum & Snare.sfz", "Percussion - Chimes.sfz", "Percussion - Conga.sfz", "Percussion - Cymbals & Tamtam.sfz", "Percussion - Glockenspiel.sfz", "Percussion - Timpani.sfz", "Percussion - Triangle.sfz", "Percussion - Various.sfz", "Percussion - Xylophone.sfz", "Strings - 1st Violins Pizzicato.sfz", "Strings - 1st Violins Staccato.sfz", "Strings - 1st Violins Sustain.sfz", "Strings - 2nd Violins Pizzicato.sfz", "Strings - 2nd Violins Staccato.sfz", "Strings - 2nd Violins Sustain.sfz", "Strings - Basses Pizzicato.sfz", "Strings - Basses Staccato.sfz", "Strings - Basses Sustain.sfz", "Strings - Celli Pizzicato.sfz", "Strings - Celli Staccato.sfz", "Strings - Celli Sustain.sfz", "Strings - Cello Solo.sfz", "Strings - Violas Pizzicato.sfz", "Strings - Violas Sustain.sfz", "Strings - Violin Solo.sfz", "Woodwinds - Alto Flute Solo.sfz", "Woodwinds - Bass Clarinet Solo.sfz", "Woodwinds - Bassoon Solo.sfz", "Woodwinds - Bassoons Sustain.sfz", "Woodwinds - Clarinet Solo.sfz", "Woodwinds - Clarinets Sustain.sfz", "Woodwinds - Contrabassoon Solo.sfz", "Woodwinds - Cor Anglais Solo.sfz", "Woodwinds - Flute Solo.sfz", "Woodwinds - Flutes Staccato.sfz", "Woodwinds - Flutes Sustain.sfz", "Woodwinds - Oboe Solo.sfz", "Woodwinds - Oboes Sustain.sfz", "Woodwinds - Piccolo Solo.sfz" ];
	  exports["sfzList"] = sfzList;
	  exports["ssoDir"] = ssoDir;;
	 
	})(PS["Soundknot.UI.Instrument.Types"] = PS["Soundknot.UI.Instrument.Types"] || {});
	(function(exports) {
	    

	  exports.createObjectURL = function(blob){
	      return function(){
	          return window.URL.createObjectURL(blob);
	      };
	  };


	  exports.fileToBlob = function(file){
	      return file;
	  }


	  exports._readFile = function(blob){
	      return function(reject){
	          return function(resolve){
	              return function(){
	                  var reader = new FileReader();
	                  reader.onload = function() {
	                      resolve(reader.result)();
	                  };
	                  reader.onerror = function(e) {
	                      reject(e)();
	                  };
	                  reader.readAsArrayBuffer(blob);
	              }
	          }
	      }
	  }
	})(PS["TypedArray"] = PS["TypedArray"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["TypedArray"];
	  var Prelude = PS["Prelude"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var DOM = PS["DOM"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];     
	  var readFile = function (blob) {
	      return Control_Monad_Aff.makeAff($foreign._readFile(blob));
	  };
	  exports["readFile"] = readFile;
	  exports["fileToBlob"] = $foreign.fileToBlob;
	  exports["createObjectURL"] = $foreign.createObjectURL;;
	 
	})(PS["TypedArray"] = PS["TypedArray"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Update"];
	  var Data_Ord = PS["Data.Ord"];
	  var OpticUI_Core = PS["OpticUI.Core"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Soundknot_UI_Instrument_Types = PS["Soundknot.UI.Instrument.Types"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Array = PS["Data.Array"];
	  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_String = PS["Data.String"];
	  var Data_Tuple = PS["Data.Tuple"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Audio = PS["Soundknot.Audio"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var TypedArray = PS["TypedArray"];
	  var WebAudio = PS["WebAudio"];
	  var MediaStream = PS["MediaStream"];
	  var Sound_AudioGraph_Core = PS["Sound.AudioGraph.Core"];
	  var SoundFont = PS["SoundFont"];
	  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
	  var Data_List = PS["Data.List"];     
	  var updatePath = function (_40) {
	      return $foreign._updatePath(Soundknot_Types.screenToWorld(_40))(Data_Nullable.toNullable(Data_Maybe.fromMaybe(Data_Maybe.Nothing.value)(Prelude["<$>"](Data_Maybe.functorMaybe)(function (_0) {
	          return _0.mouse;
	      })(_40.connecting))));
	  };
	  var requestUserMedia = function (_42) {
	      if (_42.driver instanceof Data_Maybe.Nothing) {
	          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	      };
	      if (_42.driver instanceof Data_Maybe.Just) {
	          return Prelude.bind(Control_Monad_Aff.bindAff)(MediaStream.getUserMedia({
	              video: false, 
	              audio: true
	          }))(function (_26) {
	              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(_42.driver.value0(function (_34) {
	                  var newState = (function () {
	                      var _51 = {};
	                      for (var _52 in _34) {
	                          if (_34.hasOwnProperty(_52)) {
	                              _51[_52] = _34[_52];
	                          };
	                      };
	                      _51.localMediaStream = new Data_Maybe.Just(_26);
	                      return _51;
	                  })();
	                  return function __do() {
	                      var _25 = Sound_AudioGraph_Core.getAudioGraphContext();
	                      var _24 = WebAudio_Core.currentTime(_25)();
	                      updatePath(newState)();
	                      Soundknot_Audio.renderAudio(_24)(newState)();
	                      return newState;
	                  };
	              }));
	          });
	      };
	      throw new Error("Failed pattern match at Soundknot.Update line 164, column 1 - line 165, column 1: " + [ _42.driver.constructor.name ]);
	  };
	  var registerAudioBuffer = function (driver) {
	      return function (arrayBuffer) {
	          return function (name) {
	              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Sound_AudioGraph_Core.getAudioGraphContext))(function (_23) {
	                  return Prelude.bind(Control_Monad_Aff.bindAff)(WebAudio_Core.decodeAudioFile(arrayBuffer)(_23))(function (_22) {
	                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(driver(function (_33) {
	                          var newState = (function () {
	                              var _59 = {};
	                              for (var _60 in _33) {
	                                  if (_33.hasOwnProperty(_60)) {
	                                      _59[_60] = _33[_60];
	                                  };
	                              };
	                              _59.audioBuffers = Data_StrMap.insert(name)(_22)(_33.audioBuffers);
	                              _59.audioFiles = Data_StrMap.insert(name)(arrayBuffer)(_33.audioFiles);
	                              return _59;
	                          })();
	                          return function __do() {
	                              var _21 = Sound_AudioGraph_Core.getAudioGraphContext();
	                              var _20 = WebAudio_Core.currentTime(_21)();
	                              updatePath(newState)();
	                              Soundknot_Audio.renderAudio(_20)(newState)();
	                              return newState;
	                          };
	                      }));
	                  });
	              });
	          };
	      };
	  };
	  var normalizeProject = function (_39) {
	      var verify = function (_44) {
	          return Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqString)(_44.node)(Prelude.map(Prelude.functorArray)(function (_30) {
	              return _30.name;
	          })(_39.nodes));
	      };
	      var nodeOf = function (_45) {
	          return _45.node;
	      };
	      var getNode = function (_43) {
	          return Data_Array.head(Data_Array.filter(function (_29) {
	              return Prelude["=="](Prelude.eqString)(_29.name)(_43.node);
	          })(_39.nodes));
	      };
	      var removeInputDuplication = function (es) {
	          return Data_Array.nubBy(function (_32) {
	              return function (_31) {
	                  return Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(Prelude.pure(Data_Maybe.applicativeMaybe)(_32.input))(function (_10) {
	                      return Prelude.bind(Data_Maybe.bindMaybe)(Prelude.pure(Data_Maybe.applicativeMaybe)(_31.input))(function (_9) {
	                          return Prelude.bind(Data_Maybe.bindMaybe)(getNode(_32.input))(function (_8) {
	                              return Prelude.bind(Data_Maybe.bindMaybe)(getNode(_31.input))(function (_7) {
	                                  if (_8.props instanceof Soundknot_Types.ConvolverFrame) {
	                                      if (_7.props instanceof Soundknot_Types.ConvolverFrame) {
	                                          return Prelude.pure(Data_Maybe.applicativeMaybe)(Prelude["=="](Prelude.eqString)(_10.connector)("buffer") && Prelude["=="](Prelude.eqString)(_9.connector)("buffer"));
	                                      };
	                                      return Prelude.pure(Data_Maybe.applicativeMaybe)(false);
	                                  };
	                                  return Prelude.pure(Data_Maybe.applicativeMaybe)(false);
	                              });
	                          });
	                      });
	                  }));
	              };
	          })(es);
	      };
	      var edges = Data_Array.filter(function (_28) {
	          return Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(Prelude.pure(Data_Maybe.applicativeMaybe)(_28.output))(function (_6) {
	              return Prelude.bind(Data_Maybe.bindMaybe)(Prelude.pure(Data_Maybe.applicativeMaybe)(_28.input))(function (_5) {
	                  return Prelude.bind(Data_Maybe.bindMaybe)(getNode(_28.output))(function (_4) {
	                      return Prelude.bind(Data_Maybe.bindMaybe)(getNode(_28.input))(function (_3) {
	                          return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(Data_Array.filter(function (con) {
	                              return Prelude["=="](Prelude.eqString)(_4.name + ("-" + con.name))(_6.connector);
	                          })(Soundknot_Types.getOutputPorts(_4.name)(_4.props))))(function (_2) {
	                              return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(Data_Array.filter(function (con) {
	                                  return Prelude["=="](Prelude.eqString)(_3.name + ("-" + con.name))(_5.connector);
	                              })(Soundknot_Types.getInputPorts(_3.name)(_3.props))))(function (_1) {
	                                  var differentNodeOfinputAndOutput = Prelude["/="](Prelude.eqString)(nodeOf(_28.output))(nodeOf(_28.input));
	                                  var haveSameValueType = Prelude["=="](Soundknot_Types.eq_PortValue)(_2.type)(_1.type);
	                                  return Prelude.pure(Data_Maybe.applicativeMaybe)(differentNodeOfinputAndOutput && haveSameValueType);
	                              });
	                          });
	                      });
	                  });
	              });
	          }));
	      })(Data_Array.nub(Soundknot_Types.eq_Edge)(_39.edges));
	      return {
	          nodes: _39.nodes, 
	          edges: removeInputDuplication(edges)
	      };
	  };
	  var normalizeState = function (_38) {
	      var project = (function () {
	          var _88 = Soundknot_Historical.runHistorical(_38.project);
	          return _88;
	      })();
	      var _89 = {};
	      for (var _90 in _38) {
	          if (_38.hasOwnProperty(_90)) {
	              _89[_90] = _38[_90];
	          };
	      };
	      _89.project = Soundknot_Historical.overwrite(_38.project)(normalizeProject(project));
	      _89.scaleFactor = Data_Ord.max(Prelude.ordInt)(Soundknot_Types.minScaleFactor)(Data_Ord.min(Prelude.ordInt)(Soundknot_Types.maxScaleFactor)(_38.scaleFactor));
	      return _89;
	  };
	  var updateApplication = function (h) {
	      return function (state) {
	          var s = normalizeState(state);
	          return function __do() {
	              OpticUI_Core.runHandler(h)(s)();
	              updatePath(s)();
	              var _13 = Sound_AudioGraph_Core.getAudioGraphContext();
	              var _12 = WebAudio_Core.currentTime(_13)();
	              var _11 = Soundknot_Audio.renderAudio(_12)(s)();
	              return Sound_AudioGraph_Core.update(_11)();
	          };
	      };
	  };
	  var updateApplicationByDriver = function (driver) {
	      return function (f) {
	          return driver(function (state) {
	              return function __do() {
	                  var _17 = Prelude["<$>"](Control_Monad_Eff.functorEff)(normalizeState)(f(state))();
	                  var _16 = Sound_AudioGraph_Core.getAudioGraphContext();
	                  var _15 = WebAudio_Core.currentTime(_16)();
	                  var _14 = Soundknot_Audio.renderAudio(_15)(_17)();
	                  Sound_AudioGraph_Core.update(_14)();
	                  return _17;
	              };
	          });
	      };
	  };
	  var loadAudioFileByURL = function (driver) {
	      return function (url) {
	          return Prelude.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableArrayBuffer)(url))(function (_19) {
	              return registerAudioBuffer(driver)(_19.response)(url);
	          });
	      };
	  };
	  var loadInstrument = function (sfzURL) {
	      return function (driver) {
	          return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableString)(sfzURL))(function (_27) {
	              var _100 = SoundFont.parseSFZ(_27.response);
	              if (_100 instanceof Data_Either.Left) {
	                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("[" + (Prelude.show(Prelude.showInt)(_100.value0.pos) + ("] " + (Prelude.show(Text_Parsing_StringParser.showParseError)(_100.value0.err) + ("\n" + Data_String.drop(_100.value0.pos)(_27.response)))))));
	              };
	              if (_100 instanceof Data_Either.Right) {
	                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log(Unsafe_Coerce.unsafeCoerce(_100.value0))))(function () {
	                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(driver(function (_37) {
	                          var _103 = Data_StrMap.lookup(sfzURL)(_37.sfzMap);
	                          if (_103 instanceof Data_Maybe.Just) {
	                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(_37);
	                          };
	                          if (_103 instanceof Data_Maybe.Nothing) {
	                              return function __do() {
	                                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_100.value0)(function (group) {
	                                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(group.regions)(function (region) {
	                                          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(region)(function (_36) {
	                                              if (_36.value0 === "sample") {
	                                                  return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(loadAudioFileByURL(driver)(Soundknot_UI_Instrument_Types.ssoDir + Data_String.replace("#")("%23")(_36.value1)));
	                                              };
	                                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                          });
	                                      });
	                                  })();
	                                  var _109 = {};
	                                  for (var _110 in _37) {
	                                      if (_37.hasOwnProperty(_110)) {
	                                          _109[_110] = _37[_110];
	                                      };
	                                  };
	                                  _109.sfzMap = Data_StrMap.insert(sfzURL)(_100.value0)(_37.sfzMap);
	                                  return _109;
	                              };
	                          };
	                          throw new Error("Failed pattern match at Soundknot.Update line 194, column 1 - line 195, column 1: " + [ _103.constructor.name ]);
	                      }));
	                  });
	              };
	              throw new Error("Failed pattern match at Soundknot.Update line 194, column 1 - line 195, column 1: " + [ _100.constructor.name ]);
	          }));
	      };
	  };
	  var loadAudioFile = function (driver) {
	      return function (file) {
	          return Prelude.bind(Control_Monad_Aff.bindAff)(TypedArray.readFile(TypedArray.fileToBlob(file)))(function (_18) {
	              return registerAudioBuffer(driver)(_18)((Unsafe_Coerce.unsafeCoerce(file)).name);
	          });
	      };
	  };
	  exports["updateApplicationByDriver"] = updateApplicationByDriver;
	  exports["loadInstrument"] = loadInstrument;
	  exports["registerAudioBuffer"] = registerAudioBuffer;
	  exports["loadAudioFileByURL"] = loadAudioFileByURL;
	  exports["requestUserMedia"] = requestUserMedia;
	  exports["normalizeProject"] = normalizeProject;
	  exports["loadAudioFile"] = loadAudioFile;
	  exports["updateApplication"] = updateApplication;;
	 
	})(PS["Soundknot.Update"] = PS["Soundknot.Update"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var Prelude = PS["Prelude"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var wiringFrame = "wiring-frame";
	  var viewFrameMenuBar = "viewFrameMenuBar";
	  var transformPane = "transformPane";
	  var topMenu = "topMenu";
	  var titleText = "titleText";
	  var titleBar = "titleBar";
	  var timeDomain = "timeDomain";
	  var svgCanvas = "svgCanvas";
	  var runClassName = function (_0) {
	      return _0;
	  };
	  var projectOpenButtonList = "projectOpenButtonList";
	  var projectOpenButton = "projectOpenButton";
	  var projectName = "projectName";
	  var projectListBackground = "projectListBackground";
	  var projectList = "projectList";
	  var projectEntryLabel = "projectEntryLabel";
	  var projectEntry = "projectEntry";
	  var outputConnector = "outputConnector";
	  var nodeContentPane = "nodeContentPane";
	  var leftPane = "leftPane";
	  var inputConnector = "inputConnector";
	  var groundLayer = "groundLayer";
	  var frequency = "frequency";
	  var destinationContent = "destinationContent";
	  var connector = "connector";
	  var closeButton = "closeButton";
	  var clippingPane = "clippingPane";
	  var classA$prime = function (_1) {
	      return OpticUI_Markup_HTML.classA(_1);
	  };
	  var centerPane = "centerPane";
	  var btn = "btn";
	  var bottomPane = "bottomPane";
	  exports["timeDomain"] = timeDomain;
	  exports["frequency"] = frequency;
	  exports["projectOpenButtonList"] = projectOpenButtonList;
	  exports["projectOpenButton"] = projectOpenButton;
	  exports["projectEntryLabel"] = projectEntryLabel;
	  exports["projectListBackground"] = projectListBackground;
	  exports["projectEntry"] = projectEntry;
	  exports["projectList"] = projectList;
	  exports["viewFrameMenuBar"] = viewFrameMenuBar;
	  exports["svgCanvas"] = svgCanvas;
	  exports["outputConnector"] = outputConnector;
	  exports["inputConnector"] = inputConnector;
	  exports["connector"] = connector;
	  exports["destinationContent"] = destinationContent;
	  exports["closeButton"] = closeButton;
	  exports["titleText"] = titleText;
	  exports["nodeContentPane"] = nodeContentPane;
	  exports["clippingPane"] = clippingPane;
	  exports["titleBar"] = titleBar;
	  exports["transformPane"] = transformPane;
	  exports["btn"] = btn;
	  exports["centerPane"] = centerPane;
	  exports["projectName"] = projectName;
	  exports["leftPane"] = leftPane;
	  exports["bottomPane"] = bottomPane;
	  exports["topMenu"] = topMenu;
	  exports["wiringFrame"] = wiringFrame;
	  exports["groundLayer"] = groundLayer;
	  exports["classA'"] = classA$prime;
	  exports["runClassName"] = runClassName;;
	 
	})(PS["Soundknot.Classes"] = PS["Soundknot.Classes"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_String = PS["CSS.String"];
	  var Prelude = PS["Prelude"];
	  var CSS = PS["CSS"];
	  var CSS_Property = PS["CSS.Property"];     
	  var Overflow = function (x) {
	      return x;
	  };
	  var JustifyContent = function (x) {
	      return x;
	  };
	  var FlexDirection = function (x) {
	      return x;
	  };
	  var valOverflow = new CSS_Property.Val(function (_4) {
	      return _4;
	  });
	  var valJustifyContent = new CSS_Property.Val(function (_2) {
	      return _2;
	  });
	  var valFlexDirection = new CSS_Property.Val(function (_3) {
	      return _3;
	  });
	  var valAlignSelf = new CSS_Property.Val(function (_1) {
	      return _1;
	  });
	  var valAlignItems = new CSS_Property.Val(function (_0) {
	      return _0;
	  });
	  var textAlign = CSS_Stylesheet.key(valJustifyContent)(CSS_String.fromString(CSS_Property.isStringKey)("text-align"));
	  var scroll = Overflow(CSS_String.fromString(CSS_Property.isStringValue)("scroll"));
	  var overflowY = CSS_Stylesheet.key(valOverflow)(CSS_String.fromString(CSS_Property.isStringKey)("overflow-y"));
	  var overflow = CSS_Stylesheet.key(valOverflow)(CSS_String.fromString(CSS_Property.isStringKey)("overflow"));
	  var justifyContent = CSS_Stylesheet.key(valJustifyContent)(CSS_String.fromString(CSS_Property.isStringKey)("justify-content"));
	  var hidden = Overflow(CSS_String.fromString(CSS_Property.isStringValue)("hidden"));
	  var flexGrow = function (v) {
	      return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("flex-grow"))(Prelude.show(Prelude.showNumber)(v));
	  };
	  var flexDirection = CSS_Stylesheet.key(valFlexDirection)(CSS_String.fromString(CSS_Property.isStringKey)("flex-direction"));
	  var column = FlexDirection(CSS_String.fromString(CSS_Property.isStringValue)("column"));
	  var center = JustifyContent(CSS_String.fromString(CSS_Property.isStringValue)("center"));
	  var boxShadow = CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("box-shadow"));
	  var alignSelf = CSS_Stylesheet.key(valAlignSelf)(CSS_String.fromString(CSS_Property.isStringKey)("align-self"));
	  var alignItems = CSS_Stylesheet.key(valAlignItems)(CSS_String.fromString(CSS_Property.isStringKey)("align-items"));
	  exports["Overflow"] = Overflow;
	  exports["FlexDirection"] = FlexDirection;
	  exports["JustifyContent"] = JustifyContent;
	  exports["textAlign"] = textAlign;
	  exports["scroll"] = scroll;
	  exports["hidden"] = hidden;
	  exports["overflowY"] = overflowY;
	  exports["overflow"] = overflow;
	  exports["column"] = column;
	  exports["flexDirection"] = flexDirection;
	  exports["center"] = center;
	  exports["justifyContent"] = justifyContent;
	  exports["alignSelf"] = alignSelf;
	  exports["alignItems"] = alignItems;
	  exports["flexGrow"] = flexGrow;
	  exports["boxShadow"] = boxShadow;
	  exports["valAlignItems"] = valAlignItems;
	  exports["valAlignSelf"] = valAlignSelf;
	  exports["valJustifyContent"] = valJustifyContent;
	  exports["valFlexDirection"] = valFlexDirection;
	  exports["valOverflow"] = valOverflow;;
	 
	})(PS["Soundknot.Css"] = PS["Soundknot.Css"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Selector = PS["CSS.Selector"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Font = PS["CSS.Font"];
	  var CSS_Geometry = PS["CSS.Geometry"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_Background = PS["CSS.Background"];
	  var CSS_Display = PS["CSS.Display"];
	  var Data_Int = PS["Data.Int"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Prelude = PS["Prelude"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Css = PS["Soundknot.Css"];
	  var CSS = PS["CSS"];
	  var CSS_Property = PS["CSS.Property"];     
	  var $at = function (p) {
	      return function (v) {
	          return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)(p))(v);
	      };
	  };
	  var sliderHeight = 32;
	  var sequencerAudioTrackHeight = 128 * 4 | 0;
	  var selectedElementColor = CSS_Color.rgba(169)(169)(242)(Unsafe_Coerce.unsafeCoerce(0.3));
	  var cursorSliderHeight = 24;
	  var clipNameHeight = 16;
	  var sampledAudioTrackHeight = 72 + clipNameHeight | 0;
	  var css = function (transition) {
	      return function (projectListVisible) {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".timeline"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("relative"))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("overflow")("hidden"))(function () {
	                  return CSS_Font.color(CSS_Color.white);
	              });
	          })))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".timeline .cursor"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("1px"))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("background-color")("red"))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("pointer-events")("none"))(function () {
	                                      return $at("margin-top")(Prelude.show(Prelude.showInt)(cursorSliderHeight) + "px");
	                                  });
	                              });
	                          });
	                      });
	                  });
	              })))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".slider"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("box-sizing")("border-box"))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("relative"))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("0px"))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("100%"))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")(Prelude.show(Prelude.showInt)(sliderHeight) + "px"))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("background-color")("rgba(0, 0, 0, 0.5)"))(function () {
	                                              return $at("box-shadow")("0px 4px 4px rgba(0,0,0,0.5)");
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  })))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".cursorSlider"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("background-color")("rgba(75, 86, 98, 1.0)"))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")(Prelude.show(Prelude.showInt)(cursorSliderHeight - 8) + "px"))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("margin")("4px"))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("border-radius")("100px"))(function () {
	                                      return $at("cursor")("w-resize");
	                                  });
	                              });
	                          });
	                      })))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".trackHeader"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("box-sizing")("border-box"))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.px(Data_Int.toNumber(sampledAudioTrackHeight))))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("padding")("4px"))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("border-radius")("4px 0px 0px 4px"))(function () {
	                                          return Soundknot_Css.overflow(Soundknot_Css.hidden);
	                                      });
	                                  });
	                              });
	                          })))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".trackHeader.selected"))(CSS_Background.backgroundColor(selectedElementColor)))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".trackHeader:nth-child(2n+1)"))($at("background-color")("rgba(0, 0, 0, 0.1)")))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".trackHeader.selected:nth-child(2n+1)"))($at("background-color")("rgba(0, 0, 100, 0.2)")))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".audioTrack"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("box-sizing")("border-box"))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")(Prelude.show(Prelude.showInt)(sampledAudioTrackHeight) + "px"))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("100%"))(function () {
	                                                      return $at("position")("relative");
	                                                  });
	                                              });
	                                          })))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".audioTrack.selected"))(CSS_Background.backgroundColor(selectedElementColor)))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".audioTrack:nth-child(2n+1)"))($at("background-color")("rgba(0, 0, 0, 0.1)")))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".audioTrack.selected:nth-child(2n+1)"))($at("background-color")("rgba(0, 0, 100, 0.2)")))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("div.waveformContent"))($at("position")("relative")))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("div.videoFrames"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("0px"))(function () {
	                                                                          return $at("height")("100%");
	                                                                      });
	                                                                  });
	                                                              })))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("video.videoFrame"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("flex-shrink")("0"))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                          return $at("width")("auto");
	                                                                      });
	                                                                  })))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".waveform"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("box-sizing")("border-box"))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("background-color")("rgba(200, 200, 200, 0.2)"))(function () {
	                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("border")("solid 2px grey"))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-property")("background-color"))(function () {
	                                                                                              return $at("transition-duration")("0.3s");
	                                                                                          });
	                                                                                      });
	                                                                                  });
	                                                                              });
	                                                                          });
	                                                                      })))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".waveform.selected"))($at("background-color")("rgb(169, 169, 242)")))(function () {
	                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".waveform svg"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("0px"))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("100%"))(function () {
	                                                                                              return $at("height")("100%");
	                                                                                          });
	                                                                                      });
	                                                                                  });
	                                                                              })))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".clipName"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("font-size")("8px"))(function () {
	                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")(Prelude.show(Prelude.showInt)(clipNameHeight) + "px"))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("white-space")("nowrap"))(function () {
	                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("overflow")("hidden"))(function () {
	                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("color")("black"))(function () {
	                                                                                                      return $at("background-color")("rgba(0, 0, 0, 0.1)");
	                                                                                                  });
	                                                                                              });
	                                                                                          });
	                                                                                      });
	                                                                                  })))(function () {
	                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".controlPanel"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("align-items")("center"))(function () {
	                                                                                              return CSS_Geometry.margin(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0));
	                                                                                          });
	                                                                                      })))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".controlPanel input[type=\"number\"]"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.em(2.0)))(function () {
	                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.em(6.0)))(function () {
	                                                                                                  return $at("text-align")("right");
	                                                                                              });
	                                                                                          })))(function () {
	                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("svg path.beatTick"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("fill")("none"))(function () {
	                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("stroke")("white"))(function () {
	                                                                                                      return $at("pointer-events")("none");
	                                                                                                  });
	                                                                                              })))(function () {
	                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("svg text.beatLabel"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("fill")("white"))(function () {
	                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("stroke")("none"))(function () {
	                                                                                                          return $at("pointer-events")("none");
	                                                                                                      });
	                                                                                                  })))(function () {
	                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("svg path.secondsTick"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("fill")("none"))(function () {
	                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("stroke")("white"))(function () {
	                                                                                                              return $at("pointer-events")("none");
	                                                                                                          });
	                                                                                                      })))(function () {
	                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".resizer"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("6px"))(function () {
	                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("cursor")("w-resize"))(function () {
	                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                                                                                                                          return $at("top")("0px");
	                                                                                                                      });
	                                                                                                                  });
	                                                                                                              });
	                                                                                                          })))(function () {
	                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".resizer:hover"))($at("background-color")("rgba(0, 0, 0, 0.3)")))(function () {
	                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("div.sequencerRow"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("4px;"))(function () {
	                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("flex-shrink")("1.0"))(function () {
	                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("flex-grow")("1.0"))(function () {
	                                                                                                                              return $at("pointer-events")("none");
	                                                                                                                          });
	                                                                                                                      });
	                                                                                                                  })))(function () {
	                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("div.sequencerRow:nth-child(2n)"))($at("background-color")("lightgrey")))(function () {
	                                                                                                                          return CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("div.sequencerVerticalLine"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("background-color")("rgba(0, 0, 0, 0.1)"))(function () {
	                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("position")("absolute"))(function () {
	                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("1px"))(function () {
	                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                                                                                                                              return $at("pointer-events")("none");
	                                                                                                                                          });
	                                                                                                                                      });
	                                                                                                                                  });
	                                                                                                                              });
	                                                                                                                          }));
	                                                                                                                      });
	                                                                                                                  });
	                                                                                                              });
	                                                                                                          });
	                                                                                                      });
	                                                                                                  });
	                                                                                              });
	                                                                                          });
	                                                                                      });
	                                                                                  });
	                                                                              });
	                                                                          });
	                                                                      });
	                                                                  });
	                                                              });
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      };
	  };
	  exports["sequencerAudioTrackHeight"] = sequencerAudioTrackHeight;
	  exports["cursorSliderHeight"] = cursorSliderHeight;
	  exports["sliderHeight"] = sliderHeight;
	  exports["css"] = css;;
	 
	})(PS["Soundknot.UI.Timeline.Styles"] = PS["Soundknot.UI.Timeline.Styles"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var controlPanel = "controlPanel";
	  exports["controlPanel"] = controlPanel;;
	 
	})(PS["Soundknot.UI.Timeline.Classes"] = PS["Soundknot.UI.Timeline.Classes"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.UI.Timeline.Markup"];
	  var Sound_AudioGraph_Core = PS["Sound.AudioGraph.Core"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var $$Math = PS["Math"];
	  var Soundknot_Audio = PS["Soundknot.Audio"];
	  var Sound_MP3Encoder = PS["Sound.MP3Encoder"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Int = PS["Data.Int"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var OpticUI_Markup_SVG = PS["OpticUI.Markup.SVG"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Polyfill = PS["Soundknot.Polyfill"];
	  var Soundknot_UI_Components = PS["Soundknot.UI.Components"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_UI_Timeline_Types = PS["Soundknot.UI.Timeline.Types"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Soundknot_UI_Timeline_Styles = PS["Soundknot.UI.Timeline.Styles"];
	  var Soundknot_UI_Timeline_Classes = PS["Soundknot.UI.Timeline.Classes"];
	  var TypedArray = PS["TypedArray"];
	  var WebAudio = PS["WebAudio"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
	  var renderTimelineFrame = function (sampleRate) {
	      return function (_18) {
	          return function (updateApplication) {
	              return function (record) {
	                  return function (nodeIndex) {
	                      return function (_19) {
	                          return function (props) {
	                              var scale = $$Math.pow(1.2)(Data_Int.toNumber(props.scale));
	                              var screenToWorld = function (x) {
	                                  return x / scale + Soundknot_UI_Timeline_Types.runBeats(props.translation);
	                              };
	                              var width = $$Math.ceil(scale * Data_Int.toNumber(props.width));
	                              var worldToScreen = function (x) {
	                                  return scale * (x - Soundknot_UI_Timeline_Types.runBeats(props.translation));
	                              };
	                              var secondsTick = function (i) {
	                                  var index = Data_Int.floor(Soundknot_UI_Timeline_Types.runSeconds(Soundknot_UI_Timeline_Types.beatsToSeconds(props.bpm)(props.translation))) + i | 0;
	                                  var x = worldToScreen(Soundknot_UI_Timeline_Types.runBeats(Soundknot_UI_Timeline_Types.secondsToBeats(props.bpm)(Soundknot_UI_Timeline_Types.Seconds(Data_Int.toNumber(index)))));
	                                  var ticks = OpticUI_Markup_SVG.path([ OpticUI_Markup_HTML.classA("secondsTick"), OpticUI_Markup.attr("d")("M " + (Prelude.show(Prelude.showNumber)(x) + (" 24 L " + (Prelude.show(Prelude.showNumber)(x) + " 32")))) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                  var _27 = props.scale < 5;
	                                  if (_27) {
	                                      var _28 = index % 60 === 0;
	                                      if (_28) {
	                                          return ticks;
	                                      };
	                                      if (!_28) {
	                                          return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                      };
	                                      throw new Error("Failed pattern match: " + [ _28.constructor.name ]);
	                                  };
	                                  if (!_27) {
	                                      var _29 = props.scale < 15;
	                                      if (_29) {
	                                          var _30 = index % 10 === 0;
	                                          if (_30) {
	                                              return ticks;
	                                          };
	                                          if (!_30) {
	                                              return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                          };
	                                          throw new Error("Failed pattern match: " + [ _30.constructor.name ]);
	                                      };
	                                      if (!_29) {
	                                          return ticks;
	                                      };
	                                      throw new Error("Failed pattern match: " + [ _29.constructor.name ]);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _27.constructor.name ]);
	                              };
	                              var secondsTicks = Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(secondsTick)(Data_Array[".."](0)(Data_Int.ceil(((Data_Int.toNumber(props.width) / scale) * props.bpm) / 60.0)));
	                              var project = (function () {
	                                  var _31 = Soundknot_Historical.runHistorical(_18.project);
	                                  return _31;
	                              })();
	                              var normalizeTimeline = function (timeline) {
	                                  var _32 = {};
	                                  for (var _33 in timeline) {
	                                      if (timeline.hasOwnProperty(_33)) {
	                                          _32[_33] = timeline[_33];
	                                      };
	                                  };
	                                  _32.bpm = $$Math.max(50.0)($$Math.min(250.0)(timeline.bpm));
	                                  return _32;
	                              };
	                              var recordTimeline = function (timeline) {
	                                  if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (nodeIndex instanceof Data_Maybe.Just) {
	                                      return record((function () {
	                                          var _37 = {};
	                                          for (var _38 in project) {
	                                              if (project.hasOwnProperty(_38)) {
	                                                  _37[_38] = project[_38];
	                                              };
	                                          };
	                                          _37.nodes = Data_Maybe.maybe(project.nodes)(Prelude.id(Prelude.categoryFn))(Data_Array.updateAt(nodeIndex.value0)((function () {
	                                              var _35 = {};
	                                              for (var _36 in _19) {
	                                                  if (_19.hasOwnProperty(_36)) {
	                                                      _35[_36] = _19[_36];
	                                                  };
	                                              };
	                                              _35.props = Soundknot_Types.TimelineFrame.create(normalizeTimeline(timeline));
	                                              return _35;
	                                          })())(project.nodes));
	                                          return _37;
	                                      })());
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ nodeIndex.constructor.name ]);
	                              };
	                              var updateTimeline = function (timeline) {
	                                  if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (nodeIndex instanceof Data_Maybe.Just) {
	                                      return updateApplication((function () {
	                                          var _45 = {};
	                                          for (var _46 in _18) {
	                                              if (_18.hasOwnProperty(_46)) {
	                                                  _45[_46] = _18[_46];
	                                              };
	                                          };
	                                          _45.project = Soundknot_Historical.overwrite(_18.project)((function () {
	                                              var _43 = {};
	                                              for (var _44 in project) {
	                                                  if (project.hasOwnProperty(_44)) {
	                                                      _43[_44] = project[_44];
	                                                  };
	                                              };
	                                              _43.nodes = Data_Maybe.maybe(project.nodes)(Prelude.id(Prelude.categoryFn))(Data_Array.updateAt(nodeIndex.value0)((function () {
	                                                  var _41 = {};
	                                                  for (var _42 in _19) {
	                                                      if (_19.hasOwnProperty(_42)) {
	                                                          _41[_42] = _19[_42];
	                                                      };
	                                                  };
	                                                  _41.props = Soundknot_Types.TimelineFrame.create(normalizeTimeline(timeline));
	                                                  return _41;
	                                              })())(project.nodes));
	                                              return _43;
	                                          })());
	                                          return _45;
	                                      })());
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ nodeIndex.constructor.name ]);
	                              };
	                              var onClickPlayButton = function __do() {
	                                  var _4 = Sound_AudioGraph_Core.getAudioGraphContext();
	                                  var _3 = WebAudio_Core.currentTime(_4)();
	                                  return updateTimeline((function () {
	                                      var _50 = {};
	                                      for (var _51 in props) {
	                                          if (props.hasOwnProperty(_51)) {
	                                              _50[_51] = props[_51];
	                                          };
	                                      };
	                                      _50.start = Data_Nullable.toNullable(new Data_Maybe.Just({
	                                          position: Soundknot_UI_Timeline_Types.runBeats(props.cursor), 
	                                          time: _3
	                                      }));
	                                      return _50;
	                                  })())();
	                              };
	                              var onClickStopButton = (function () {
	                                  var _52 = Data_Nullable.toMaybe(props.start);
	                                  if (_52 instanceof Data_Maybe.Nothing) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (_52 instanceof Data_Maybe.Just) {
	                                      return function __do() {
	                                          var _6 = Sound_AudioGraph_Core.getAudioGraphContext();
	                                          var _5 = WebAudio_Core.currentTime(_6)();
	                                          return (function () {
	                                              var deltaInSeconds = _5 - _52.value0.time;
	                                              var startPositionInSeconds = Soundknot_UI_Timeline_Types.beatsToSeconds(props.bpm)(_52.value0.position);
	                                              var nextPositionInBeats = Soundknot_UI_Timeline_Types.secondsToBeats(props.bpm)(Soundknot_UI_Timeline_Types.runSeconds(startPositionInSeconds) + Soundknot_UI_Timeline_Types.runSeconds(deltaInSeconds));
	                                              return function __do() {
	                                                  updateTimeline((function () {
	                                                      var _55 = {};
	                                                      for (var _56 in props) {
	                                                          if (props.hasOwnProperty(_56)) {
	                                                              _55[_56] = props[_56];
	                                                          };
	                                                      };
	                                                      _55.cursor = nextPositionInBeats;
	                                                      _55.start = Data_Nullable.toNullable(Data_Maybe.Nothing.value);
	                                                      return _55;
	                                                  })())();
	                                                  updateTimeline((function () {
	                                                      var _57 = {};
	                                                      for (var _58 in props) {
	                                                          if (props.hasOwnProperty(_58)) {
	                                                              _57[_58] = props[_58];
	                                                          };
	                                                      };
	                                                      _57.start = Data_Nullable.toNullable(Data_Maybe.Nothing.value);
	                                                      return _57;
	                                                  })())();
	                                                  return Prelude.unit;
	                                              };
	                                          })()();
	                                      };
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _52.constructor.name ]);
	                              })();
	                              var onMouseMoveHandler = function (trackIndexMaybe) {
	                                  return function (e) {
	                                      var unselectedClips = Prelude.map(Prelude.functorArray)(function (track) {
	                                          var _65 = {};
	                                          for (var _66 in track) {
	                                              if (track.hasOwnProperty(_66)) {
	                                                  _65[_66] = track[_66];
	                                              };
	                                          };
	                                          _65.content = (function () {
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                  return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                      var _61 = {};
	                                                      for (var _62 in track.content.value0) {
	                                                          if (track.content.value0.hasOwnProperty(_62)) {
	                                                              _61[_62] = track.content.value0[_62];
	                                                          };
	                                                      };
	                                                      _61.clips = Data_Array.filter(function (_283) {
	                                                          return !(function (_1) {
	                                                              return _1.selected;
	                                                          })(_283);
	                                                      })(track.content.value0.clips);
	                                                      return _61;
	                                                  })());
	                                              };
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                  return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 323, column 9 - line 337, column 5: " + [ track.content.constructor.name ]);
	                                          })();
	                                          return _65;
	                                      })(props.tracks);
	                                      var selectedClips = Data_Array.concatMap(function (track) {
	                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                              return Data_Array.filter(function (_0) {
	                                                  return _0.selected;
	                                              })(track.content.value0.clips);
	                                          };
	                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                              return [  ];
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                      })(props.tracks);
	                                      var defaultTracks = function (e_1) {
	                                          return function (dragging) {
	                                              var mouse = Soundknot_Utils.clientPosition(e_1);
	                                              return Prelude.flip(Prelude.map(Prelude.functorArray))(props.tracks)(function (track) {
	                                                  var _78 = {};
	                                                  for (var _79 in track) {
	                                                      if (track.hasOwnProperty(_79)) {
	                                                          _78[_79] = track[_79];
	                                                      };
	                                                  };
	                                                  _78.content = (function () {
	                                                      if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                          return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                              var _74 = {};
	                                                              for (var _75 in track.content.value0) {
	                                                                  if (track.content.value0.hasOwnProperty(_75)) {
	                                                                      _74[_75] = track.content.value0[_75];
	                                                                  };
	                                                              };
	                                                              _74.clips = Prelude.flip(Prelude.map(Prelude.functorArray))(track.content.value0.clips)(function (clip) {
	                                                                  if (clip.dragging) {
	                                                                      var _72 = {};
	                                                                      for (var _73 in clip) {
	                                                                          if (clip.hasOwnProperty(_73)) {
	                                                                              _72[_73] = clip[_73];
	                                                                          };
	                                                                      };
	                                                                      _72.position = Soundknot_UI_Timeline_Types.runBeats(clip.position) + (mouse.x - dragging.x) / scale;
	                                                                      return _72;
	                                                                  };
	                                                                  if (!clip.dragging) {
	                                                                      return clip;
	                                                                  };
	                                                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ clip.dragging.constructor.name ]);
	                                                              });
	                                                              return _74;
	                                                          })());
	                                                      };
	                                                      if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                          return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                                      };
	                                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                                  })();
	                                                  return _78;
	                                              });
	                                          };
	                                      };
	                                      return function __do() {
	                                          Soundknot_Polyfill.stopPropagation(e)();
	                                          Soundknot_Polyfill.preventDefault(e)();
	                                          return updateTimeline((function () {
	                                              var _80 = Data_Nullable.toMaybe(props.mouseDownPoint);
	                                              if (_80 instanceof Data_Maybe.Nothing) {
	                                                  return props;
	                                              };
	                                              if (_80 instanceof Data_Maybe.Just) {
	                                                  var _84 = {};
	                                                  for (var _85 in props) {
	                                                      if (props.hasOwnProperty(_85)) {
	                                                          _84[_85] = props[_85];
	                                                      };
	                                                  };
	                                                  _84.translation = (function () {
	                                                      if (props.scrolling) {
	                                                          return Soundknot_UI_Timeline_Types.Beats(Soundknot_UI_Timeline_Types.runBeats(props.translation) + (screenToWorld(_80.value0.x) - screenToWorld(e.clientX)));
	                                                      };
	                                                      if (!props.scrolling) {
	                                                          return props.translation;
	                                                      };
	                                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ props.scrolling.constructor.name ]);
	                                                  })();
	                                                  _84.tracks = (function () {
	                                                      if (trackIndexMaybe instanceof Data_Maybe.Nothing) {
	                                                          return defaultTracks(e)(_80.value0);
	                                                      };
	                                                      if (trackIndexMaybe instanceof Data_Maybe.Just) {
	                                                          return defaultTracks(e)(_80.value0);
	                                                      };
	                                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ trackIndexMaybe.constructor.name ]);
	                                                  })();
	                                                  _84.mouseDownPoint = Data_Nullable.toNullable(new Data_Maybe.Just(Soundknot_Utils.clientPosition(e)));
	                                                  return _84;
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _80.constructor.name ]);
	                                          })())();
	                                      };
	                                  };
	                              };
	                              var setCursor = function (e) {
	                                  if (props.scrolling) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (!props.scrolling) {
	                                      return updateTimeline((function () {
	                                          var _88 = {};
	                                          for (var _89 in props) {
	                                              if (props.hasOwnProperty(_89)) {
	                                                  _88[_89] = props[_89];
	                                              };
	                                          };
	                                          _88.cursor = Soundknot_UI_Timeline_Types.Beats(screenToWorld((Unsafe_Coerce.unsafeCoerce(e)).offsetX));
	                                          _88.mouseDownPoint = Data_Nullable.toNullable(new Data_Maybe.Just(Soundknot_Utils.clientPosition(e)));
	                                          return _88;
	                                      })());
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ props.scrolling.constructor.name ]);
	                              };
	                              var trackHeader = function (i) {
	                                  return function (track) {
	                                      var tracks = function (e) {
	                                          var _90 = (Unsafe_Coerce.unsafeCoerce(e)).ctrlKey;
	                                          if (_90) {
	                                              return props.tracks;
	                                          };
	                                          if (!_90) {
	                                              return Prelude.map(Prelude.functorArray)(function (track_1) {
	                                                  var _91 = {};
	                                                  for (var _92 in track_1) {
	                                                      if (track_1.hasOwnProperty(_92)) {
	                                                          _91[_92] = track_1[_92];
	                                                      };
	                                                  };
	                                                  _91.selected = false;
	                                                  return _91;
	                                              })(props.tracks);
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 349, column 9 - line 353, column 9: " + [ _90.constructor.name ]);
	                                      };
	                                      var selected = (function () {
	                                          var _93 = Data_Array["!!"](props.tracks)(i);
	                                          if (_93 instanceof Data_Maybe.Nothing) {
	                                              return false;
	                                          };
	                                          if (_93 instanceof Data_Maybe.Just) {
	                                              return _93.value0.selected;
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _93.constructor.name ]);
	                                      })();
	                                      return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("trackHeader" + (function () {
	                                          if (selected) {
	                                              return " selected";
	                                          };
	                                          if (!selected) {
	                                              return "";
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ selected.constructor.name ]);
	                                      })()), OpticUI_Markup_HTML.onClick(function (e) {
	                                          return updateTimeline((function () {
	                                              var _98 = {};
	                                              for (var _99 in props) {
	                                                  if (props.hasOwnProperty(_99)) {
	                                                      _98[_99] = props[_99];
	                                                  };
	                                              };
	                                              _98.tracks = Data_Maybe.fromMaybe(props.tracks)(Data_Array.modifyAt(i)(function (track_1) {
	                                                  var _96 = {};
	                                                  for (var _97 in track_1) {
	                                                      if (track_1.hasOwnProperty(_97)) {
	                                                          _96[_97] = track_1[_97];
	                                                      };
	                                                  };
	                                                  _96.selected = true;
	                                                  return _96;
	                                              })(tracks(e)));
	                                              return _98;
	                                          })());
	                                      }) ])(OpticUI_Markup.text("Track " + Prelude.show(Prelude.showInt)(i)));
	                                  };
	                              };
	                              var trackHeaders = OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Soundknot_Utils.withIndex(props.tracks)(trackHeader)));
	                              var getDefaultValue = function (ps) {
	                                  var _100 = Data_Array.head(ps);
	                                  if (_100 instanceof Data_Maybe.Just && _100.value0 instanceof WebAudio_Core.ConstantValue) {
	                                      return _100.value0.value0;
	                                  };
	                                  return 0.0;
	                              };
	                              var cursorSlider = OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("cursorSlider"), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                  return updateTimeline((function () {
	                                      var _103 = {};
	                                      for (var _104 in props) {
	                                          if (props.hasOwnProperty(_104)) {
	                                              _103[_104] = props[_104];
	                                          };
	                                      };
	                                      _103.scrolling = true;
	                                      _103.mouseDownPoint = Data_Nullable.toNullable(new Data_Maybe.Just(Soundknot_Utils.clientPosition(e)));
	                                      return _103;
	                                  })());
	                              }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              var cursor = OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("cursor"), OpticUI_Markup_HTML.styleA("left:" + (Prelude.show(Prelude.showNumber)(worldToScreen(Soundknot_UI_Timeline_Types.runBeats(props.cursor))) + "px;")), OpticUI_Markup.attr("data-play")((function () {
	                                  var _105 = Data_Nullable.toMaybe(props.start);
	                                  if (_105 instanceof Data_Maybe.Nothing) {
	                                      return "false";
	                                  };
	                                  if (_105 instanceof Data_Maybe.Just) {
	                                      return "true";
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _105.constructor.name ]);
	                              })()), OpticUI_Markup.attr("data-position")((function () {
	                                  var _107 = Data_Nullable.toMaybe(props.start);
	                                  if (_107 instanceof Data_Maybe.Nothing) {
	                                      return "";
	                                  };
	                                  if (_107 instanceof Data_Maybe.Just) {
	                                      return Prelude.show(Prelude.showNumber)(_107.value0.position);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _107.constructor.name ]);
	                              })()), OpticUI_Markup.attr("data-time")((function () {
	                                  var _109 = Data_Nullable.toMaybe(props.start);
	                                  if (_109 instanceof Data_Maybe.Nothing) {
	                                      return "";
	                                  };
	                                  if (_109 instanceof Data_Maybe.Just) {
	                                      return Prelude.show(Prelude.showNumber)(_109.value0.time);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _109.constructor.name ]);
	                              })()), OpticUI_Markup.attr("data-scale")(Prelude.show(Prelude.showNumber)(scale)), OpticUI_Markup.attr("data-translation")(Prelude.show(Prelude.showNumber)(Soundknot_UI_Timeline_Types.runBeats(props.translation))), OpticUI_Markup.attr("data-bpm")(Prelude.show(Prelude.showNumber)(props.bpm)) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              var canvasScale = $$Math.pow(1.2)(Data_Int.toNumber(_18.scaleFactor));
	                              var waveform = function (props_2) {
	                                  return function (i) {
	                                      return function (track) {
	                                          return function (k) {
	                                              return function (clip) {
	                                                  var updateAudioClip = function (clip_1) {
	                                                      return updateTimeline((function () {
	                                                          var _118 = {};
	                                                          for (var _119 in props_2) {
	                                                              if (props_2.hasOwnProperty(_119)) {
	                                                                  _118[_119] = props_2[_119];
	                                                              };
	                                                          };
	                                                          _118.tracks = Data_Maybe.fromMaybe(props_2.tracks)(Data_Array.modifyAt(i)(function (track_1) {
	                                                              var _116 = {};
	                                                              for (var _117 in track_1) {
	                                                                  if (track_1.hasOwnProperty(_117)) {
	                                                                      _116[_117] = track_1[_117];
	                                                                  };
	                                                              };
	                                                              _116.content = (function () {
	                                                                  if (track_1.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                                      return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                                          var _112 = {};
	                                                                          for (var _113 in track_1.content.value0) {
	                                                                              if (track_1.content.value0.hasOwnProperty(_113)) {
	                                                                                  _112[_113] = track_1.content.value0[_113];
	                                                                              };
	                                                                          };
	                                                                          _112.clips = Data_Maybe.fromMaybe(track_1.content.value0.clips)(Data_Array.modifyAt(k)(function (clip_2) {
	                                                                              return clip_2;
	                                                                          })(track_1.content.value0.clips));
	                                                                          return _112;
	                                                                      })());
	                                                                  };
	                                                                  if (track_1.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                                      return new Soundknot_UI_Timeline_Types.SequencerTrack(track_1.content.value0);
	                                                                  };
	                                                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 682, column 9 - line 683, column 9: " + [ track_1.content.constructor.name ]);
	                                                              })();
	                                                              return _116;
	                                                          })(props_2.tracks));
	                                                          return _118;
	                                                      })());
	                                                  };
	                                                  var unselectAll = function (tracks) {
	                                                      return Prelude.map(Prelude.functorArray)(function (track_1) {
	                                                          var _127 = {};
	                                                          for (var _128 in track_1) {
	                                                              if (track_1.hasOwnProperty(_128)) {
	                                                                  _127[_128] = track_1[_128];
	                                                              };
	                                                          };
	                                                          _127.content = (function () {
	                                                              if (track_1.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                                  return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                                      var _123 = {};
	                                                                      for (var _124 in track_1.content.value0) {
	                                                                          if (track_1.content.value0.hasOwnProperty(_124)) {
	                                                                              _123[_124] = track_1.content.value0[_124];
	                                                                          };
	                                                                      };
	                                                                      _123.clips = Prelude.map(Prelude.functorArray)(function (clip_1) {
	                                                                          var _121 = {};
	                                                                          for (var _122 in clip_1) {
	                                                                              if (clip_1.hasOwnProperty(_122)) {
	                                                                                  _121[_122] = clip_1[_122];
	                                                                              };
	                                                                          };
	                                                                          _121.selected = false;
	                                                                          return _121;
	                                                                      })(track_1.content.value0.clips);
	                                                                      return _123;
	                                                                  })());
	                                                              };
	                                                              if (track_1.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                                  return new Soundknot_UI_Timeline_Types.SequencerTrack(track_1.content.value0);
	                                                              };
	                                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track_1.content.constructor.name ]);
	                                                          })();
	                                                          return _127;
	                                                      })(tracks);
	                                                  };
	                                                  var left = worldToScreen(Soundknot_UI_Timeline_Types.runBeats(clip.position));
	                                                  var renderLeft = $$Math.max(0.0)(left);
	                                                  var leftIndex = Soundknot_UI_Timeline_Types.secondsToIndex(sampleRate)(Soundknot_UI_Timeline_Types.beatsToSeconds(props_2.bpm)(Soundknot_UI_Timeline_Types.Beats(screenToWorld(renderLeft) - Soundknot_UI_Timeline_Types.runBeats(clip.position))));
	                                                  var beats = (function () {
	                                                      var _129 = Soundknot_UI_Timeline_Types.audioClipLengthInSeconds(sampleRate)(_18.audioBuffers)(clip);
	                                                      if (_129 instanceof Data_Maybe.Nothing) {
	                                                          return 4.0;
	                                                      };
	                                                      if (_129 instanceof Data_Maybe.Just) {
	                                                          return Soundknot_UI_Timeline_Types.secondsToBeats(props_2.bpm)(_129.value0);
	                                                      };
	                                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _129.constructor.name ]);
	                                                  })();
	                                                  var right = worldToScreen(Soundknot_UI_Timeline_Types.runBeats(clip.position) + Soundknot_UI_Timeline_Types.runBeats(beats));
	                                                  var renderRight = $$Math.min(Data_Int.toNumber(props_2.width))(right);
	                                                  var renderSize = Data_Int.ceil(renderRight - renderLeft);
	                                                  var style = "left:" + (Prelude.show(Prelude.showNumber)(renderLeft) + ("px;" + (" width:" + (Prelude.show(Prelude.showInt)(renderSize) + ("px;" + (" stroke-width:" + (Prelude.show(Prelude.showNumber)(1.0 / canvasScale) + ";")))))));
	                                                  var rightIndex = Soundknot_UI_Timeline_Types.secondsToIndex(sampleRate)(Soundknot_UI_Timeline_Types.beatsToSeconds(props_2.bpm)(Soundknot_UI_Timeline_Types.Beats(screenToWorld(renderRight) - Soundknot_UI_Timeline_Types.runBeats(clip.position))));
	                                                  var _131 = renderSize <= 0;
	                                                  if (_131) {
	                                                      return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                                  };
	                                                  if (!_131) {
	                                                      return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("waveform" + (function () {
	                                                          if (clip.selected) {
	                                                              return " selected";
	                                                          };
	                                                          if (!clip.selected) {
	                                                              return "";
	                                                          };
	                                                          throw new Error("Failed pattern match: " + [ clip.selected.constructor.name ]);
	                                                      })()), OpticUI_Markup_HTML.styleA(style), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                                          return function __do() {
	                                                              Soundknot_Polyfill.stopPropagation(e)();
	                                                              Soundknot_Polyfill.preventDefault(e)();
	                                                              return updateTimeline((function () {
	                                                                  var _143 = {};
	                                                                  for (var _144 in props_2) {
	                                                                      if (props_2.hasOwnProperty(_144)) {
	                                                                          _143[_144] = props_2[_144];
	                                                                      };
	                                                                  };
	                                                                  _143.tracks = Data_Maybe.fromMaybe(props_2.tracks)(Data_Array.modifyAt(i)(function (track_1) {
	                                                                      var _140 = {};
	                                                                      for (var _141 in track_1) {
	                                                                          if (track_1.hasOwnProperty(_141)) {
	                                                                              _140[_141] = track_1[_141];
	                                                                          };
	                                                                      };
	                                                                      _140.content = (function () {
	                                                                          if (track_1.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                                              return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                                                  var _136 = {};
	                                                                                  for (var _137 in track_1.content.value0) {
	                                                                                      if (track_1.content.value0.hasOwnProperty(_137)) {
	                                                                                          _136[_137] = track_1.content.value0[_137];
	                                                                                      };
	                                                                                  };
	                                                                                  _136.clips = Data_Maybe.fromMaybe(track_1.content.value0.clips)(Data_Array.modifyAt(k)(function (clip_1) {
	                                                                                      var _134 = {};
	                                                                                      for (var _135 in clip_1) {
	                                                                                          if (clip_1.hasOwnProperty(_135)) {
	                                                                                              _134[_135] = clip_1[_135];
	                                                                                          };
	                                                                                      };
	                                                                                      _134.dragging = true;
	                                                                                      _134.selected = true;
	                                                                                      return _134;
	                                                                                  })(track_1.content.value0.clips));
	                                                                                  return _136;
	                                                                              })());
	                                                                          };
	                                                                          if (track_1.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                                              return new Soundknot_UI_Timeline_Types.SequencerTrack(track_1.content.value0);
	                                                                          };
	                                                                          throw new Error("Failed pattern match: " + [ track_1.content.constructor.name ]);
	                                                                      })();
	                                                                      return _140;
	                                                                  })((function () {
	                                                                      var _142 = (Unsafe_Coerce.unsafeCoerce(e)).ctrlKey;
	                                                                      if (_142) {
	                                                                          return props_2.tracks;
	                                                                      };
	                                                                      if (!_142) {
	                                                                          return unselectAll(props_2.tracks);
	                                                                      };
	                                                                      throw new Error("Failed pattern match: " + [ _142.constructor.name ]);
	                                                                  })()));
	                                                                  _143.mouseDownPoint = Data_Nullable.toNullable(new Data_Maybe.Just(Soundknot_Utils.clientPosition(e)));
	                                                                  return _143;
	                                                              })())();
	                                                          };
	                                                      }), OpticUI_Markup_HTML.onMouseUp(function (e) {
	                                                          return updateTimeline((function () {
	                                                              var _154 = {};
	                                                              for (var _155 in props_2) {
	                                                                  if (props_2.hasOwnProperty(_155)) {
	                                                                      _154[_155] = props_2[_155];
	                                                                  };
	                                                              };
	                                                              _154.tracks = Data_Maybe.fromMaybe(props_2.tracks)(Data_Array.modifyAt(i)(function (track_1) {
	                                                                  var _152 = {};
	                                                                  for (var _153 in track_1) {
	                                                                      if (track_1.hasOwnProperty(_153)) {
	                                                                          _152[_153] = track_1[_153];
	                                                                      };
	                                                                  };
	                                                                  _152.content = (function () {
	                                                                      if (track_1.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                                          return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                                              var _148 = {};
	                                                                              for (var _149 in track_1.content.value0) {
	                                                                                  if (track_1.content.value0.hasOwnProperty(_149)) {
	                                                                                      _148[_149] = track_1.content.value0[_149];
	                                                                                  };
	                                                                              };
	                                                                              _148.clips = Prelude.map(Prelude.functorArray)(function (clip_1) {
	                                                                                  var _146 = {};
	                                                                                  for (var _147 in clip_1) {
	                                                                                      if (clip_1.hasOwnProperty(_147)) {
	                                                                                          _146[_147] = clip_1[_147];
	                                                                                      };
	                                                                                  };
	                                                                                  _146.dragging = false;
	                                                                                  return _146;
	                                                                              })(track_1.content.value0.clips);
	                                                                              return _148;
	                                                                          })());
	                                                                      };
	                                                                      if (track_1.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                                          return new Soundknot_UI_Timeline_Types.SequencerTrack(track_1.content.value0);
	                                                                      };
	                                                                      throw new Error("Failed pattern match: " + [ track_1.content.constructor.name ]);
	                                                                  })();
	                                                                  return _152;
	                                                              })(props_2.tracks));
	                                                              return _154;
	                                                          })());
	                                                      }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("display:flex; flex-direction:column; height:100%") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("clipName") ])(OpticUI_Markup.text(clip.name)), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("waveformContent"), OpticUI_Markup_HTML.styleA("flex-grow:1.0; position:relative;") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("videoFrames"), OpticUI_Markup_HTML.styleA("opacity:0.5; display:flex; overflow: hidden; position:absolute; height:100%; width:100%; left: 0px; top:0px;") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([  ])), OpticUI_Markup_SVG.svg([ OpticUI_Markup_HTML.styleA("position:absolute; height:100%; width:100%; left: 0px; top:0px;") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_SVG.path([ OpticUI_Markup.attr("fill")("none"), OpticUI_Markup.attr("stroke")("black"), OpticUI_Markup.attr("d")($foreign.renderWaveform(sampleRate)(leftIndex)(rightIndex)(renderSize)(clip.slices)(_18.audioBuffers)) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)) ])) ])) ])), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("resizer"), OpticUI_Markup_HTML.styleA("left:0px"), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                                          return updateAudioClip((function () {
	                                                              var _156 = {};
	                                                              for (var _157 in clip) {
	                                                                  if (clip.hasOwnProperty(_157)) {
	                                                                      _156[_157] = clip[_157];
	                                                                  };
	                                                              };
	                                                              _156.leftResizerDragging = true;
	                                                              return _156;
	                                                          })());
	                                                      }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("resizer"), OpticUI_Markup_HTML.styleA("right:0px"), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                                          return updateAudioClip((function () {
	                                                              var _158 = {};
	                                                              for (var _159 in clip) {
	                                                                  if (clip.hasOwnProperty(_159)) {
	                                                                      _158[_159] = clip[_159];
	                                                                  };
	                                                              };
	                                                              _158.rightResizerDragging = true;
	                                                              return _158;
	                                                          })());
	                                                      }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)) ]));
	                                                  };
	                                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _131.constructor.name ]);
	                                              };
	                                          };
	                                      };
	                                  };
	                              };
	                              var beatTick = function (i) {
	                                  var index = Data_Int.floor(Soundknot_UI_Timeline_Types.runBeats(props.translation)) + i | 0;
	                                  var isMajorTick = index % 4 === 0;
	                                  var x = worldToScreen(Data_Int.toNumber(index));
	                                  var label = (function () {
	                                      if (isMajorTick) {
	                                          return OpticUI_Markup.element(new Data_Maybe.Just("http://www.w3.org/2000/svg"))("text")([ OpticUI_Markup_HTML.classA("beatLabel"), OpticUI_Markup.attr("x")(Prelude.show(Prelude.showNumber)(x + 2.0)), OpticUI_Markup.attr("y")("2"), OpticUI_Markup.attr("dominant-baseline")("text-before-edge") ])(OpticUI_Markup.text(Prelude.show(Prelude.showInt)(index / 4 | 0)));
	                                      };
	                                      if (!isMajorTick) {
	                                          return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ isMajorTick.constructor.name ]);
	                                  })();
	                                  var tickPath = OpticUI_Markup_SVG.path([ OpticUI_Markup_HTML.classA("beatTick"), OpticUI_Markup.attr("d")("M " + (Prelude.show(Prelude.showNumber)(x) + (" 0 L " + (Prelude.show(Prelude.showNumber)(x) + (" " + Prelude.show(Prelude.showInt)(10 * (function () {
	                                      if (isMajorTick) {
	                                          return 2;
	                                      };
	                                      if (!isMajorTick) {
	                                          return 1;
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ isMajorTick.constructor.name ]);
	                                  })() | 0)))))) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                  var ticks = Prelude["++"](OpticUI_Markup.markupSemigroup)(tickPath)(label);
	                                  var _162 = props.scale < 5;
	                                  if (_162) {
	                                      var _163 = index % 64 === 0;
	                                      if (_163) {
	                                          return ticks;
	                                      };
	                                      if (!_163) {
	                                          return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                      };
	                                      throw new Error("Failed pattern match: " + [ _163.constructor.name ]);
	                                  };
	                                  if (!_162) {
	                                      var _164 = props.scale < 15;
	                                      if (_164) {
	                                          var _165 = index % 16 === 0;
	                                          if (_165) {
	                                              return ticks;
	                                          };
	                                          if (!_165) {
	                                              return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                                          };
	                                          throw new Error("Failed pattern match: " + [ _165.constructor.name ]);
	                                      };
	                                      if (!_164) {
	                                          return ticks;
	                                      };
	                                      throw new Error("Failed pattern match: " + [ _164.constructor.name ]);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _162.constructor.name ]);
	                              };
	                              var beatTicks = Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(beatTick)(Data_Array[".."](0)(Data_Int.ceil(Data_Int.toNumber(props.width) / scale)));
	                              var slider = OpticUI_Markup_SVG.svg([ OpticUI_Markup_HTML.classA("slider"), OpticUI_Markup.attr("xmlns")("http://www.w3.org/2000/svg"), OpticUI_Markup_HTML.styleA("display:block;"), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                  return setCursor(e);
	                              }), OpticUI_Markup_HTML.onMouseMove(function (e) {
	                                  var _166 = Data_Nullable.toMaybe(props.mouseDownPoint);
	                                  if (_166 instanceof Data_Maybe.Nothing) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  };
	                                  if (_166 instanceof Data_Maybe.Just) {
	                                      return setCursor(e);
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _166.constructor.name ]);
	                              }), OpticUI_Markup_HTML.onWheel(function (e) {
	                                  return function __do() {
	                                      Soundknot_Polyfill.stopPropagation(e)();
	                                      Soundknot_Polyfill.preventDefault(e)();
	                                      var delta = Data_Int.floor(Soundknot_Utils.signum(e.deltaY));
	                                      var offsetX = (Unsafe_Coerce.unsafeCoerce(e)).offsetX;
	                                      var scaleFactor$prime = Soundknot_UI_Timeline_Types.clampScale(props.scale + delta | 0);
	                                      var scale$prime = $$Math.pow(1.2)(Data_Int.toNumber(scaleFactor$prime));
	                                      return updateTimeline((function () {
	                                          var _168 = {};
	                                          for (var _169 in props) {
	                                              if (props.hasOwnProperty(_169)) {
	                                                  _168[_169] = props[_169];
	                                              };
	                                          };
	                                          _168.scale = scaleFactor$prime;
	                                          _168.translation = Soundknot_UI_Timeline_Types.Beats((Soundknot_UI_Timeline_Types.runBeats(props.translation) + offsetX / scale) - offsetX / scale$prime);
	                                          return _168;
	                                      })())();
	                                  };
	                              }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(beatTicks)(secondsTicks));
	                              var audioTrack = function (i) {
	                                  return function (track) {
	                                      var selected = (function () {
	                                          var _170 = Data_Array["!!"](props.tracks)(i);
	                                          if (_170 instanceof Data_Maybe.Nothing) {
	                                              return false;
	                                          };
	                                          if (_170 instanceof Data_Maybe.Just) {
	                                              return _170.value0.selected;
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 551, column 9 - line 568, column 9: " + [ _170.constructor.name ]);
	                                      })();
	                                      if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                          return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("audioTrack" + (function () {
	                                              if (selected) {
	                                                  return " selected";
	                                              };
	                                              if (!selected) {
	                                                  return "";
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ selected.constructor.name ]);
	                                          })()), OpticUI_Markup_HTML.onMouseDown(onMouseMoveHandler(new Data_Maybe.Just(i))), OpticUI_Markup_HTML.onDrop(function (e) {
	                                              return function __do() {
	                                                  Soundknot_Polyfill.stopPropagation(e)();
	                                                  Soundknot_Polyfill.preventDefault(e)();
	                                                  var mouse = (Unsafe_Coerce.unsafeCoerce(e)).offsetX;
	                                                  (function () {
	                                                      var _174 = Data_Nullable.toMaybe(Soundknot_Utils.getAudioFile(e));
	                                                      if (_174 instanceof Data_Maybe.Nothing) {
	                                                          return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff);
	                                                      };
	                                                      if (_174 instanceof Data_Maybe.Just) {
	                                                          return function __do() {
	                                                              var _8 = Soundknot_Utils.now();
	                                                              var _7 = TypedArray.createObjectURL(TypedArray.fileToBlob(_174.value0))();
	                                                              return (function () {
	                                                                  var fileName = (Unsafe_Coerce.unsafeCoerce(_174.value0)).name;
	                                                                  return function __do() {
	                                                                      recordTimeline((function () {
	                                                                          var _183 = {};
	                                                                          for (var _184 in props) {
	                                                                              if (props.hasOwnProperty(_184)) {
	                                                                                  _183[_184] = props[_184];
	                                                                              };
	                                                                          };
	                                                                          _183.tracks = Data_Maybe.fromMaybe(props.tracks)(Data_Array.modifyAt(i)(function (track_1) {
	                                                                              var _181 = {};
	                                                                              for (var _182 in track_1) {
	                                                                                  if (track_1.hasOwnProperty(_182)) {
	                                                                                      _181[_182] = track_1[_182];
	                                                                                  };
	                                                                              };
	                                                                              _181.content = (function () {
	                                                                                  if (track_1.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                                                      return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                                                          var _178 = {};
	                                                                                          for (var _179 in track_1.content.value0) {
	                                                                                              if (track_1.content.value0.hasOwnProperty(_179)) {
	                                                                                                  _178[_179] = track_1.content.value0[_179];
	                                                                                              };
	                                                                                          };
	                                                                                          _178.clips = Data_Array[":"]({
	                                                                                              position: screenToWorld(mouse), 
	                                                                                              name: fileName, 
	                                                                                              selected: false, 
	                                                                                              dragging: false, 
	                                                                                              slices: [ {
	                                                                                                  key: Prelude.show(Prelude.showInt)(_8), 
	                                                                                                  buffer: fileName, 
	                                                                                                  offset: 0.0, 
	                                                                                                  length: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
	                                                                                              } ], 
	                                                                                              leftResizerDragging: false, 
	                                                                                              rightResizerDragging: false
	                                                                                          })(track_1.content.value0.clips);
	                                                                                          return _178;
	                                                                                      })());
	                                                                                  };
	                                                                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track_1.content.constructor.name ]);
	                                                                              })();
	                                                                              return _181;
	                                                                          })(props.tracks));
	                                                                          return _183;
	                                                                      })())();
	                                                                      return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                                                                          if (_18.driver instanceof Data_Maybe.Nothing) {
	                                                                              return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                                                          };
	                                                                          if (_18.driver instanceof Data_Maybe.Just) {
	                                                                              return Soundknot_Update.loadAudioFile(_18.driver.value0)(_174.value0);
	                                                                          };
	                                                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _18.driver.constructor.name ]);
	                                                                      })())();
	                                                                  };
	                                                              })()();
	                                                          };
	                                                      };
	                                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _174.constructor.name ]);
	                                                  })()();
	                                                  return Prelude.unit;
	                                              };
	                                          }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Soundknot_Utils.withIndex(track.content.value0.clips)(waveform(props)(i)(track))))(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)));
	                                      };
	                                      if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                          return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("position:relative; height:" + (Prelude.show(Prelude.showInt)(Soundknot_UI_Timeline_Styles.sequencerAudioTrackHeight) + "px")) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("pointer-events:none; position:absolute; left:0px; top:0px; width:100%; height:100%;") ])(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (i_1) {
	                                              return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("sequencerVerticalLine"), OpticUI_Markup_HTML.styleA("left:" + (Prelude.show(Prelude.showInt)(i_1 * 60 | 0) + "px")) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                          })(Data_Array[".."](0)(10))), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("pointer-events:none; position:absolute; left:0px; top:0px; width:100%; height:100%; display:flex; flex-direction:column;") ])(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (i_1) {
	                                              return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("sequencerRow") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                          })(Data_Array[".."](0)(127))) ]));
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                  };
	                              };
	                              var tracksMarkup = OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Soundknot_Utils.withIndex(props.tracks)(audioTrack)));
	                              return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.onMouseMove(onMouseMoveHandler(Data_Maybe.Nothing.value)), OpticUI_Markup_HTML.onMouseLeave(function (e) {
	                                  return updateTimeline((function () {
	                                      var _190 = {};
	                                      for (var _191 in props) {
	                                          if (props.hasOwnProperty(_191)) {
	                                              _190[_191] = props[_191];
	                                          };
	                                      };
	                                      _190.scrolling = false;
	                                      return _190;
	                                  })());
	                              }), OpticUI_Markup_HTML.onMouseUp(function (e) {
	                                  return function __do() {
	                                      Soundknot_Polyfill.stopPropagation(e)();
	                                      Soundknot_Polyfill.preventDefault(e)();
	                                      return updateTimeline((function () {
	                                          var _201 = {};
	                                          for (var _202 in props) {
	                                              if (props.hasOwnProperty(_202)) {
	                                                  _201[_202] = props[_202];
	                                              };
	                                          };
	                                          _201.scrolling = false;
	                                          _201.tracks = Prelude.map(Prelude.functorArray)(function (track) {
	                                              var _199 = {};
	                                              for (var _200 in track) {
	                                                  if (track.hasOwnProperty(_200)) {
	                                                      _199[_200] = track[_200];
	                                                  };
	                                              };
	                                              _199.content = (function () {
	                                                  if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                      return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                          var _195 = {};
	                                                          for (var _196 in track.content.value0) {
	                                                              if (track.content.value0.hasOwnProperty(_196)) {
	                                                                  _195[_196] = track.content.value0[_196];
	                                                              };
	                                                          };
	                                                          _195.clips = Prelude.map(Prelude.functorArray)(function (clip) {
	                                                              var _193 = {};
	                                                              for (var _194 in clip) {
	                                                                  if (clip.hasOwnProperty(_194)) {
	                                                                      _193[_194] = clip[_194];
	                                                                  };
	                                                              };
	                                                              _193.dragging = false;
	                                                              return _193;
	                                                          })(track.content.value0.clips);
	                                                          return _195;
	                                                      })());
	                                                  };
	                                                  if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                      return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                                  };
	                                                  throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                              })();
	                                              return _199;
	                                          })(props.tracks);
	                                          _201.mouseDownPoint = Data_Nullable.toNullable(Data_Maybe.Nothing.value);
	                                          return _201;
	                                      })())();
	                                  };
	                              }), OpticUI_Markup_HTML.onWheel(function (e) {
	                                  return function __do() {
	                                      Soundknot_Polyfill.stopPropagation(e)();
	                                      return Soundknot_Polyfill.preventDefault(e)();
	                                  };
	                              }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA(Soundknot_UI_Timeline_Classes.controlPanel) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ Soundknot_Utils.iconButton("pause")(Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)), Soundknot_Utils.iconButton("play")(onClickPlayButton), Soundknot_Utils.iconButton("stop")(onClickStopButton), Soundknot_Utils.iconButton("step-backward")(Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)), Soundknot_Utils.iconButton("step-forward")(Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)), Soundknot_Utils.iconButton("record")(Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)), Soundknot_Utils.spacer, Soundknot_Utils.iconButton("zoom-in")(updateTimeline((function () {
	                                  var _203 = {};
	                                  for (var _204 in props) {
	                                      if (props.hasOwnProperty(_204)) {
	                                          _203[_204] = props[_204];
	                                      };
	                                  };
	                                  _203.scale = Soundknot_UI_Timeline_Types.clampScale(props.scale + 1 | 0);
	                                  return _203;
	                              })())), Soundknot_Utils.iconButton("zoom-out")(updateTimeline((function () {
	                                  var _205 = {};
	                                  for (var _206 in props) {
	                                      if (props.hasOwnProperty(_206)) {
	                                          _205[_206] = props[_206];
	                                      };
	                                  };
	                                  _205.scale = Soundknot_UI_Timeline_Types.clampScale(props.scale - 1);
	                                  return _205;
	                              })())), Soundknot_Utils.spacer, Soundknot_Utils.iconButton("plus")(recordTimeline((function () {
	                                  var _207 = {};
	                                  for (var _208 in props) {
	                                      if (props.hasOwnProperty(_208)) {
	                                          _207[_208] = props[_208];
	                                      };
	                                  };
	                                  _207.tracks = Prelude["++"](Prelude.semigroupArray)(props.tracks)([ {
	                                      name: "", 
	                                      solo: false, 
	                                      mute: false, 
	                                      selected: false, 
	                                      content: new Soundknot_UI_Timeline_Types.SampledAudioTrack({
	                                          clips: [  ]
	                                      })
	                                  } ]);
	                                  return _207;
	                              })())), Soundknot_Utils.iconButton("plus")(recordTimeline((function () {
	                                  var _209 = {};
	                                  for (var _210 in props) {
	                                      if (props.hasOwnProperty(_210)) {
	                                          _209[_210] = props[_210];
	                                      };
	                                  };
	                                  _209.tracks = Prelude["++"](Prelude.semigroupArray)(props.tracks)([ {
	                                      name: "", 
	                                      solo: false, 
	                                      mute: false, 
	                                      selected: false, 
	                                      content: new Soundknot_UI_Timeline_Types.SequencerTrack({
	                                          notes: [  ]
	                                      })
	                                  } ]);
	                                  return _209;
	                              })())), Soundknot_Utils.spacer, Soundknot_Utils.iconButton("scissors")(function __do() {
	                                  recordTimeline((function () {
	                                      var _225 = {};
	                                      for (var _226 in props) {
	                                          if (props.hasOwnProperty(_226)) {
	                                              _225[_226] = props[_226];
	                                          };
	                                      };
	                                      _225.tracks = Prelude.map(Prelude.functorArray)(function (track) {
	                                          var _223 = {};
	                                          for (var _224 in track) {
	                                              if (track.hasOwnProperty(_224)) {
	                                                  _223[_224] = track[_224];
	                                              };
	                                          };
	                                          _223.content = (function () {
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                  return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                      var _219 = {};
	                                                      for (var _220 in track.content.value0) {
	                                                          if (track.content.value0.hasOwnProperty(_220)) {
	                                                              _219[_220] = track.content.value0[_220];
	                                                          };
	                                                      };
	                                                      _219.clips = Data_Array.concatMap(function (clip) {
	                                                          var lenMaybe = Soundknot_UI_Timeline_Types.audioClipLengthInSeconds(sampleRate)(_18.audioBuffers)(clip);
	                                                          if (lenMaybe instanceof Data_Maybe.Just && clip.selected) {
	                                                              var _213 = Prelude["<"](Soundknot_UI_Timeline_Types.ord_Beats)(clip.position)(props.cursor) && Soundknot_UI_Timeline_Types.runBeats(props.cursor) < Soundknot_UI_Timeline_Types.runBeats(clip.position) + Soundknot_UI_Timeline_Types.runBeats(Soundknot_UI_Timeline_Types.secondsToBeats(props.bpm)(lenMaybe.value0));
	                                                              if (_213) {
	                                                                  return [ (function () {
	                                                                      var _214 = {};
	                                                                      for (var _215 in clip) {
	                                                                          if (clip.hasOwnProperty(_215)) {
	                                                                              _214[_215] = clip[_215];
	                                                                          };
	                                                                      };
	                                                                      _214.position = clip.position;
	                                                                      return _214;
	                                                                  })(), (function () {
	                                                                      var _216 = {};
	                                                                      for (var _217 in clip) {
	                                                                          if (clip.hasOwnProperty(_217)) {
	                                                                              _216[_217] = clip[_217];
	                                                                          };
	                                                                      };
	                                                                      _216.position = props.cursor;
	                                                                      return _216;
	                                                                  })() ];
	                                                              };
	                                                              if (!_213) {
	                                                                  return [ clip ];
	                                                              };
	                                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _213.constructor.name ]);
	                                                          };
	                                                          return [ clip ];
	                                                      })(track.content.value0.clips);
	                                                      return _219;
	                                                  })());
	                                              };
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                  return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                          })();
	                                          return _223;
	                                      })(props.tracks);
	                                      return _225;
	                                  })())();
	                                  return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)();
	                              }), Soundknot_Utils.iconButton("paperclip")(function __do() {
	                                  recordTimeline((function () {
	                                      var _240 = {};
	                                      for (var _241 in props) {
	                                          if (props.hasOwnProperty(_241)) {
	                                              _240[_241] = props[_241];
	                                          };
	                                      };
	                                      _240.tracks = Prelude.map(Prelude.functorArray)(function (track) {
	                                          var _238 = {};
	                                          for (var _239 in track) {
	                                              if (track.hasOwnProperty(_239)) {
	                                                  _238[_239] = track[_239];
	                                              };
	                                          };
	                                          _238.content = (function () {
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                  return Soundknot_UI_Timeline_Types.SampledAudioTrack.create(Data_Maybe.fromMaybe(track.content.value0)((function () {
	                                                      var selectedClips = Data_Array.sortBy(function (x) {
	                                                          return function (y) {
	                                                              return Prelude.compare(Soundknot_UI_Timeline_Types.ord_Beats)(x.position)(y.position);
	                                                          };
	                                                      })(Data_Array.filter(function (_2) {
	                                                          return _2.selected;
	                                                      })(track.content.value0.clips));
	                                                      return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(selectedClips))(function (_10) {
	                                                          return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.tail(selectedClips))(function (_9) {
	                                                              var posInSeconds = Soundknot_UI_Timeline_Types.beatsToSeconds(props.bpm)(_10.position);
	                                                              return Prelude.pure(Data_Maybe.applicativeMaybe)((function () {
	                                                                  var _234 = {};
	                                                                  for (var _235 in track.content.value0) {
	                                                                      if (track.content.value0.hasOwnProperty(_235)) {
	                                                                          _234[_235] = track.content.value0[_235];
	                                                                      };
	                                                                  };
	                                                                  _234.clips = Prelude["++"](Prelude.semigroupArray)(Data_Array.filter(function (clip) {
	                                                                      return !clip.selected;
	                                                                  })(track.content.value0.clips))([ {
	                                                                      name: _10.name, 
	                                                                      position: _10.position, 
	                                                                      selected: true, 
	                                                                      dragging: false, 
	                                                                      slices: Prelude.map(Prelude.functorArray)(function (slice) {
	                                                                          var _230 = {};
	                                                                          for (var _231 in slice) {
	                                                                              if (slice.hasOwnProperty(_231)) {
	                                                                                  _230[_231] = slice[_231];
	                                                                              };
	                                                                          };
	                                                                          _230.offset = Soundknot_UI_Timeline_Types.runSeconds(slice.offset) - Soundknot_UI_Timeline_Types.runSeconds(posInSeconds);
	                                                                          return _230;
	                                                                      })(Data_Array.concat(Soundknot_Utils.withIndex(selectedClips)(function (i) {
	                                                                          return function (clip) {
	                                                                              return Prelude.map(Prelude.functorArray)(function (slice) {
	                                                                                  var _232 = {};
	                                                                                  for (var _233 in slice) {
	                                                                                      if (slice.hasOwnProperty(_233)) {
	                                                                                          _232[_233] = slice[_233];
	                                                                                      };
	                                                                                  };
	                                                                                  _232.offset = Soundknot_UI_Timeline_Types.beatsToSeconds(props.bpm)(Soundknot_UI_Timeline_Types.runBeats(clip.position) + Soundknot_UI_Timeline_Types.runBeats(Soundknot_UI_Timeline_Types.secondsToBeats(props.bpm)(slice.offset)));
	                                                                                  return _232;
	                                                                              })(clip.slices);
	                                                                          };
	                                                                      }))), 
	                                                                      leftResizerDragging: false, 
	                                                                      rightResizerDragging: false
	                                                                  } ]);
	                                                                  return _234;
	                                                              })());
	                                                          });
	                                                      });
	                                                  })()));
	                                              };
	                                              if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                  return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                          })();
	                                          return _238;
	                                      })(props.tracks);
	                                      return _240;
	                                  })())();
	                                  return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)();
	                              }), Soundknot_Utils.iconButton("duplicate")(Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)), Soundknot_Utils.iconButton("remove")((function () {
	                                  var tracks = Prelude.map(Prelude.functorArray)(function (track) {
	                                      var _247 = {};
	                                      for (var _248 in track) {
	                                          if (track.hasOwnProperty(_248)) {
	                                              _247[_248] = track[_248];
	                                          };
	                                      };
	                                      _247.content = (function () {
	                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                              return new Soundknot_UI_Timeline_Types.SampledAudioTrack((function () {
	                                                  var _243 = {};
	                                                  for (var _244 in track.content.value0) {
	                                                      if (track.content.value0.hasOwnProperty(_244)) {
	                                                          _243[_244] = track.content.value0[_244];
	                                                      };
	                                                  };
	                                                  _243.clips = Data_Array.filter(function (clip) {
	                                                      return !clip.selected;
	                                                  })(track.content.value0.clips);
	                                                  return _243;
	                                              })());
	                                          };
	                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                              return new Soundknot_UI_Timeline_Types.SequencerTrack(track.content.value0);
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 160, column 17 - line 169, column 13: " + [ track.content.constructor.name ]);
	                                      })();
	                                      return _247;
	                                  })(Data_Array.filter(function (track) {
	                                      return !track.selected;
	                                  })(props.tracks));
	                                  return recordTimeline((function () {
	                                      var _250 = {};
	                                      for (var _251 in props) {
	                                          if (props.hasOwnProperty(_251)) {
	                                              _250[_251] = props[_251];
	                                          };
	                                      };
	                                      _250.tracks = (function () {
	                                          var _249 = Data_Array["null"](tracks);
	                                          if (_249) {
	                                              return [ {
	                                                  name: "", 
	                                                  solo: false, 
	                                                  mute: false, 
	                                                  selected: false, 
	                                                  content: new Soundknot_UI_Timeline_Types.SampledAudioTrack({
	                                                      clips: [  ]
	                                                  })
	                                              } ];
	                                          };
	                                          if (!_249) {
	                                              return tracks;
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ _249.constructor.name ]);
	                                      })();
	                                      return _250;
	                                  })());
	                              })()), Soundknot_Utils.spacer, Soundknot_Utils.iconButton("download")(function __do() {
	                                  var _15 = Sound_AudioGraph_Core.getAudioGraphContext();
	                                  var _14 = WebAudio_Core.currentTime(_15)();
	                                  return (function () {
	                                      var project$prime = (function () {
	                                          var _261 = {};
	                                          for (var _262 in project) {
	                                              if (project.hasOwnProperty(_262)) {
	                                                  _261[_262] = project[_262];
	                                              };
	                                          };
	                                          _261.nodes = Prelude.map(Prelude.functorArray)(function (_16) {
	                                              var _259 = {};
	                                              for (var _260 in _16) {
	                                                  if (_16.hasOwnProperty(_260)) {
	                                                      _259[_260] = _16[_260];
	                                                  };
	                                              };
	                                              _259.props = (function () {
	                                                  if (_16.props instanceof Soundknot_Types.TimelineFrame) {
	                                                      return new Soundknot_Types.TimelineFrame((function () {
	                                                          var _256 = {};
	                                                          for (var _257 in _16.props.value0) {
	                                                              if (_16.props.value0.hasOwnProperty(_257)) {
	                                                                  _256[_257] = _16.props.value0[_257];
	                                                              };
	                                                          };
	                                                          _256.start = Data_Nullable.toNullable(new Data_Maybe.Just({
	                                                              position: 0.0, 
	                                                              time: _14
	                                                          }));
	                                                          _256.cursor = 0.0;
	                                                          return _256;
	                                                      })());
	                                                  };
	                                                  return _16.props;
	                                              })();
	                                              return _259;
	                                          })(project.nodes);
	                                          return _261;
	                                      })();
	                                      return function __do() {
	                                          var _13 = Soundknot_Audio.renderAudio(0.0)((function () {
	                                              var _263 = {};
	                                              for (var _264 in _18) {
	                                                  if (_18.hasOwnProperty(_264)) {
	                                                      _263[_264] = _18[_264];
	                                                  };
	                                              };
	                                              _263.project = Soundknot_Historical.overwrite(_18.project)(project$prime);
	                                              return _263;
	                                          })())();
	                                          return (function () {
	                                              var maximum = function (xs) {
	                                                  return function (f) {
	                                                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
	                                                          return function (y) {
	                                                              return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($$Math.max)(x))(y);
	                                                          };
	                                                      })(new Data_Maybe.Just(0.0))(Prelude.map(Prelude.functorArray)(f)(xs));
	                                                  };
	                                              };
	                                              var lengthMaybe = maximum(project.nodes)(function (_17) {
	                                                  if (_17.props instanceof Soundknot_Types.TimelineFrame) {
	                                                      return maximum(_17.props.value0.tracks)(function (track) {
	                                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SampledAudioTrack) {
	                                                              return maximum(track.content.value0.clips)(function (clip) {
	                                                                  var pos = Soundknot_UI_Timeline_Types.runSeconds(Soundknot_UI_Timeline_Types.beatsToSeconds(_17.props.value0.bpm)(clip.position));
	                                                                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["+"](Prelude.semiringNumber)(pos))(Soundknot_UI_Timeline_Types.clipLength(48000.0)(_18.audioBuffers)(_17.props.value0.bpm)(clip));
	                                                              });
	                                                          };
	                                                          if (track.content instanceof Soundknot_UI_Timeline_Types.SequencerTrack) {
	                                                              return Data_Maybe.Nothing.value;
	                                                          };
	                                                          throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ track.content.constructor.name ]);
	                                                      });
	                                                  };
	                                                  return new Data_Maybe.Just(0.0);
	                                              });
	                                              if (lengthMaybe instanceof Data_Maybe.Nothing) {
	                                                  return Control_Monad_Eff_Console.log("[error] cannnot calculate the clip length");
	                                              };
	                                              if (lengthMaybe instanceof Data_Maybe.Just && 0.0 < lengthMaybe.value0) {
	                                                  return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("timeline length: " + Prelude.show(Prelude.showNumber)(lengthMaybe.value0))))(function () {
	                                                      return Prelude.bind(Control_Monad_Aff.bindAff)(Sound_AudioGraph_Core.renderOfflineAudio(2)(lengthMaybe.value0 + 2.0)(48000.0)(_13))(function (_12) {
	                                                          return Prelude.bind(Control_Monad_Aff.bindAff)(Sound_MP3Encoder.encodeAudioBufferToMp3(_12))(function (_11) {
	                                                              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Soundknot_Utils.download(Soundknot_Utils.createFile([ _11 ])("mixdown.mp3"))))(function () {
	                                                                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("rendering finished"));
	                                                              });
	                                                          });
	                                                      });
	                                                  }));
	                                              };
	                                              if (lengthMaybe instanceof Data_Maybe.Just) {
	                                                  return Control_Monad_Eff_Console.log("[error] invalid timeline length: " + Prelude.show(Prelude.showNumber)(lengthMaybe.value0));
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Timeline.Markup line 41, column 1 - line 42, column 1: " + [ lengthMaybe.constructor.name ]);
	                                          })()();
	                                      };
	                                  })()();
	                              }) ])), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("controlPanel") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup.text("Position:"), Soundknot_UI_Components.numberInput(Soundknot_UI_Timeline_Types.runBeats(props.cursor))([  ])(function (value) {
	                                  return updateTimeline((function () {
	                                      var _277 = {};
	                                      for (var _278 in props) {
	                                          if (props.hasOwnProperty(_278)) {
	                                              _277[_278] = props[_278];
	                                          };
	                                      };
	                                      _277.cursor = value;
	                                      return _277;
	                                  })());
	                              }), Soundknot_Utils.spacer, OpticUI_Markup.text("Time:"), Soundknot_UI_Components.numberInput(Soundknot_UI_Timeline_Types.runSeconds(Soundknot_UI_Timeline_Types.beatsToSeconds(props.bpm)(props.cursor)))([  ])(function (value) {
	                                  return updateTimeline((function () {
	                                      var _279 = {};
	                                      for (var _280 in props) {
	                                          if (props.hasOwnProperty(_280)) {
	                                              _279[_280] = props[_280];
	                                          };
	                                      };
	                                      _279.cursor = Soundknot_UI_Timeline_Types.secondsToBeats(props.bpm)(value);
	                                      return _279;
	                                  })());
	                              }), Soundknot_Utils.spacer, OpticUI_Markup.text("BPM:"), Soundknot_UI_Components.numberInput(props.bpm)([  ])(function (value) {
	                                  return updateTimeline((function () {
	                                      var _281 = {};
	                                      for (var _282 in props) {
	                                          if (props.hasOwnProperty(_282)) {
	                                              _281[_282] = props[_282];
	                                          };
	                                      };
	                                      _281.bpm = value;
	                                      return _281;
	                                  })());
	                              }) ])), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("display:flex;") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width: 100px; display:flex; flex-direction:column;") ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("height: " + (Prelude.show(Prelude.showInt)(Soundknot_UI_Timeline_Styles.sliderHeight + Soundknot_UI_Timeline_Styles.cursorSliderHeight | 0) + "px;")) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)))(trackHeaders)), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("timeline"), OpticUI_Markup_HTML.styleA("width:" + (Prelude.show(Prelude.showInt)(props.width) + "px")) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(cursorSlider)(Prelude["++"](OpticUI_Markup.markupSemigroup)(slider)(Prelude["++"](OpticUI_Markup.markupSemigroup)(tracksMarkup)(cursor)))) ])) ]));
	                          };
	                      };
	                  };
	              };
	          };
	      };
	  };
	  exports["renderTimelineFrame"] = renderTimelineFrame;;
	 
	})(PS["Soundknot.UI.Timeline.Markup"] = PS["Soundknot.UI.Timeline.Markup"] || {});
	(function(exports) {
	  // module Soundknot.Lens

	  exports.undefined = undefined;
	})(PS["Soundknot.Lens"] = PS["Soundknot.Lens"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Lens"];
	  var Data_Lens_Lens = PS["Data.Lens.Lens"];
	  var Data_Lens = PS["Data.Lens"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var WebAudio = PS["WebAudio"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var WebAudio_Core = PS["WebAudio.Core"];     
	  var videoFrame = function (__dict_Strong_0) {
	      var write = function (_73) {
	          return function (value) {
	              if (_73 instanceof Soundknot_Types.VideoFrame) {
	                  return new Soundknot_Types.VideoFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_72) {
	          if (_72 instanceof Soundknot_Types.VideoFrame) {
	              return _72.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_0);
	  };
	  var type$prime = function (__dict_Strong_1) {
	      return Data_Lens_Lens.lens(function (_18) {
	          return _18.type;
	      })(function (_19) {
	          return function (_20) {
	              var _91 = {};
	              for (var _92 in _19) {
	                  if (_19.hasOwnProperty(_92)) {
	                      _91[_92] = _19[_92];
	                  };
	              };
	              _91.type = _20;
	              return _91;
	          };
	      })(__dict_Strong_1);
	  };
	  var threshold = function (__dict_Strong_3) {
	      return Data_Lens_Lens.lens(function (_24) {
	          return _24.threshold;
	      })(function (_25) {
	          return function (_26) {
	              var _95 = {};
	              for (var _96 in _25) {
	                  if (_25.hasOwnProperty(_96)) {
	                      _95[_96] = _25[_96];
	                  };
	              };
	              _95.threshold = _26;
	              return _95;
	          };
	      })(__dict_Strong_3);
	  };
	  var stereoPannerFrame = function (__dict_Strong_5) {
	      var write = function (_81) {
	          return function (value) {
	              if (_81 instanceof Soundknot_Types.StereoPannerFrame) {
	                  return new Soundknot_Types.StereoPannerFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_80) {
	          if (_80 instanceof Soundknot_Types.StereoPannerFrame) {
	              return _80.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_5);
	  };
	  var state = function (__dict_Strong_6) {
	      return Data_Lens_Lens.lens(function (_64) {
	          return _64.project;
	      })(function (_65) {
	          return function (v) {
	              var _106 = {};
	              for (var _107 in _65) {
	                  if (_65.hasOwnProperty(_107)) {
	                      _106[_107] = _65[_107];
	                  };
	              };
	              _106.project = v;
	              return _106;
	          };
	      })(__dict_Strong_6);
	  };
	  var release = function (__dict_Strong_8) {
	      return Data_Lens_Lens.lens(function (_39) {
	          return _39.release;
	      })(function (_40) {
	          return function (_41) {
	              var _110 = {};
	              for (var _111 in _40) {
	                  if (_40.hasOwnProperty(_111)) {
	                      _110[_111] = _40[_111];
	                  };
	              };
	              _110.release = _41;
	              return _110;
	          };
	      })(__dict_Strong_8);
	  };
	  var reduction = function (__dict_Strong_9) {
	      return Data_Lens_Lens.lens(function (_33) {
	          return _33.reduction;
	      })(function (_34) {
	          return function (_35) {
	              var _112 = {};
	              for (var _113 in _34) {
	                  if (_34.hasOwnProperty(_113)) {
	                      _112[_113] = _34[_113];
	                  };
	              };
	              _112.reduction = _35;
	              return _112;
	          };
	      })(__dict_Strong_9);
	  };
	  var ratio = function (__dict_Strong_10) {
	      return Data_Lens_Lens.lens(function (_30) {
	          return _30.ratio;
	      })(function (_31) {
	          return function (_32) {
	              var _114 = {};
	              for (var _115 in _31) {
	                  if (_31.hasOwnProperty(_115)) {
	                      _114[_115] = _31[_115];
	                  };
	              };
	              _114.ratio = _32;
	              return _114;
	          };
	      })(__dict_Strong_10);
	  };
	  var q = function (__dict_Strong_11) {
	      return Data_Lens_Lens.lens(function (_48) {
	          return _48.q;
	      })(function (_49) {
	          return function (_50) {
	              var _116 = {};
	              for (var _117 in _49) {
	                  if (_49.hasOwnProperty(_117)) {
	                      _116[_117] = _49[_117];
	                  };
	              };
	              _116.q = _50;
	              return _116;
	          };
	      })(__dict_Strong_11);
	  };
	  var props = function (__dict_Strong_12) {
	      return Data_Lens_Lens.lens(function (_62) {
	          return _62.props;
	      })(function (_63) {
	          return function (x) {
	              var _120 = {};
	              for (var _121 in _63) {
	                  if (_63.hasOwnProperty(_121)) {
	                      _120[_121] = _63[_121];
	                  };
	              };
	              _120.props = x;
	              return _120;
	          };
	      })(__dict_Strong_12);
	  };
	  var projectEntries = function (__dict_Strong_13) {
	      return Data_Lens_Lens.lens(function (_66) {
	          return _66.projectEntries;
	      })(function (_67) {
	          return function (v) {
	              var _124 = {};
	              for (var _125 in _67) {
	                  if (_67.hasOwnProperty(_125)) {
	                      _124[_125] = _67[_125];
	                  };
	              };
	              _124.projectEntries = v;
	              return _124;
	          };
	      })(__dict_Strong_13);
	  };
	  var panConstantValue = function (__dict_Strong_14) {
	      var write = function (x) {
	          return function (v) {
	              var _126 = {};
	              for (var _127 in x) {
	                  if (x.hasOwnProperty(_127)) {
	                      _126[_127] = x[_127];
	                  };
	              };
	              _126.pan = [ new WebAudio_Core.ConstantValue(v) ];
	              return _126;
	          };
	      };
	      var read = function (x) {
	          var _128 = Data_Array.head(x.pan);
	          if (_128 instanceof Data_Maybe.Just && _128.value0 instanceof WebAudio_Core.ConstantValue) {
	              return _128.value0.value0;
	          };
	          return 0.5;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_14);
	  };
	  var pan = function (__dict_Strong_15) {
	      return Data_Lens_Lens.lens(function (_54) {
	          return _54.pan;
	      })(function (_55) {
	          return function (_56) {
	              var _131 = {};
	              for (var _132 in _55) {
	                  if (_55.hasOwnProperty(_132)) {
	                      _131[_132] = _55[_132];
	                  };
	              };
	              _131.pan = _56;
	              return _131;
	          };
	      })(__dict_Strong_15);
	  };
	  var oscillatorFrame = function (__dict_Strong_16) {
	      var write = function (_85) {
	          return function (value) {
	              if (_85 instanceof Soundknot_Types.OscillatorFrame) {
	                  return new Soundknot_Types.OscillatorFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_84) {
	          if (_84 instanceof Soundknot_Types.OscillatorFrame) {
	              return _84.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_16);
	  };
	  var knee = function (__dict_Strong_19) {
	      return Data_Lens_Lens.lens(function (_27) {
	          return _27.knee;
	      })(function (_28) {
	          return function (_29) {
	              var _144 = {};
	              for (var _145 in _28) {
	                  if (_28.hasOwnProperty(_145)) {
	                      _144[_145] = _28[_145];
	                  };
	              };
	              _144.knee = _29;
	              return _144;
	          };
	      })(__dict_Strong_19);
	  };
	  var gainFrame = function (__dict_Strong_20) {
	      var write = function (_77) {
	          return function (value) {
	              if (_77 instanceof Soundknot_Types.GainFrame) {
	                  return new Soundknot_Types.GainFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_76) {
	          if (_76 instanceof Soundknot_Types.GainFrame) {
	              return _76.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_20);
	  };
	  var gainConstantValue = function (__dict_Strong_21) {
	      var write = function (x) {
	          return function (v) {
	              var _151 = {};
	              for (var _152 in x) {
	                  if (x.hasOwnProperty(_152)) {
	                      _151[_152] = x[_152];
	                  };
	              };
	              _151.gain = [ new WebAudio_Core.ConstantValue(v) ];
	              return _151;
	          };
	      };
	      var read = function (x) {
	          var _153 = Data_Array.head(x.gain);
	          if (_153 instanceof Data_Maybe.Just && _153.value0 instanceof WebAudio_Core.ConstantValue) {
	              return _153.value0.value0;
	          };
	          return 1.0;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_21);
	  };
	  var gain = function (__dict_Strong_22) {
	      return Data_Lens_Lens.lens(function (_51) {
	          return _51.gain;
	      })(function (_52) {
	          return function (_53) {
	              var _156 = {};
	              for (var _157 in _52) {
	                  if (_52.hasOwnProperty(_157)) {
	                      _156[_157] = _52[_157];
	                  };
	              };
	              _156.gain = _53;
	              return _156;
	          };
	      })(__dict_Strong_22);
	  };
	  var frequency = function (__dict_Strong_23) {
	      return Data_Lens_Lens.lens(function (_42) {
	          return _42.frequency;
	      })(function (_43) {
	          return function (_44) {
	              var _158 = {};
	              for (var _159 in _43) {
	                  if (_43.hasOwnProperty(_159)) {
	                      _158[_159] = _43[_159];
	                  };
	              };
	              _158.frequency = _44;
	              return _158;
	          };
	      })(__dict_Strong_23);
	  };
	  var dynamicsCompressorFrame = function (__dict_Strong_25) {
	      var write = function (_83) {
	          return function (value) {
	              if (_83 instanceof Soundknot_Types.DynamicsCompressorFrame) {
	                  return new Soundknot_Types.DynamicsCompressorFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_82) {
	          if (_82 instanceof Soundknot_Types.DynamicsCompressorFrame) {
	              return _82.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_25);
	  };
	  var detune = function (__dict_Strong_26) {
	      return Data_Lens_Lens.lens(function (_45) {
	          return _45.detune;
	      })(function (_46) {
	          return function (_47) {
	              var _167 = {};
	              for (var _168 in _46) {
	                  if (_46.hasOwnProperty(_168)) {
	                      _167[_168] = _46[_168];
	                  };
	              };
	              _167.detune = _47;
	              return _167;
	          };
	      })(__dict_Strong_26);
	  };
	  var destinationFrame = function (__dict_Strong_27) {
	      var write = function (_69) {
	          return function (value) {
	              if (_69 instanceof Soundknot_Types.DestinationFrame) {
	                  return new Soundknot_Types.DestinationFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_68) {
	          if (_68 instanceof Soundknot_Types.DestinationFrame) {
	              return _68.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_27);
	  };
	  var delayFrame = function (__dict_Strong_28) {
	      var write = function (_79) {
	          return function (value) {
	              if (_79 instanceof Soundknot_Types.DelayFrame) {
	                  return new Soundknot_Types.DelayFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_78) {
	          if (_78 instanceof Soundknot_Types.DelayFrame) {
	              return _78.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_28);
	  };
	  var delayConstantValue = function (__dict_Strong_29) {
	      var write = function (x) {
	          return function (v) {
	              var _179 = {};
	              for (var _180 in x) {
	                  if (x.hasOwnProperty(_180)) {
	                      _179[_180] = x[_180];
	                  };
	              };
	              _179.delayTime = [ new WebAudio_Core.ConstantValue(v) ];
	              return _179;
	          };
	      };
	      var read = function (x) {
	          var _181 = Data_Array.head(x.delayTime);
	          if (_181 instanceof Data_Maybe.Just && _181.value0 instanceof WebAudio_Core.ConstantValue) {
	              return _181.value0.value0;
	          };
	          return 0.0;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_29);
	  };
	  var bilinearFilterFrame = function (__dict_Strong_32) {
	      var write = function (_71) {
	          return function (value) {
	              if (_71 instanceof Soundknot_Types.BiquadFilterFrame) {
	                  return new Soundknot_Types.BiquadFilterFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_70) {
	          if (_70 instanceof Soundknot_Types.BiquadFilterFrame) {
	              return _70.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_32);
	  };
	  var audioBufferFrame = function (__dict_Strong_33) {
	      var write = function (_75) {
	          return function (value) {
	              if (_75 instanceof Soundknot_Types.AudioBufferFrame) {
	                  return new Soundknot_Types.AudioBufferFrame(value);
	              };
	              return $foreign.undefined;
	          };
	      };
	      var read = function (_74) {
	          if (_74 instanceof Soundknot_Types.AudioBufferFrame) {
	              return _74.value0;
	          };
	          return $foreign.undefined;
	      };
	      return Data_Lens_Lens.lens(read)(write)(__dict_Strong_33);
	  };
	  var attack = function (__dict_Strong_34) {
	      return Data_Lens_Lens.lens(function (_36) {
	          return _36.attack;
	      })(function (_37) {
	          return function (_38) {
	              var _198 = {};
	              for (var _199 in _37) {
	                  if (_37.hasOwnProperty(_199)) {
	                      _198[_199] = _37[_199];
	                  };
	              };
	              _198.attack = _38;
	              return _198;
	          };
	      })(__dict_Strong_34);
	  };
	  exports["delayConstantValue"] = delayConstantValue;
	  exports["panConstantValue"] = panConstantValue;
	  exports["gainConstantValue"] = gainConstantValue;
	  exports["pan"] = pan;
	  exports["gain"] = gain;
	  exports["q"] = q;
	  exports["detune"] = detune;
	  exports["frequency"] = frequency;
	  exports["release"] = release;
	  exports["attack"] = attack;
	  exports["reduction"] = reduction;
	  exports["ratio"] = ratio;
	  exports["knee"] = knee;
	  exports["threshold"] = threshold;
	  exports["projectEntries"] = projectEntries;
	  exports["oscillatorFrame"] = oscillatorFrame;
	  exports["dynamicsCompressorFrame"] = dynamicsCompressorFrame;
	  exports["stereoPannerFrame"] = stereoPannerFrame;
	  exports["delayFrame"] = delayFrame;
	  exports["gainFrame"] = gainFrame;
	  exports["audioBufferFrame"] = audioBufferFrame;
	  exports["videoFrame"] = videoFrame;
	  exports["bilinearFilterFrame"] = bilinearFilterFrame;
	  exports["destinationFrame"] = destinationFrame;
	  exports["state"] = state;
	  exports["type'"] = type$prime;
	  exports["props"] = props;;
	 
	})(PS["Soundknot.Lens"] = PS["Soundknot.Lens"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Lens_Getter = PS["Data.Lens.Getter"];
	  var Data_Lens_Setter = PS["Data.Lens.Setter"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var WebAudio_BiquadFilter = PS["WebAudio.BiquadFilter"];
	  var WebAudio_Oscillator = PS["WebAudio.Oscillator"];
	  var Soundknot_UI_Timeline_Markup = PS["Soundknot.UI.Timeline.Markup"];
	  var Soundknot_UI_Instrument_Types = PS["Soundknot.UI.Instrument.Types"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var Data_List = PS["Data.List"];
	  var Prelude = PS["Prelude"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Ord = PS["Data.Ord"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Data_Lens = PS["Data.Lens"];
	  var Data_String = PS["Data.String"];
	  var Control_Monad = PS["Control.Monad"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var OpticUI_Markup_SVG = PS["OpticUI.Markup.SVG"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Polyfill = PS["Soundknot.Polyfill"];
	  var Soundknot_UI_Components = PS["Soundknot.UI.Components"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_Lens = PS["Soundknot.Lens"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var TypedArray = PS["TypedArray"];
	  var WebAudio = PS["WebAudio"];
	  var WebMidi = PS["WebMidi"];
	  var Sound_AudioGraph_Core = PS["Sound.AudioGraph.Core"];
	  var SoundFont = PS["SoundFont"];
	  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
	  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Data_Unfoldable = PS["Data.Unfoldable"];     
	  var maxIndex = function (_13) {
	      var project = (function () {
	          var _17 = Soundknot_Historical.runHistorical(_13.project);
	          return _17;
	      })();
	      return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (x) {
	          return function (_11) {
	              return Data_Ord.max(Prelude.ordInt)(x)(_11.zIndex);
	          };
	      })(0)(project.nodes);
	  };
	  var createEditorNode = function (sampleRate) {
	      return function (_14) {
	          return function (updateApplication) {
	              return function (record) {
	                  return function (nodeIndex) {
	                      return function (_15) {
	                          var project = (function () {
	                              var _25 = Soundknot_Historical.runHistorical(_14.project);
	                              return _25;
	                          })();
	                          var recordProps = function (props) {
	                              if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              if (nodeIndex instanceof Data_Maybe.Just) {
	                                  return record((function () {
	                                      var _29 = {};
	                                      for (var _30 in project) {
	                                          if (project.hasOwnProperty(_30)) {
	                                              _29[_30] = project[_30];
	                                          };
	                                      };
	                                      _29.nodes = Data_Maybe.maybe(project.nodes)(Prelude.id(Prelude.categoryFn))(Data_Array.updateAt(nodeIndex.value0)((function () {
	                                          var _27 = {};
	                                          for (var _28 in _15) {
	                                              if (_15.hasOwnProperty(_28)) {
	                                                  _27[_28] = _15[_28];
	                                              };
	                                          };
	                                          _27.props = props;
	                                          return _27;
	                                      })())(project.nodes));
	                                      return _29;
	                                  })());
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ nodeIndex.constructor.name ]);
	                          };
	                          var recordState = function (props) {
	                              if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              if (nodeIndex instanceof Data_Maybe.Just) {
	                                  return record((function () {
	                                      var _33 = {};
	                                      for (var _34 in project) {
	                                          if (project.hasOwnProperty(_34)) {
	                                              _33[_34] = project[_34];
	                                          };
	                                      };
	                                      _33.nodes = Data_Maybe.maybe(project.nodes)(Prelude.id(Prelude.categoryFn))(Data_Array.updateAt(nodeIndex.value0)(props)(project.nodes));
	                                      return _33;
	                                  })());
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ nodeIndex.constructor.name ]);
	                          };
	                          var removeNode = (function () {
	                              if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              if (nodeIndex instanceof Data_Maybe.Just) {
	                                  var project_1 = (function () {
	                                      var _37 = Soundknot_Historical.runHistorical(_14.project);
	                                      return _37;
	                                  })();
	                                  var nodes = Data_Maybe.maybe([  ])(Prelude.id(Prelude.categoryFn))(Data_Array.deleteAt(nodeIndex.value0)(project_1.nodes));
	                                  return record((function () {
	                                      var _38 = {};
	                                      for (var _39 in project_1) {
	                                          if (project_1.hasOwnProperty(_39)) {
	                                              _38[_39] = project_1[_39];
	                                          };
	                                      };
	                                      _38.nodes = nodes;
	                                      return _38;
	                                  })());
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ nodeIndex.constructor.name ]);
	                          })();
	                          var pullUp = (function () {
	                              if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              if (nodeIndex instanceof Data_Maybe.Just) {
	                                  var removeNode_1 = Data_Array.modifyAt(nodeIndex.value0)(function (_12) {
	                                      var _43 = {};
	                                      for (var _44 in _12) {
	                                          if (_12.hasOwnProperty(_44)) {
	                                              _43[_44] = _12[_44];
	                                          };
	                                      };
	                                      _43.zIndex = maxIndex(_14) + 1 | 0;
	                                      _43.dragging = true;
	                                      return _43;
	                                  })(project.nodes);
	                                  var modified = Data_Maybe.fromMaybe(project.nodes)(removeNode_1);
	                                  return updateApplication((function () {
	                                      var _47 = {};
	                                      for (var _48 in _14) {
	                                          if (_14.hasOwnProperty(_48)) {
	                                              _47[_48] = _14[_48];
	                                          };
	                                      };
	                                      _47.transition = false;
	                                      _47.project = Soundknot_Historical.record(Soundknot_Types.eq_Project)(_14.project)((function () {
	                                          var _45 = {};
	                                          for (var _46 in project) {
	                                              if (project.hasOwnProperty(_46)) {
	                                                  _45[_46] = project[_46];
	                                              };
	                                          };
	                                          _45.nodes = modified;
	                                          return _45;
	                                      })());
	                                      return _47;
	                                  })());
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ nodeIndex.constructor.name ]);
	                          })();
	                          var startConnecting = function (node) {
	                              return function (connector) {
	                                  return updateApplication((function () {
	                                      var _50 = {};
	                                      for (var _51 in _14) {
	                                          if (_14.hasOwnProperty(_51)) {
	                                              _50[_51] = _14[_51];
	                                          };
	                                      };
	                                      _50.project = Soundknot_Historical.record(Soundknot_Types.eq_Project)(_14.project)(project);
	                                      _50.connecting = new Data_Maybe.Just({
	                                          port: {
	                                              node: node, 
	                                              connector: connector
	                                          }, 
	                                          mouse: Data_Maybe.Nothing.value
	                                      });
	                                      return _50;
	                                  })());
	                              };
	                          };
	                          var updateState = function (state) {
	                              if (nodeIndex instanceof Data_Maybe.Nothing) {
	                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                              };
	                              if (nodeIndex instanceof Data_Maybe.Just) {
	                                  return updateApplication((function () {
	                                      var _55 = {};
	                                      for (var _56 in _14) {
	                                          if (_14.hasOwnProperty(_56)) {
	                                              _55[_56] = _14[_56];
	                                          };
	                                      };
	                                      _55.project = Soundknot_Historical.overwrite(_14.project)((function () {
	                                          var _53 = {};
	                                          for (var _54 in project) {
	                                              if (project.hasOwnProperty(_54)) {
	                                                  _53[_54] = project[_54];
	                                              };
	                                          };
	                                          _53.nodes = Data_Maybe.maybe(project.nodes)(Prelude.id(Prelude.categoryFn))(Data_Array.updateAt(nodeIndex.value0)(state)(project.nodes));
	                                          return _53;
	                                      })());
	                                      return _55;
	                                  })());
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ nodeIndex.constructor.name ]);
	                          };
	                          var renderFrame = (function () {
	                              var range = function (props) {
	                                  return function (lens) {
	                                      var s = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))(_15);
	                                      var onInput = function (value) {
	                                          return updateState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(value)(_15));
	                                      };
	                                      var onChange = function (value) {
	                                          return recordState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(value)(_15));
	                                      };
	                                      return Soundknot_UI_Components.rangeInput(s)(Prelude["++"](Prelude.semigroupArray)([ OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                          return record(project);
	                                      }) ])(props))(onInput)(onChange);
	                                  };
	                              };
	                              var label = function (t) {
	                                  return OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text(t + ":"));
	                              };
	                              var list = function (__dict_Eq_0) {
	                                  return function (__dict_Show_1) {
	                                      return function (__dict_IsForeign_2) {
	                                          return function (l) {
	                                              return function (xs) {
	                                                  return function (lens) {
	                                                      var x = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))(_15);
	                                                      return OpticUI_Markup_HTML.tr([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.th([  ])(label(l)), OpticUI_Markup_HTML.th([  ])(Soundknot_UI_Components.dropDownList(__dict_Eq_0)(__dict_Show_1)(xs)(x)([  ])(function (value) {
	                                                          return recordState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(value)(_15));
	                                                      })) ]));
	                                                  };
	                                              };
	                                          };
	                                      };
	                                  };
	                              };
	                              var row = function (txt) {
	                                  return function (min) {
	                                      return function (max) {
	                                          return function (step) {
	                                              return function (lens) {
	                                                  var s = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))(_15);
	                                                  return OpticUI_Markup_HTML.tr([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.th([  ])(label(txt)), OpticUI_Markup_HTML.th([  ])(Soundknot_UI_Components.numberInput(s)([ OpticUI_Markup.attr("min")(Prelude.show(Prelude.showNumber)(min)), OpticUI_Markup.attr("max")(Prelude.show(Prelude.showNumber)(max)), OpticUI_Markup.attr("step")(Prelude.show(Prelude.showNumber)(step)) ])(function (value) {
	                                                      return recordState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(value)(_15));
	                                                  })) ]));
	                                              };
	                                          };
	                                      };
	                                  };
	                              };
	                              var getDefaultValue = function (ps) {
	                                  var _58 = Data_Array.head(ps);
	                                  if (_58 instanceof Data_Maybe.Just && _58.value0 instanceof WebAudio_Core.ConstantValue) {
	                                      return _58.value0.value0;
	                                  };
	                                  return 0.0;
	                              };
	                              if (_15.props instanceof Soundknot_Types.DestinationFrame) {
	                                  return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text("Sample Rate:" + (Soundknot_Utils.toFixed(sampleRate * 1.0e-3)(1) + "KHz"))), OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text("Gain:" + Prelude.show(Prelude.showNumber)(getDefaultValue(_15.props.value0.gain)))), range([  ])(function (__dict_Strong_3) {
	                                      return function (_136) {
	                                          return Soundknot_Lens.props(__dict_Strong_3)(Soundknot_Lens.destinationFrame(__dict_Strong_3)(Soundknot_Lens.gainConstantValue(__dict_Strong_3)(_136)));
	                                      };
	                                  }), OpticUI_Markup_HTML.style([  ])(OpticUI_Markup.text("")) ]);
	                              };
	                              if (_15.props instanceof Soundknot_Types.GainFrame) {
	                                  return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text("Gain:" + Prelude.show(Prelude.showNumber)(getDefaultValue(_15.props.value0.gain)))), range([ OpticUI_Markup.attr("max")("5.0") ])(function (__dict_Strong_4) {
	                                      return function (_137) {
	                                          return Soundknot_Lens.props(__dict_Strong_4)(Soundknot_Lens.gainFrame(__dict_Strong_4)(Soundknot_Lens.gainConstantValue(__dict_Strong_4)(_137)));
	                                      };
	                                  }), OpticUI_Markup_HTML.style([  ])(OpticUI_Markup.text("")) ]);
	                              };
	                              if (_15.props instanceof Soundknot_Types.DelayFrame) {
	                                  return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text("Delay Time:" + Prelude.show(Prelude.showNumber)(getDefaultValue(_15.props.value0.delayTime)))), range([  ])(function (__dict_Strong_5) {
	                                      return function (_138) {
	                                          return Soundknot_Lens.props(__dict_Strong_5)(Soundknot_Lens.delayFrame(__dict_Strong_5)(Soundknot_Lens.delayConstantValue(__dict_Strong_5)(_138)));
	                                      };
	                                  }), OpticUI_Markup_HTML.style([  ])(OpticUI_Markup.text("")) ]);
	                              };
	                              if (_15.props instanceof Soundknot_Types.AudioBufferFrame) {
	                                  return OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.viewFrameMenuBar) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), OpticUI_Markup_HTML.onClick(function (e) {
	                                      return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                                          if (_14.driver instanceof Data_Maybe.Nothing) {
	                                              return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                          };
	                                          if (_14.driver instanceof Data_Maybe.Just) {
	                                              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Sound_AudioGraph_Core.getAudioGraphContext))(function (_1) {
	                                                  return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Utils.openFile)(function (_0) {
	                                                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(recordState(Data_Lens_Setter.set(function (_139) {
	                                                          return Soundknot_Lens.props(Data_Profunctor_Strong.strongFn)(Soundknot_Lens.audioBufferFrame(Data_Profunctor_Strong.strongFn)(_139));
	                                                      })({
	                                                          file: new Data_Maybe.Just(_0)
	                                                      })(_15))))(function () {
	                                                          return Soundknot_Update.loadAudioFile(_14.driver.value0)(_0);
	                                                      });
	                                                  });
	                                              });
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _14.driver.constructor.name ]);
	                                      })());
	                                  }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(Soundknot_Utils.glyphicon("open"))(OpticUI_Markup.text("Open"))) ])), OpticUI_Markup_HTML.div([  ])(OpticUI_Markup.text("File: " + Data_Maybe.maybe("")(function (file) {
	                                      return (Unsafe_Coerce.unsafeCoerce(file)).name;
	                                  })(_15.props.value0.file))), OpticUI_Markup_HTML.div([  ])(OpticUI_Markup.text("Status: " + (function () {
	                                      if (_15.props.value0.file instanceof Data_Maybe.Nothing) {
	                                          return "Empty";
	                                      };
	                                      if (_15.props.value0.file instanceof Data_Maybe.Just) {
	                                          var _70 = Data_StrMap.lookup((Unsafe_Coerce.unsafeCoerce(_15.props.value0.file.value0)).name)(_14.audioBuffers);
	                                          if (_70 instanceof Data_Maybe.Nothing) {
	                                              return "Decoding";
	                                          };
	                                          if (_70 instanceof Data_Maybe.Just) {
	                                              return "Complete";
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _70.constructor.name ]);
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _15.props.value0.file.constructor.name ]);
	                                  })())) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.VideoFrame) {
	                                  return OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.viewFrameMenuBar) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), OpticUI_Markup_HTML.onClick(function (e) {
	                                      return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Utils.openFile)(function (_3) {
	                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
	                                              var _2 = TypedArray.createObjectURL(TypedArray.fileToBlob(_3))();
	                                              return recordState(Data_Lens_Setter.set(function (_140) {
	                                                  return Soundknot_Lens.props(Data_Profunctor_Strong.strongFn)(Soundknot_Lens.videoFrame(Data_Profunctor_Strong.strongFn)(_140));
	                                              })(Data_Maybe.Just.create(new Soundknot_Types.FileSource(_3, _2)))(_15))();
	                                          });
	                                      }));
	                                  }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(Soundknot_Utils.glyphicon("open"))(OpticUI_Markup.text("Open"))), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("fileName") ])(OpticUI_Markup.text((function () {
	                                      if (_15.props.value0 instanceof Data_Maybe.Nothing) {
	                                          return "";
	                                      };
	                                      if (_15.props.value0 instanceof Data_Maybe.Just && _15.props.value0.value0 instanceof Soundknot_Types.FileSource) {
	                                          return (Unsafe_Coerce.unsafeCoerce(_15.props.value0.value0.value0)).name;
	                                      };
	                                      if (_15.props.value0 instanceof Data_Maybe.Just && _15.props.value0.value0 instanceof Soundknot_Types.URLMediaSource) {
	                                          return _15.props.value0.value0.value0;
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _15.props.value0.constructor.name ]);
	                                  })())) ])), OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup_HTML.video([ OpticUI_Markup.attr("src")((function () {
	                                      if (_15.props.value0 instanceof Data_Maybe.Just && _15.props.value0.value0 instanceof Soundknot_Types.URLMediaSource) {
	                                          return _15.props.value0.value0.value0;
	                                      };
	                                      if (_15.props.value0 instanceof Data_Maybe.Just && _15.props.value0.value0 instanceof Soundknot_Types.FileSource) {
	                                          return _15.props.value0.value0.value1;
	                                      };
	                                      if (_15.props.value0 instanceof Data_Maybe.Nothing) {
	                                          return "";
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _15.props.value0.constructor.name ]);
	                                  })()), OpticUI_Markup.attr("controls")(""), OpticUI_Markup.attr("id")(_15.name) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid))) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.StereoPannerFrame) {
	                                  return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.destinationContent) ])(OpticUI_Markup.text("Pan: " + Prelude.show(Prelude.showNumber)(getDefaultValue(_15.props.value0.pan)))), range([ OpticUI_Markup.attr("min")("-1.0"), OpticUI_Markup.attr("max")("1.0") ])(function (__dict_Strong_6) {
	                                      return function (_141) {
	                                          return Soundknot_Lens.props(__dict_Strong_6)(Soundknot_Lens.stereoPannerFrame(__dict_Strong_6)(Soundknot_Lens.panConstantValue(__dict_Strong_6)(_141)));
	                                      };
	                                  }), OpticUI_Markup_HTML.style([  ])(OpticUI_Markup.text("")) ]);
	                              };
	                              if (_15.props instanceof Soundknot_Types.ConvolverFrame) {
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width: 120px; height: 30px;") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              };
	                              if (_15.props instanceof Soundknot_Types.AnalyserFrame) {
	                                  return OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("pitch"), OpticUI_Markup_HTML.styleA("font-family: monospace") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("note"), OpticUI_Markup_HTML.styleA("font-family: monospace") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)), OpticUI_Markup_SVG.svg([ OpticUI_Markup_HTML.classA("analyser"), OpticUI_Markup_HTML.styleA("width: 1024px; height: 256px;"), OpticUI_Markup.attr("xmlns")("http://www.w3.org/2000/svg"), OpticUI_Markup.attr("data-name")(_15.name + "-input") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_SVG.path([ OpticUI_Markup_SVG.fillA("dimgrey"), Soundknot_Classes["classA'"](Soundknot_Classes.frequency) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)), OpticUI_Markup_SVG.path([ Soundknot_Classes["classA'"](Soundknot_Classes.timeDomain) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid)) ])) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.ChannelSplitterFrame) {
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("height: 150px;") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              };
	                              if (_15.props instanceof Soundknot_Types.ChannelMergerFrame) {
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("height: 150px;") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              };
	                              if (_15.props instanceof Soundknot_Types.DynamicsCompressorFrame) {
	                                  return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ row("Threshold")(-100.0)(0.0)(1.0)(function (__dict_Strong_7) {
	                                      return function (_142) {
	                                          return Soundknot_Lens.props(__dict_Strong_7)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_7)(Soundknot_Lens.threshold(__dict_Strong_7)(_142)));
	                                      };
	                                  }), row("Knee")(0.0)(40.0)(1.0)(function (__dict_Strong_8) {
	                                      return function (_143) {
	                                          return Soundknot_Lens.props(__dict_Strong_8)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_8)(Soundknot_Lens.knee(__dict_Strong_8)(_143)));
	                                      };
	                                  }), row("Ratio")(1.0)(20.0)(1.0)(function (__dict_Strong_9) {
	                                      return function (_144) {
	                                          return Soundknot_Lens.props(__dict_Strong_9)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_9)(Soundknot_Lens.ratio(__dict_Strong_9)(_144)));
	                                      };
	                                  }), row("Reduction")(-20.0)(0.0)(1.0)(function (__dict_Strong_10) {
	                                      return function (_145) {
	                                          return Soundknot_Lens.props(__dict_Strong_10)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_10)(Soundknot_Lens.reduction(__dict_Strong_10)(_145)));
	                                      };
	                                  }), row("Attack")(0.0)(1.0)(1.0e-3)(function (__dict_Strong_11) {
	                                      return function (_146) {
	                                          return Soundknot_Lens.props(__dict_Strong_11)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_11)(Soundknot_Lens.attack(__dict_Strong_11)(_146)));
	                                      };
	                                  }), row("Release")(0.0)(1.0)(1.0e-3)(function (__dict_Strong_12) {
	                                      return function (_147) {
	                                          return Soundknot_Lens.props(__dict_Strong_12)(Soundknot_Lens.dynamicsCompressorFrame(__dict_Strong_12)(Soundknot_Lens.release(__dict_Strong_12)(_147)));
	                                      };
	                                  }) ]);
	                              };
	                              if (_15.props instanceof Soundknot_Types.BiquadFilterFrame) {
	                                  return OpticUI_Markup_HTML.table([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ list(WebAudio_BiquadFilter.eq_BiquadFilterType)(WebAudio_BiquadFilter.show_BiquadFilterType)(WebAudio_BiquadFilter.isForeign_BiquadFilterType)("Type")(WebAudio_BiquadFilter.enumBiquadFilterType)(function (__dict_Strong_13) {
	                                      return function (_148) {
	                                          return Soundknot_Lens.props(__dict_Strong_13)(Soundknot_Lens.bilinearFilterFrame(__dict_Strong_13)(Soundknot_Lens["type'"](__dict_Strong_13)(_148)));
	                                      };
	                                  }), row("Frequency")(1.0)(5000.0)(10.0)(function (__dict_Strong_14) {
	                                      return function (_149) {
	                                          return Soundknot_Lens.props(__dict_Strong_14)(Soundknot_Lens.bilinearFilterFrame(__dict_Strong_14)(Soundknot_Lens.frequency(__dict_Strong_14)(_149)));
	                                      };
	                                  }), row("Detune")(-100.0)(100.0)(1.0)(function (__dict_Strong_15) {
	                                      return function (_150) {
	                                          return Soundknot_Lens.props(__dict_Strong_15)(Soundknot_Lens.bilinearFilterFrame(__dict_Strong_15)(Soundknot_Lens.detune(__dict_Strong_15)(_150)));
	                                      };
	                                  }), row("Q")(1.0e-4)(1000.0)(10.0)(function (__dict_Strong_16) {
	                                      return function (_151) {
	                                          return Soundknot_Lens.props(__dict_Strong_16)(Soundknot_Lens.bilinearFilterFrame(__dict_Strong_16)(Soundknot_Lens.q(__dict_Strong_16)(_151)));
	                                      };
	                                  }), row("Gain")(-40.0)(40.0)(1.0)(function (__dict_Strong_17) {
	                                      return function (_152) {
	                                          return Soundknot_Lens.props(__dict_Strong_17)(Soundknot_Lens.bilinearFilterFrame(__dict_Strong_17)(Soundknot_Lens.gain(__dict_Strong_17)(_152)));
	                                      };
	                                  }) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.WaveShaperFrame) {
	                                  return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                              };
	                              if (_15.props instanceof Soundknot_Types.OscillatorFrame) {
	                                  return OpticUI_Markup_HTML.table([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ list(WebAudio_Oscillator.eq_OscillatorType)(WebAudio_Oscillator.show_OscillatorType)(WebAudio_Oscillator.isForeign_OscillatorType)("Type")(WebAudio_Oscillator.enumOscillatorType)(function (__dict_Strong_18) {
	                                      return function (_153) {
	                                          return Soundknot_Lens.props(__dict_Strong_18)(Soundknot_Lens.oscillatorFrame(__dict_Strong_18)(Soundknot_Lens["type'"](__dict_Strong_18)(_153)));
	                                      };
	                                  }), row("Frequency")(1.0)(5000.0)(10.0)(function (__dict_Strong_19) {
	                                      return function (_154) {
	                                          return Soundknot_Lens.props(__dict_Strong_19)(Soundknot_Lens.oscillatorFrame(__dict_Strong_19)(Soundknot_Lens.frequency(__dict_Strong_19)(_154)));
	                                      };
	                                  }), row("Detune")(-10.0)(10.0)(1.0)(function (__dict_Strong_20) {
	                                      return function (_155) {
	                                          return Soundknot_Lens.props(__dict_Strong_20)(Soundknot_Lens.oscillatorFrame(__dict_Strong_20)(Soundknot_Lens.detune(__dict_Strong_20)(_155)));
	                                      };
	                                  }) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.MediaStreamFrame) {
	                                  return OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Status: "))(Soundknot_Utils.glyphicon(Data_Maybe.maybe("remove")(Prelude["const"]("ok"))(_14.localMediaStream))) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.KeyboardFrame) {
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("keyboard") ])(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (i) {
	                                      return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("key whiteKey"), OpticUI_Markup.initializer("init-keyboard-" + _15.name)(function (element) {
	                                          return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                                              if (_14.driver instanceof Data_Maybe.Nothing) {
	                                                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                              };
	                                              if (_14.driver instanceof Data_Maybe.Just) {
	                                                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad.when(Control_Monad_Aff.monadAff)(!Data_StrMap.member("soundfont/sonatina-symphonic-orchestra/samples/grand-piano/piano-p-a1.mp3")(_14.audioBuffers))(Soundknot_Update.loadAudioFileByURL(_14.driver.value0)("soundfont/sonatina-symphonic-orchestra/samples/grand-piano/piano-p-a1.mp3")))(function () {
	                                                      return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                                  });
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _14.driver.constructor.name ]);
	                                          })());
	                                      }), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                          return function __do() {
	                                              updateState(Soundknot_Types.NodeState((function () {
	                                                  var _97 = {};
	                                                  for (var _98 in _15) {
	                                                      if (_15.hasOwnProperty(_98)) {
	                                                          _97[_98] = _15[_98];
	                                                      };
	                                                  };
	                                                  _97.props = new Soundknot_Types.KeyboardFrame({
	                                                      instrument: _15.props.value0.instrument, 
	                                                      notes: Data_Array.nub(Prelude.eqInt)(Data_Array[":"](i)(_15.props.value0.notes))
	                                                  });
	                                                  return _97;
	                                              })()))();
	                                              return Prelude.unit;
	                                          };
	                                      }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                  })(Data_Array[".."](0)(24)));
	                              };
	                              if (_15.props instanceof Soundknot_Types.TimelineFrame) {
	                                  return Soundknot_UI_Timeline_Markup.renderTimelineFrame(sampleRate)(_14)(updateApplication)(record)(nodeIndex)(_15)(_15.props.value0);
	                              };
	                              if (_15.props instanceof Soundknot_Types.InstrumentFrame) {
	                                  var mapper = Data_String.drop(Data_String.length(Soundknot_UI_Instrument_Types.ssoDir));
	                                  var items = Prelude.map(Prelude.functorArray)(Prelude["++"](Prelude.semigroupString)(Soundknot_UI_Instrument_Types.ssoDir))(Soundknot_UI_Instrument_Types.sfzList);
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width: 200px"), OpticUI_Markup_HTML.onMouseUp(function (e) {
	                                      return function __do() {
	                                          var _5 = Sound_AudioGraph_Core.getAudioGraphContext();
	                                          var _4 = WebAudio_Core.currentTime(_5)();
	                                          return updateState(Soundknot_Types.NodeState((function () {
	                                              var _105 = {};
	                                              for (var _106 in _15) {
	                                                  if (_15.hasOwnProperty(_106)) {
	                                                      _105[_106] = _15[_106];
	                                                  };
	                                              };
	                                              _105.props = new Soundknot_Types.InstrumentFrame((function () {
	                                                  var _103 = {};
	                                                  for (var _104 in _15.props.value0) {
	                                                      if (_15.props.value0.hasOwnProperty(_104)) {
	                                                          _103[_104] = _15.props.value0[_104];
	                                                      };
	                                                  };
	                                                  _103.notes = Soundknot_Types.allNotesOff(_4)(_15.props.value0.notes);
	                                                  return _103;
	                                              })());
	                                              return _105;
	                                          })()))();
	                                      };
	                                  }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Instrument: "))(OpticUI_Markup.text(mapper(_15.props.value0.instrument)))), OpticUI_Markup_HTML.div([  ])(Soundknot_UI_Components.textDropDownList(items)(mapper)(_15.props.value0.instrument)([ OpticUI_Markup_HTML.styleA("width: 100%") ])(function (value) {
	                                      return function __do() {
	                                          (function () {
	                                              if (_14.driver instanceof Data_Maybe.Nothing) {
	                                                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                              };
	                                              if (_14.driver instanceof Data_Maybe.Just) {
	                                                  return Soundknot_Update.loadInstrument(value)(_14.driver.value0);
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _14.driver.constructor.name ]);
	                                          })()();
	                                          updateState(Soundknot_Types.NodeState((function () {
	                                              var _111 = {};
	                                              for (var _112 in _15) {
	                                                  if (_15.hasOwnProperty(_112)) {
	                                                      _111[_112] = _15[_112];
	                                                  };
	                                              };
	                                              _111.props = new Soundknot_Types.InstrumentFrame((function () {
	                                                  var _109 = {};
	                                                  for (var _110 in _15.props.value0) {
	                                                      if (_15.props.value0.hasOwnProperty(_110)) {
	                                                          _109[_110] = _15.props.value0[_110];
	                                                      };
	                                                  };
	                                                  _109.instrument = value;
	                                                  _109.notes = [  ];
	                                                  return _109;
	                                              })());
	                                              return _111;
	                                          })()))();
	                                          return Prelude.unit;
	                                      };
	                                  })), OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("display:flex; flex-direction:row; border:solid 1px grey; margin-top: 12px;") ])((function () {
	                                      var sfz = Prelude["<$>"](Data_Maybe.functorMaybe)(SoundFont.flattenSFZ)(Data_StrMap.lookup(_15.props.value0.instrument)(_14.sfzMap));
	                                      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (i) {
	                                          var noted = Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function (n) {
	                                              if (n instanceof Soundknot_Types.NoteOn && i === n.value0) {
	                                                  return true;
	                                              };
	                                              return false;
	                                          })(_15.props.value0.notes);
	                                          var loaded = Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(sfz)(function (_8) {
	                                              return Prelude.bind(Data_Maybe.bindMaybe)(SoundFont.regionIndex(_8)(i))(function (_7) {
	                                                  return Prelude.bind(Data_Maybe.bindMaybe)(SoundFont.findBuffer(_8)(Soundknot_UI_Instrument_Types.ssoDir)(_14.audioBuffers)(_7))(function () {
	                                                      return Prelude.pure(Data_Maybe.applicativeMaybe)(true);
	                                                  });
	                                              });
	                                          }));
	                                          var exists = Data_Maybe.fromMaybe(false)(Prelude.bind(Data_Maybe.bindMaybe)(sfz)(function (_6) {
	                                              return Prelude.pure(Data_Maybe.applicativeMaybe)(SoundFont.hasNote(_6)(i));
	                                          }));
	                                          var style = "width:2px; height:8px; background-color:" + (function () {
	                                              if (noted) {
	                                                  return "red";
	                                              };
	                                              if (!noted) {
	                                                  if (loaded) {
	                                                      return "white";
	                                                  };
	                                                  if (!loaded) {
	                                                      if (exists) {
	                                                          return "lightgrey";
	                                                      };
	                                                      if (!exists) {
	                                                          return "dimgrey";
	                                                      };
	                                                      throw new Error("Failed pattern match: " + [ exists.constructor.name ]);
	                                                  };
	                                                  throw new Error("Failed pattern match: " + [ loaded.constructor.name ]);
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ noted.constructor.name ]);
	                                          })();
	                                          return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA(style), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                              return function __do() {
	                                                  var _10 = Sound_AudioGraph_Core.getAudioGraphContext();
	                                                  var _9 = WebAudio_Core.currentTime(_10)();
	                                                  return updateState(Soundknot_Types.NodeState((function () {
	                                                      var _125 = {};
	                                                      for (var _126 in _15) {
	                                                          if (_15.hasOwnProperty(_126)) {
	                                                              _125[_126] = _15[_126];
	                                                          };
	                                                      };
	                                                      _125.props = Soundknot_Types.InstrumentFrame.create(Data_Maybe.fromMaybe(_15.props.value0)(Soundknot_Types.processMidiCommand(_9)(144)(i)(70)(_15.props.value0)));
	                                                      return _125;
	                                                  })()))();
	                                              };
	                                          }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                                      })(Data_Array[".."](0)(127));
	                                  })()) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.MidiInputFrame) {
	                                  var input = Data_StrMap.lookup(_15.props.value0.port)(_14.midiInputs);
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width: 200px") ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Input: "))(Soundknot_UI_Components.dropDownList(Prelude.eqString)(Prelude.showString)(Prelude.map(Prelude.functorArray)(WebMidi.id)(Data_List.fromList(Data_Unfoldable.unfoldableArray)(Data_StrMap.values(_14.midiInputs))))(_15.props.value0.port)([  ])(function (value) {
	                                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                  }))), OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Message: "))(OpticUI_Markup.text(Prelude.show(Prelude.showArray(Prelude.showInt))(_15.props.value0.message)))), OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Manifacturer: "))(OpticUI_Markup.text(Data_Maybe.maybe("")(WebMidi.manufacturer)(input)))), OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Name: "))(OpticUI_Markup.text(Data_Maybe.maybe("")(WebMidi.name)(input)))), OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("Version: "))(OpticUI_Markup.text(Data_Maybe.maybe("")(WebMidi.version)(input)))), OpticUI_Markup_HTML.div([  ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(OpticUI_Markup.text("State: "))(OpticUI_Markup.text(Data_Maybe.maybe("")(WebMidi.state)(input)))) ]));
	                              };
	                              if (_15.props instanceof Soundknot_Types.WebMidiLinkFrame) {
	                                  return Data_Monoid.mempty(OpticUI_Markup.markupMonoid);
	                              };
	                              if (_15.props instanceof Soundknot_Types.PitchDetectFrame) {
	                                  return OpticUI_Markup_HTML.div([  ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([  ])(OpticUI_Markup.text("Frequency: ---- Hz")), OpticUI_Markup_HTML.div([  ])(OpticUI_Markup.text("Pitch: C#3")) ]));
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _15.props.constructor.name ]);
	                          })();
	                          var finishConnecting = function (node) {
	                              return function (connector) {
	                                  if (_14.connecting instanceof Data_Maybe.Nothing) {
	                                      return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff);
	                                  };
	                                  if (_14.connecting instanceof Data_Maybe.Just) {
	                                      var project_1 = (function () {
	                                          var _130 = Soundknot_Historical.runHistorical(_14.project);
	                                          return _130;
	                                      })();
	                                      var edges = Data_Array[":"]({
	                                          output: _14.connecting.value0.port, 
	                                          input: {
	                                              node: node, 
	                                              connector: connector
	                                          }
	                                      })(project_1.edges);
	                                      return updateApplication((function () {
	                                          var _133 = {};
	                                          for (var _134 in _14) {
	                                              if (_14.hasOwnProperty(_134)) {
	                                                  _133[_134] = _14[_134];
	                                              };
	                                          };
	                                          _133.project = Soundknot_Historical.overwrite(_14.project)((function () {
	                                              var _131 = {};
	                                              for (var _132 in project_1) {
	                                                  if (project_1.hasOwnProperty(_132)) {
	                                                      _131[_132] = project_1[_132];
	                                                  };
	                                              };
	                                              _131.edges = edges;
	                                              return _131;
	                                          })());
	                                          return _133;
	                                      })());
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Node line 47, column 1 - line 48, column 1: " + [ _14.connecting.constructor.name ]);
	                              };
	                          };
	                          return OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.wiringFrame), OpticUI_Markup.attr("data-node-id")(_15.name), OpticUI_Markup.attr("data-node-type")(Soundknot_Types.frameTypeToTitle(_15.props)), OpticUI_Markup.key(_15.name), OpticUI_Markup_HTML.styleA(Data_String.joinWith("")([ "opacity:", Data_Maybe.maybe("0.0")(Prelude["const"]("1.0"))(nodeIndex), ";", "left:", Prelude.show(Prelude.showNumber)(_15.position.x), "px;", "top:", Prelude.show(Prelude.showNumber)(_15.position.y), "px;", " z-index:", Prelude.show(Prelude.showInt)(_15.zIndex), ";" ])), OpticUI_Markup.initializer("init-node")(function (element) {
	                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                          }), OpticUI_Markup_HTML.onDrop(function (e) {
	                              return function __do() {
	                                  Soundknot_Polyfill.preventDefault(e)();
	                                  Soundknot_Polyfill.stopPropagation(e)();
	                                  return Prelude.unit;
	                              };
	                          }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.clippingPane) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.titleBar), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                              return pullUp;
	                          }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.titleText) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ Soundknot_Utils.glyphicon(Soundknot_Types.iconName(_15.props)), OpticUI_Markup.text(Soundknot_Types.frameTypeToTitle(_15.props)) ])), OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.closeButton), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                              return Soundknot_Polyfill.stopPropagation(e);
	                          }), OpticUI_Markup_HTML.onClick(function (e) {
	                              return removeNode;
	                          }) ])(Soundknot_Utils.glyphicon("remove-sign")) ])), OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.nodeContentPane), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                              return Soundknot_Polyfill.stopPropagation(e);
	                          }) ])(renderFrame) ])), Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Soundknot_Utils.withIndex(Soundknot_Types.getInputPorts(_15.name)(_15.props))(function (index) {
	                              return function (input) {
	                                  var name = _15.name + ("-" + input.name);
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("connector inputConnector"), OpticUI_Markup_HTML.styleA("top:" + (Prelude.show(Prelude.showInt)(40 + (30 * index | 0) | 0) + "px")), OpticUI_Markup.attr("data-type")(Prelude.show(Soundknot_Types.show_PortValue)(input.type)), OpticUI_Markup.attr("data-name")(name), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                      return function __do() {
	                                          Soundknot_Polyfill.stopPropagation(e)();
	                                          return Soundknot_Polyfill.preventDefault(e)();
	                                      };
	                                  }), OpticUI_Markup_HTML.onMouseUp(function (e) {
	                                      return finishConnecting(_15.name)(name);
	                                  }), OpticUI_Markup.attr("id")(name) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              };
	                          })), Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Soundknot_Utils.withIndex(Soundknot_Types.getOutputPorts(_15.name)(_15.props))(function (index) {
	                              return function (input) {
	                                  var name = _15.name + ("-" + input.name);
	                                  return OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("connector outputConnector"), OpticUI_Markup_HTML.styleA("top:" + (Prelude.show(Prelude.showInt)(40 + (30 * index | 0) | 0) + "px")), OpticUI_Markup.attr("data-type")(Prelude.show(Soundknot_Types.show_PortValue)(input.type)), OpticUI_Markup.attr("data-name")(name), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                                      return function __do() {
	                                          Soundknot_Polyfill.stopPropagation(e)();
	                                          Soundknot_Polyfill.preventDefault(e)();
	                                          return startConnecting(_15.name)(name)();
	                                      };
	                                  }), OpticUI_Markup_HTML.onMouseMove(Soundknot_Polyfill.stopPropagation), OpticUI_Markup.attr("id")(name) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                              };
	                          })) ]));
	                      };
	                  };
	              };
	          };
	      };
	  };
	  exports["createEditorNode"] = createEditorNode;;
	 
	})(PS["Soundknot.UI.Node"] = PS["Soundknot.UI.Node"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Data_Lens_Lens = PS["Data.Lens.Lens"];
	  var Data_List = PS["Data.List"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
	  var OpticUI_Core = PS["OpticUI.Core"];
	  var Soundknot_UI_Node = PS["Soundknot.UI.Node"];
	  var Prelude = PS["Prelude"];
	  var $$Math = PS["Math"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Int = PS["Data.Int"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Ord = PS["Data.Ord"];
	  var Data_String = PS["Data.String"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var OpticUI_Markup_SVG = PS["OpticUI.Markup.SVG"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Polyfill = PS["Soundknot.Polyfill"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var TypedArray = PS["TypedArray"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
	  var appCanvas = function (sampleRate) {
	      return function (_18) {
	          return function (updateApplication) {
	              var record = function (next) {
	                  return updateApplication((function () {
	                      var _24 = {};
	                      for (var _25 in _18) {
	                          if (_18.hasOwnProperty(_25)) {
	                              _24[_25] = _18[_25];
	                          };
	                      };
	                      _24.project = Soundknot_Historical.record(Soundknot_Types.eq_Project)(_18.project)(next);
	                      return _24;
	                  })());
	              };
	              var project = (function () {
	                  var _26 = Soundknot_Historical.runHistorical(_18.project);
	                  return _26;
	              })();
	              var maxIndex = function (_19) {
	                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (x) {
	                      return function (_11) {
	                          return Data_Ord.max(Prelude.ordInt)(x)(_11.zIndex);
	                      };
	                  })(0)(project.nodes);
	              };
	              var matrix = (function () {
	                  var y = Soundknot_Utils.toFixed(_18.translation.y)(8);
	                  var x = Soundknot_Utils.toFixed(_18.translation.x)(8);
	                  var sc = Soundknot_Utils.toFixed($$Math.pow(Soundknot_Types.scaleBase)(Data_Int.toNumber(_18.scaleFactor)))(8);
	                  return Data_String.joinWith("")([ "matrix(", sc, ", 0, 0,", sc, ", ", x, ", ", y, ")" ]);
	              })();
	              var mapIndex = function (f) {
	                  return function (xs) {
	                      if (Data_Array.length(xs) === 0) {
	                          return [  ];
	                      };
	                      if (Prelude.otherwise) {
	                          return Prelude.map(Prelude.functorArray)(function (i) {
	                              return f(i)(xs[i]);
	                          })(Data_Array[".."](0)(Data_Array.length(xs) - 1));
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ f.constructor.name, xs.constructor.name ]);
	                  };
	              };
	              var line$prime = function (x0) {
	                  return function (y0) {
	                      return function (x1) {
	                          return function (y1) {
	                              return OpticUI_Markup_SVG.line([ OpticUI_Markup_HTML.classA("grid"), OpticUI_Markup.attr("x1")(Prelude.show(Prelude.showInt)(x0)), OpticUI_Markup.attr("y1")(Prelude.show(Prelude.showInt)(y0)), OpticUI_Markup.attr("x2")(Prelude.show(Prelude.showInt)(x1)), OpticUI_Markup.attr("y2")(Prelude.show(Prelude.showInt)(y1)) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                          };
	                      };
	                  };
	              };
	              var grid = Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (i) {
	                  return Prelude["++"](OpticUI_Markup.markupSemigroup)(line$prime(-240 * 10 | 0)(i * 240 | 0)(240 * 10 | 0)(i * 240 | 0))(line$prime(i * 240 | 0)(-240 * 10 | 0)(i * 240 | 0)(240 * 10 | 0));
	              })(Data_Array[".."](-10)(10));
	              var dropButton = function (props) {
	                  var label = Soundknot_Types.frameTypeToTitle(props);
	                  return OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), OpticUI_Markup_HTML.draggableA, OpticUI_Markup_HTML.onMouseDown(function (e) {
	                      return updateApplication((function () {
	                          var _31 = {};
	                          for (var _32 in _18) {
	                              if (_18.hasOwnProperty(_32)) {
	                                  _31[_32] = _18[_32];
	                              };
	                          };
	                          _31.appendingNode = Data_Maybe.Just.create(Prelude.pure(Control_Monad_Eff.applicativeEff)(props));
	                          return _31;
	                      })());
	                  }) ])(OpticUI_Markup.text(label));
	              };
	              var curve = function (i) {
	                  return function (_20) {
	                      return function (input) {
	                          return OpticUI_Markup_SVG.path([ OpticUI_Markup_HTML.classA("connection"), OpticUI_Markup.attr("stroke-linecap")("round"), OpticUI_Markup.key(_20.connector + ("." + (function () {
	                              if (input instanceof Data_Maybe.Nothing) {
	                                  return "";
	                              };
	                              if (input instanceof Data_Maybe.Just) {
	                                  return input.value0.connector;
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ input.constructor.name ]);
	                          })())), OpticUI_Markup.attr("data-output")(_20.connector), OpticUI_Markup.attr("data-input")((function () {
	                              if (input instanceof Data_Maybe.Nothing) {
	                                  return "";
	                              };
	                              if (input instanceof Data_Maybe.Just) {
	                                  return input.value0.connector;
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ input.constructor.name ]);
	                          })()), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                              return function __do() {
	                                  Soundknot_Polyfill.preventDefault(e)();
	                                  if (i instanceof Data_Maybe.Nothing) {
	                                      return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)();
	                                  };
	                                  if (i instanceof Data_Maybe.Just) {
	                                      return (function () {
	                                          var edges = Data_Maybe.fromMaybe(project.edges)(Data_Array.deleteAt(i.value0)(project.edges));
	                                          return updateApplication((function () {
	                                              var _44 = {};
	                                              for (var _45 in _18) {
	                                                  if (_18.hasOwnProperty(_45)) {
	                                                      _44[_45] = _18[_45];
	                                                  };
	                                              };
	                                              _44.project = Soundknot_Historical.record(Soundknot_Types.eq_Project)(_18.project)((function () {
	                                                  var _42 = {};
	                                                  for (var _43 in project) {
	                                                      if (project.hasOwnProperty(_43)) {
	                                                          _42[_43] = project[_43];
	                                                      };
	                                                  };
	                                                  _42.edges = edges;
	                                                  return _42;
	                                              })());
	                                              _44.connecting = new Data_Maybe.Just({
	                                                  port: (project.edges[i.value0]).output, 
	                                                  mouse: Data_Maybe.Just.create(Soundknot_Utils.clientPosition(e))
	                                              });
	                                              _44.scrolling = Data_Maybe.Nothing.value;
	                                              return _44;
	                                          })());
	                                      })()();
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ i.constructor.name ]);
	                              };
	                          }) ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid));
	                      };
	                  };
	              };
	              var connectCurve = Data_Maybe.maybe([  ])(function (con) {
	                  return [ curve(Data_Maybe.Nothing.value)(con.port)(Data_Maybe.Nothing.value) ];
	              })(_18.connecting);
	              var allFrames = Data_Array.sortBy(function (_7) {
	                  return function (_6) {
	                      return Prelude.compare(Prelude.ordString)(_7.name)(_6.name);
	                  };
	              })(Data_Array.nubBy(function (_9) {
	                  return function (_8) {
	                      return Prelude["=="](Prelude.eqString)(_9.name)(_8.name);
	                  };
	              })(Prelude["++"](Prelude.semigroupArray)(project.nodes)(Data_Foldable.foldMap(Data_List.foldableList)(Data_Monoid.monoidArray)(function (_10) {
	                  return _10.nodes;
	              })(Prelude["++"](Data_List.semigroupList)(Data_List.take(2)(Soundknot_Historical.undoList(_18.project)))(Data_List.take(2)(Soundknot_Historical.redoList(_18.project)))))));
	              var lensProject = function (__dict_Strong_0) {
	                  return Data_Lens_Lens.lens(Prelude["const"](allFrames))(function (x) {
	                      return function (v) {
	                          return x;
	                      };
	                  })(__dict_Strong_0);
	              };
	              return OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.centerPane), OpticUI_Markup_HTML.onMouseDown(function (e) {
	                  if (_18.scrolling instanceof Data_Maybe.Nothing) {
	                      return updateApplication(Soundknot_Types.State((function () {
	                          var _53 = {};
	                          for (var _54 in _18) {
	                              if (_18.hasOwnProperty(_54)) {
	                                  _53[_54] = _18[_54];
	                              };
	                          };
	                          _53.scrolling = Data_Maybe.Just.create(Soundknot_Utils.clientPosition(e));
	                          return _53;
	                      })()));
	                  };
	                  if (_18.scrolling instanceof Data_Maybe.Just) {
	                      return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff);
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _18.scrolling.constructor.name ]);
	              }), OpticUI_Markup_HTML.onMouseMove(function (e) {
	                  if (_18.connecting instanceof Data_Maybe.Nothing) {
	                      if (_18.scrolling instanceof Data_Maybe.Nothing) {
	                          return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff);
	                      };
	                      if (_18.scrolling instanceof Data_Maybe.Just) {
	                          var t = $$Math.pow(Soundknot_Types.scaleBase)(Data_Int.toNumber(_18.scaleFactor));
	                          var delta = Soundknot_Linear["=-="](Soundknot_Utils.clientPosition(e))(_18.scrolling.value0);
	                          return function __do() {
	                              var _1 = (function () {
	                                  var _66 = {};
	                                  for (var _67 in _18) {
	                                      if (_18.hasOwnProperty(_67)) {
	                                          _66[_67] = _18[_67];
	                                      };
	                                  };
	                                  _66.project = Soundknot_Historical.overwrite(_18.project)((function () {
	                                      var _62 = {};
	                                      for (var _63 in project) {
	                                          if (project.hasOwnProperty(_63)) {
	                                              _62[_63] = project[_63];
	                                          };
	                                      };
	                                      _62.nodes = Prelude.map(Prelude.functorArray)(function (_12) {
	                                          if (_12.dragging) {
	                                              var _60 = {};
	                                              for (var _61 in _12) {
	                                                  if (_12.hasOwnProperty(_61)) {
	                                                      _60[_61] = _12[_61];
	                                                  };
	                                              };
	                                              _60.position = Soundknot_Linear["=+="](_12.position)(Soundknot_Linear[".*="](1.0 / t)(delta));
	                                              return _60;
	                                          };
	                                          if (!_12.dragging) {
	                                              return _12;
	                                          };
	                                          throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _12.dragging.constructor.name ]);
	                                      })(project.nodes);
	                                      return _62;
	                                  })());
	                                  _66.scrolling = Data_Maybe.Just.create(Soundknot_Utils.clientPosition(e));
	                                  _66.translation = (function () {
	                                      var _65 = Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function (_13) {
	                                          return _13.dragging;
	                                      })(project.nodes);
	                                      if (_65) {
	                                          return _18.translation;
	                                      };
	                                      if (!_65) {
	                                          return Soundknot_Linear["=+="](_18.translation)(delta);
	                                      };
	                                      throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _65.constructor.name ]);
	                                  })();
	                                  return _66;
	                              })();
	                              return updateApplication(_1)();
	                          };
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _18.scrolling.constructor.name ]);
	                  };
	                  if (_18.connecting instanceof Data_Maybe.Just) {
	                      return updateApplication(Soundknot_Types.State((function () {
	                          var _72 = {};
	                          for (var _73 in _18) {
	                              if (_18.hasOwnProperty(_73)) {
	                                  _72[_73] = _18[_73];
	                              };
	                          };
	                          _72.connecting = Data_Maybe.Just.create((function () {
	                              var _70 = {};
	                              for (var _71 in _18.connecting.value0) {
	                                  if (_18.connecting.value0.hasOwnProperty(_71)) {
	                                      _70[_71] = _18.connecting.value0[_71];
	                                  };
	                              };
	                              _70.mouse = Data_Maybe.Just.create(Soundknot_Utils.clientPosition(e));
	                              return _70;
	                          })());
	                          return _72;
	                      })()));
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _18.connecting.constructor.name ]);
	              }), OpticUI_Markup_HTML.onMouseUp(function (e) {
	                  return updateApplication((function () {
	                      var _80 = {};
	                      for (var _81 in _18) {
	                          if (_18.hasOwnProperty(_81)) {
	                              _80[_81] = _18[_81];
	                          };
	                      };
	                      _80.project = Soundknot_Historical.overwrite(_18.project)((function () {
	                          var _78 = {};
	                          for (var _79 in project) {
	                              if (project.hasOwnProperty(_79)) {
	                                  _78[_79] = project[_79];
	                              };
	                          };
	                          _78.nodes = Prelude.map(Prelude.functorArray)(function (_14) {
	                              var _76 = {};
	                              for (var _77 in _14) {
	                                  if (_14.hasOwnProperty(_77)) {
	                                      _76[_77] = _14[_77];
	                                  };
	                              };
	                              _76.dragging = false;
	                              return _76;
	                          })(project.nodes);
	                          return _78;
	                      })());
	                      _80.scrolling = Data_Maybe.Nothing.value;
	                      _80.connecting = Data_Maybe.Nothing.value;
	                      _80.appendingNode = Data_Maybe.Nothing.value;
	                      return _80;
	                  })());
	              }), OpticUI_Markup_HTML.onWheel(function (e) {
	                  var t = $$Math.pow(Soundknot_Types.scaleBase)(Data_Int.toNumber(_18.scaleFactor));
	                  var f$prime = Data_Ord.max(Prelude.ordInt)(Soundknot_Types.minScaleFactor)(Data_Ord.min(Prelude.ordInt)(Soundknot_Types.maxScaleFactor)(_18.scaleFactor + Data_Int.floor(Soundknot_Utils.signum(e.deltaY)) | 0));
	                  var s$prime = $$Math.pow(Soundknot_Types.scaleBase)(Data_Int.toNumber(f$prime));
	                  var center = Soundknot_Utils.getOffset(e);
	                  return updateApplication((function () {
	                      var _82 = {};
	                      for (var _83 in _18) {
	                          if (_18.hasOwnProperty(_83)) {
	                              _82[_83] = _18[_83];
	                          };
	                      };
	                      _82.scaleFactor = f$prime;
	                      _82.translation = Soundknot_Linear["=-="](center)(Soundknot_Linear[".*="](s$prime / t)(Soundknot_Linear["=-="](center)(_18.translation)));
	                      return _82;
	                  })());
	              }), OpticUI_Markup_HTML.onDragOver(function (e) {
	                  return function __do() {
	                      Soundknot_Polyfill.stopPropagation(e)();
	                      return Soundknot_Polyfill.preventDefault(e)();
	                  };
	              }), OpticUI_Markup_HTML.onDrop(function (e) {
	                  return function __do() {
	                      Soundknot_Polyfill.preventDefault(e)();
	                      Soundknot_Polyfill.stopPropagation(e)();
	                      var position = Soundknot_Types.screenToWorld(_18)(Soundknot_Utils.getOffset(e));
	                      (function () {
	                          if (_18.appendingNode instanceof Data_Maybe.Nothing) {
	                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                          };
	                          if (_18.appendingNode instanceof Data_Maybe.Just) {
	                              return function __do() {
	                                  var _3 = Soundknot_Utils.now();
	                                  var _2 = _18.appendingNode.value0();
	                                  return (function () {
	                                      var nodes = Prelude["++"](Prelude.semigroupArray)(project.nodes)([ {
	                                          name: Prelude.show(Prelude.showInt)(_3), 
	                                          position: position, 
	                                          props: _2, 
	                                          dragging: false, 
	                                          zIndex: maxIndex(_18) + 1 | 0
	                                      } ]);
	                                      return function __do() {
	                                          record((function () {
	                                              var _87 = {};
	                                              for (var _88 in project) {
	                                                  if (project.hasOwnProperty(_88)) {
	                                                      _87[_88] = project[_88];
	                                                  };
	                                              };
	                                              _87.nodes = nodes;
	                                              return _87;
	                                          })())();
	                                          if (_2 instanceof Soundknot_Types.MediaStreamFrame) {
	                                              return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Soundknot_Update.requestUserMedia(_18))();
	                                          };
	                                          return Prelude.unit;
	                                      };
	                                  })()();
	                              };
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _18.appendingNode.constructor.name ]);
	                      })()();
	                      var _91 = Data_Nullable.toMaybe(Soundknot_Utils.getAudioFile(e));
	                      if (_91 instanceof Data_Maybe.Nothing) {
	                          return Soundknot_Utils.nop(Control_Monad_Eff.applicativeEff)();
	                      };
	                      if (_91 instanceof Data_Maybe.Just) {
	                          return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
	                              var _5 = Soundknot_Utils.now();
	                              var _4 = TypedArray.createObjectURL(TypedArray.fileToBlob(_91.value0))();
	                              return updateApplication((function () {
	                                  var _96 = {};
	                                  for (var _97 in _18) {
	                                      if (_18.hasOwnProperty(_97)) {
	                                          _96[_97] = _18[_97];
	                                      };
	                                  };
	                                  _96.project = Soundknot_Historical.record(Soundknot_Types.eq_Project)(_18.project)((function () {
	                                      var _94 = {};
	                                      for (var _95 in project) {
	                                          if (project.hasOwnProperty(_95)) {
	                                              _94[_95] = project[_95];
	                                          };
	                                      };
	                                      _94.nodes = Prelude["++"](Prelude.semigroupArray)(project.nodes)([ {
	                                          name: Prelude.show(Prelude.showInt)(_5), 
	                                          position: position, 
	                                          props: new Soundknot_Types.VideoFrame(Data_Maybe.Just.create(new Soundknot_Types.FileSource(_91.value0, _4))), 
	                                          dragging: false, 
	                                          zIndex: maxIndex(_18) + 1 | 0
	                                      } ]);
	                                      return _94;
	                                  })());
	                                  return _96;
	                              })())();
	                          }))(function () {
	                              return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                          }))();
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Canvas line 35, column 1 - line 36, column 1: " + [ _91.constructor.name ]);
	                  };
	              }) ]))(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.ui(OpticUI_Markup_SVG.svg([ Soundknot_Classes["classA'"](Soundknot_Classes.svgCanvas), OpticUI_Markup.attr("xmlns")("http://www.w3.org/2000/svg") ])(OpticUI_Markup_SVG.g([ OpticUI_Markup_SVG.transformA(matrix) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(Prelude["++"](Prelude.semigroupArray)([ grid ])(Prelude["++"](Prelude.semigroupArray)(mapIndex(function (i) {
	                  return function (_15) {
	                      return curve(new Data_Maybe.Just(i))(_15.output)(new Data_Maybe.Just(_15.input));
	                  };
	              })(project.edges))(connectCurve)))))), OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.transformPane), OpticUI_Markup_HTML.styleA("transform: " + matrix) ]))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))(function (_17) {
	                  return OpticUI_Core.ui(Soundknot_UI_Node.createEditorNode(sampleRate)(_18)(updateApplication)(record)(Data_Array.findIndex(function (_16) {
	                      return Prelude["=="](Prelude.eqString)(_17.name)(_16.name);
	                  })(project.nodes))(_17));
	              })(allFrames)) ]));
	          };
	      };
	  };
	  exports["appCanvas"] = appCanvas;;
	 
	})(PS["Soundknot.UI.Canvas"] = PS["Soundknot.UI.Canvas"] || {});
	(function(exports) {
	  // module Soundknot.Persistence



	  "use strict";

	  var databaseName = "soundknot-projects";
	  var storeName = "projects";
	  var dbVersion = 6;

	  var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;  

	  function upgradeDetabase(db){
	      if(db.objectStoreNames.contains(storeName)){
	          db.deleteObjectStore(storeName);
	      }
	      var projectStore = db.createObjectStore(storeName, { keyPath: "id" });
	      projectStore.createIndex("id", "id", { unique: true });
	  }

	  exports._getProjectNames = function(reject){
	      return function(resolve){
	          return function(){
	              var request = indexedDB.open(databaseName, dbVersion);
	              request.onsuccess = function(event) {
	                  var db = request.result;
	                  db.onerror = function(e){
	                      reject(e)();
	                  };
	                  var transaction = db.transaction([storeName], "readwrite");
	                  transaction.onerror = function(err){
	                      reject(err)();
	                  };
	                  var names = [];
	                  var store = transaction.objectStore(storeName);
	                  var req = store.index('id').openCursor();
	                  req.onsuccess = function(e){
	                      var cursor = req.result;
	                      if(cursor){
	                          names.push(cursor.value.id);
	                          cursor.continue();
	                      }else{
	                          resolve(names)();
	                      }
	                  };
	              };
	              request.onupgradeneeded = function(e) {
	                  upgradeDetabase(request.result);
	              };
	          }
	      }
	  }

	  exports._saveProject = function(title){
	      return function(projectdata) {
	          return function(reject){
	              return function(resolve){
	                  return function() {

	                      var now = new Date();
	                      projectdata.id = title + "///" + now.toLocaleString();
	                    

	                      var request = indexedDB.open(databaseName, dbVersion);
	                      request.onerror = function(err){
	                          reject(err)();
	                      };
	                      request.onsuccess = function(event) {
	                          var db = request.result;
	                          db.onerror = function(event) {
	                              console.log("Error creating/accessing IndexedDB database: " + event.toString());
	                              reject(event)();
	                          };
	                          var transaction = db.transaction([storeName], "readwrite");
	                          var store = transaction.objectStore(storeName);
	                          var put = store.put(projectdata);
	                          put.onsuccess = function(){
	                              resolve(projectdata.id)();
	                          }
	                      };
	                      request.onupgradeneeded = function(e) {
	                          //debugger;
	                          upgradeDetabase(request.result);
	                      };
	                  }
	              }
	          }
	      }
	  }

	  exports._loadProject = function(name){
	      return function(reject){
	          return function(resolve){
	              return function() {
	                  var request = indexedDB.open(databaseName, dbVersion);
	                  request.onerror = function(err){
	                      reject(err)();
	                  };
	                  request.onsuccess = function(event) {
	                      var db = request.result;
	                      db.onerror = function(event) {
	                          console.log("Error creating/accessing IndexedDB database: " + event.toSting());
	                          reject(event)();
	                      };
	                      var transaction = db.transaction([storeName], "readonly");
	                      var store = transaction.objectStore(storeName);
	                      var get = store.get(name);
	                      get.onsuccess = function(e){
	                          resolve(e.target.result)();
	                      };
	                      get.onerror = function(e){
	                          reject(e)();
	                      }
	                  };
	                  request.onupgradeneeded = function(event) {
	                      //debugger;
	                      upgradeDetabase(request.result);
	                  };
	              }
	          }
	      }
	  }


	  exports._deleteProject =  function(name){
	      return function(reject){
	          return function(resolve){
	              return function() {
	                  var request = indexedDB.open(databaseName, dbVersion);
	                  request.onsuccess = function(event) {
	                      var db = request.result;
	                      db.onerror = function(event) {
	                          console.log("Error creating/accessing IndexedDB database: " + event.toSting());
	                      };
	                      var transaction = db.transaction([storeName], "readwrite");
	                      var store = transaction.objectStore(storeName);
	                      store.delete(name);
	                      resolve({})();
	                  };
	                  request.onupgradeneeded = function(e) {
	                      upgradeDetabase(request.result);
	                  };
	              }
	          }
	      }
	  }


	 
	})(PS["Soundknot.Persistence"] = PS["Soundknot.Persistence"] || {});
	(function(exports) {
	   

	  exports.createObjectURL = function(blob){
	      return URL.createObjectURL(blob);
	  }
	})(PS["Soundknot.Serialize"] = PS["Soundknot.Serialize"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Selector = PS["CSS.Selector"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Geometry = PS["CSS.Geometry"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_Background = PS["CSS.Background"];
	  var CSS_Border = PS["CSS.Border"];
	  var CSS_Transform = PS["CSS.Transform"];
	  var CSS_Display = PS["CSS.Display"];
	  var CSS_Font = PS["CSS.Font"];
	  var CSS_Property = PS["CSS.Property"];
	  var Soundknot_UI_Timeline_Styles = PS["Soundknot.UI.Timeline.Styles"];
	  var Unsafe_Coerce = PS["Unsafe.Coerce"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_String = PS["Data.String"];
	  var Control_Monad = PS["Control.Monad"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Css = PS["Soundknot.Css"];
	  var CSS = PS["CSS"];
	  var CSS_Render = PS["CSS.Render"];     
	  var $at = function (p) {
	      return function (v) {
	          return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)(p))(v);
	      };
	  };
	  var selectedElementColor = CSS_Color.rgba(169)(169)(242)(Unsafe_Coerce.unsafeCoerce(0.3));
	  var s6B6BB6 = CSS_Color.rgb(107)(107)(182);
	  var matrix = function (a) {
	      return function (b) {
	          return function (c) {
	              return function (d) {
	                  return function (e) {
	                      return function (f) {
	                          return CSS_Transform.Transformation(CSS_Property.value(CSS_Property.valString)("matrix(" + (Data_String.joinWith(",")(Prelude.map(Prelude.functorArray)(Prelude.show(Prelude.showNumber))([ a, b, c, d, e, f ])) + ")")));
	                      };
	                  };
	              };
	          };
	      };
	  };
	  var dBD999 = CSS_Color.rgb(219)(217)(153);
	  var clazz = function (_0) {
	      return CSS_Selector.element("." + _0);
	  };
	  var c5c393 = CSS_Color.rgb(197)(195)(147);
	  var b66B6B = CSS_Color.rgb(182)(107)(107);
	  var css = function (transition) {
	      return function (projectListVisible) {
	          return Data_Maybe.fromMaybe("***ERROR***")(CSS_Render.renderedSheet(CSS_Render.render(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.btn))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(4.0))(CSS_Size.px(24.0))(CSS_Size.px(4.0))(CSS_Size.px(24.0)))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0)))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("text-align"))("center"))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("transition-property"))("opacity"))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("transition-duration"))("0.3s"))(function () {
	                              return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("opacity"))("1.0");
	                          });
	                      });
	                  });
	              });
	          })))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".icon.button"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0)))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(4.0))(CSS_Size.px(8.0)))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(new CSS_Color.Rgba(200, 200, 200, 1)))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0)))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("box-sizing"))("border-box"))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(36.0)))(function () {
	                                      return CSS_Geometry.height(CSS_Size.px(36.0));
	                                  });
	                              });
	                          });
	                      });
	                  });
	              })))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".icon.button:hover"))(CSS_Transform.transform(matrix(1.1)(0.0)(0.0)(1.1)(0.0)(0.0))))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".icon.button:active"))(CSS_Transform.transform(matrix(1.0)(0.0)(0.0)(1.0)(0.0)(0.0))))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("html, body, body > div"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-webkit-font-smoothing"))("antialiased"))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-moz-osx-font-smoothing"))("grayscale"))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("text-rendering"))("optimizeLegibility"))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("flex-direction"))("column"))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.pct(100.0)))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.pct(100.0)))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("overflow"))("hidden"))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0)))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0)))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("user-select"))("none"))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-moz-user-select"))("none"))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-webkit-user-select"))("none"))(function () {
	                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-ms-user-select"))("none"))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("cursor"))("default"))(function () {
	                                                                                      return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("position"))("absolute");
	                                                                                  });
	                                                                              });
	                                                                          });
	                                                                      });
	                                                                  });
	                                                              });
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  });
	                              });
	                          })))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_Selector["##"](CSS_Selector.element("input"))([ new CSS_Selector.AttrVal("type", "number") ]))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.em(5.0)))(function () {
	                                  return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("font-family"))("monospace");
	                              })))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_Selector["##"](CSS_Selector.element("input"))([ new CSS_Selector.AttrVal("type", "range") ]))(CSS_Geometry.width(CSS_Size.px(120.0))))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.groundLayer))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.pct(100.0)))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.pct(100.0)))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.left(CSS_Size.pct(0.0)))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.right(CSS_Size.pct(0.0)))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("-webkit-filter"))((function () {
	                                                              if (projectListVisible) {
	                                                                  return "blur(4px)";
	                                                              };
	                                                              if (!projectListVisible) {
	                                                                  return "none";
	                                                              };
	                                                              throw new Error("Failed pattern match at Soundknot.Styles line 39, column 1 - line 40, column 1: " + [ projectListVisible.constructor.name ]);
	                                                          })()))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                  return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("flex-direction"))("column");
	                                                              });
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      })))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".radialGrad"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.pct(100.0)))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.pct(100.0)))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.left(CSS_Size.px(0.0)))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.top(CSS_Size.px(0.0)))(function () {
	                                                              return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("pointer-events"))("none");
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          })))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.bottomPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("flex-grow"))("1.0"))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                      return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("flex-direction"))("row");
	                                                  });
	                                              })))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.leftPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0)))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                          return Soundknot_Css.flexDirection(Soundknot_Css.column);
	                                                      });
	                                                  })))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".leftPane .btn:hover"))(CSS_Transform.transform(matrix(1.0)(0.0)(0.0)(1.0)(0.0)(-2.0))))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.centerPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.flexGrow(1.0))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.overflow(Soundknot_Css.hidden))(function () {
	                                                                  return CSS_Display.position(CSS_Display.relative);
	                                                              });
	                                                          })))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.svgCanvas))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.pct(100.0)))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.pct(100.0)))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.left(CSS_Size.px(0.0)))(function () {
	                                                                              return CSS_Geometry.top(CSS_Size.px(0.0));
	                                                                          });
	                                                                      });
	                                                                  });
	                                                              })))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.transformPane))($at("transform-origin")("0 0")))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".topMenu > .btn"))(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("margin-right"))("12px")))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".disabled"))(CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("opacity"))("0.4")))(function () {
	                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.topMenu))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0)))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                      return $at("flex-shrink")("0");
	                                                                                  });
	                                                                              })))(function () {
	                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".topMenu .btn"))(CSS_Geometry.width(CSS_Size.px(120.0))))(function () {
	                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".topMenu .btn:hover"))(CSS_Transform.transform(matrix(1.05)(0.0)(0.0)(1.05)(0.0)(0.0))))(function () {
	                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".topMenu .btn:active"))(CSS_Transform.transform(matrix(0.95)(0.0)(0.0)(0.95)(0.0)(0.0))))(function () {
	                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("fill")("none"))(function () {
	                                                                                                  return $at("stroke-width")("6");
	                                                                                              })))(function () {
	                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectName))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.right(CSS_Size.px(0.0)))(function () {
	                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.bottom(CSS_Size.px(0.0)))(function () {
	                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_Color.white))(function () {
	                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0)))(function () {
	                                                                                                                      return $at("text-shadow")("0px 0px 8px black");
	                                                                                                                  });
	                                                                                                              });
	                                                                                                          });
	                                                                                                      });
	                                                                                                  })))(function () {
	                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".glyphicon"))(CSS_Geometry.margin(CSS_Size.px(4.0))(CSS_Size.px(0.0))(CSS_Size.px(4.0))(CSS_Size.px(0.0))))(function () {
	                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("line.grid"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("fill")("none"))(function () {
	                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("stroke")("rgba(255, 255, 255, 0.4)"))(function () {
	                                                                                                                  return $at("strokeWidth")("0.5");
	                                                                                                              });
	                                                                                                          })))(function () {
	                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.wiringFrame))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                                                                  return Control_Monad.when(CSS_Stylesheet.monadStyleM)(transition)(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-property")("left, top, opacity"))(function () {
	                                                                                                                      return $at("transition-duration")("0.3s");
	                                                                                                                  }));
	                                                                                                              })))(function () {
	                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.clippingPane))(Soundknot_Css.overflow(Soundknot_Css.hidden)))(function () {
	                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.titleBar))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(5.0))(CSS_Size.px(5.0))(CSS_Size.px(5.0))(CSS_Size.px(5.0)))(function () {
	                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("text-align")("center"))(function () {
	                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                                                                  return $at("align-items")("center");
	                                                                                                                              });
	                                                                                                                          });
	                                                                                                                      })))(function () {
	                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.titleText))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.flexGrow(1.0))(function () {
	                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("white-space")("nowrap"))(function () {
	                                                                                                                                  return $at("font-size")("small");
	                                                                                                                              });
	                                                                                                                          })))(function () {
	                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.closeButton))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("opacity")("0.3"))(function () {
	                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.relative))(function () {
	                                                                                                                                      return CSS_Geometry.top(CSS_Size.px(1.0));
	                                                                                                                                  });
	                                                                                                                              })))(function () {
	                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".closeButton:hover"))($at("opacity")("1.0")))(function () {
	                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.nodeContentPane))(CSS_Geometry.padding(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0))))(function () {
	                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.connector))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(16.0)))(function () {
	                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.px(16.0)))(function () {
	                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.left(CSS_Size.px(-8.0)))(function () {
	                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.top(CSS_Size.px(64.0)))(function () {
	                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0))(CSS_Size.px(16.0)))(function () {
	                                                                                                                                                                  return CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.rgb(197)(195)(147));
	                                                                                                                                                              });
	                                                                                                                                                          });
	                                                                                                                                                      });
	                                                                                                                                                  });
	                                                                                                                                              });
	                                                                                                                                          })))(function () {
	                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.inputConnector))(CSS_Geometry.left(CSS_Size.px(-8.0))))(function () {
	                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.outputConnector))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("calc(100% - 8px)"))(function () {
	                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-property")("transform"))(function () {
	                                                                                                                                                          return $at("transition-duration")("0.3s");
	                                                                                                                                                      });
	                                                                                                                                                  })))(function () {
	                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".outputConnector:hover"))(CSS_Transform.transform(CSS_Transform.Transformation(CSS_Property.value(CSS_Property.valString)("matrix(1.4, 0, 0, 1.4, 0, 0)")))))(function () {
	                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("[data-type=audio]"))(CSS_Background.backgroundColor(dBD999)))(function () {
	                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("[data-type=buffer]"))(CSS_Background.backgroundColor(b66B6B)))(function () {
	                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("[data-type=midi]"))(CSS_Background.backgroundColor(s6B6BB6)))(function () {
	                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.viewFrameMenuBar))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(8.0)))(function () {
	                                                                                                                                                                              return Soundknot_Css.alignItems(Unsafe_Coerce.unsafeCoerce(Soundknot_Css.center));
	                                                                                                                                                                          });
	                                                                                                                                                                      })))(function () {
	                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".fileName"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(10.0)))(function () {
	                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.flexGrow(1.0))(function () {
	                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("text-overflow")("ellipsis"))(function () {
	                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("overflow")("hidden"))(function () {
	                                                                                                                                                                                          return $at("white-space")("nowrap");
	                                                                                                                                                                                      });
	                                                                                                                                                                                  });
	                                                                                                                                                                              });
	                                                                                                                                                                          })))(function () {
	                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("video"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("resize")("both"))(function () {
	                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.overflow(Soundknot_Css.hidden))(function () {
	                                                                                                                                                                                      return $at("width")("400px");
	                                                                                                                                                                                  });
	                                                                                                                                                                              })))(function () {
	                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectListBackground))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("top")("0px"))(function () {
	                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("0px"))(function () {
	                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("100%"))(function () {
	                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.rgba(0)(0)(0)(Unsafe_Coerce.unsafeCoerce(0.8))))(function () {
	                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.alignItems(Unsafe_Coerce.unsafeCoerce(Soundknot_Css.center)))(function () {
	                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.justifyContent(Soundknot_Css.center))(function () {
	                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.flexDirection(Soundknot_Css.column))(function () {
	                                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-property")("opacity"))(function () {
	                                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-duration")("0.3s"))(function () {
	                                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("opacity")((function () {
	                                                                                                                                                                                                                                      if (projectListVisible) {
	                                                                                                                                                                                                                                          return "1.0";
	                                                                                                                                                                                                                                      };
	                                                                                                                                                                                                                                      if (!projectListVisible) {
	                                                                                                                                                                                                                                          return "0.0";
	                                                                                                                                                                                                                                      };
	                                                                                                                                                                                                                                      throw new Error("Failed pattern match at Soundknot.Styles line 39, column 1 - line 40, column 1: " + [ projectListVisible.constructor.name ]);
	                                                                                                                                                                                                                                  })()))(function () {
	                                                                                                                                                                                                                                      return $at("pointer-events")((function () {
	                                                                                                                                                                                                                                          if (projectListVisible) {
	                                                                                                                                                                                                                                              return "auto";
	                                                                                                                                                                                                                                          };
	                                                                                                                                                                                                                                          if (!projectListVisible) {
	                                                                                                                                                                                                                                              return "none";
	                                                                                                                                                                                                                                          };
	                                                                                                                                                                                                                                          throw new Error("Failed pattern match at Soundknot.Styles line 39, column 1 - line 40, column 1: " + [ projectListVisible.constructor.name ]);
	                                                                                                                                                                                                                                      })());
	                                                                                                                                                                                                                                  });
	                                                                                                                                                                                                                              });
	                                                                                                                                                                                                                          });
	                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                  });
	                                                                                                                                                                                                              });
	                                                                                                                                                                                                          });
	                                                                                                                                                                                                      });
	                                                                                                                                                                                                  });
	                                                                                                                                                                                              });
	                                                                                                                                                                                          });
	                                                                                                                                                                                      });
	                                                                                                                                                                                  })))(function () {
	                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectList))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("640px"))(function () {
	                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("360px"))(function () {
	                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.overflowY(Soundknot_Css.scroll))(function () {
	                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(c5c393))(function () {
	                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("flex-direction")("column"))(function () {
	                                                                                                                                                                                                          return CSS_Display.position(CSS_Display.relative);
	                                                                                                                                                                                                      });
	                                                                                                                                                                                                  });
	                                                                                                                                                                                              });
	                                                                                                                                                                                          });
	                                                                                                                                                                                      })))(function () {
	                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectEntry))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("margin")("8px"))(function () {
	                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.flex))(function () {
	                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.justifyContent(Soundknot_Css.center))(function () {
	                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.alignItems(Unsafe_Coerce.unsafeCoerce(Soundknot_Css.center)))(function () {
	                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.alignSelf(Unsafe_Coerce.unsafeCoerce(Soundknot_Css.center)))(function () {
	                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(c5c393))(function () {
	                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("padding")("8px"))(function () {
	                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition")("top"))(function () {
	                                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("transition-duration")("0.3s"))(function () {
	                                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.absolute))(function () {
	                                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("22px"))(function () {
	                                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("left")("0px"))(function () {
	                                                                                                                                                                                                                                          return $at("right")("0px");
	                                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                                  });
	                                                                                                                                                                                                                              });
	                                                                                                                                                                                                                          });
	                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                  });
	                                                                                                                                                                                                              });
	                                                                                                                                                                                                          });
	                                                                                                                                                                                                      });
	                                                                                                                                                                                                  });
	                                                                                                                                                                                              });
	                                                                                                                                                                                          })))(function () {
	                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".projectEntry.selected"))(CSS_Background.backgroundColor(selectedElementColor)))(function () {
	                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".projectEntry:hover"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Transform.transform(matrix(1.0)(0.0)(0.0)(1.0)(0.0)(-2.0)))(function () {
	                                                                                                                                                                                                      return Soundknot_Css.boxShadow("0px 4px 16px 4px rgba(0, 0, 0, 0.2)");
	                                                                                                                                                                                                  })))(function () {
	                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectEntryLabel))(CSS_Font.color(c5c393)))(function () {
	                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectOpenButtonList))(CSS_Display.display(CSS_Display.flex)))(function () {
	                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](clazz(Soundknot_Classes.projectOpenButton))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(c5c393))(function () {
	                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(c5c393))(function () {
	                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("min-width")("60px"))(function () {
	                                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.textAlign(Unsafe_Coerce.unsafeCoerce(Soundknot_Css.center)))(function () {
	                                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("padding")("4px 48px 4px 48px"))(function () {
	                                                                                                                                                                                                                                  return $at("margin")("20px 20px 20px 20px");
	                                                                                                                                                                                                                              });
	                                                                                                                                                                                                                          });
	                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                  });
	                                                                                                                                                                                                              })))(function () {
	                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".projectOpenButton:hover"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Transform.transform(matrix(1.1)(0.0)(0.0)(1.1)(0.0)(0.0)))(function () {
	                                                                                                                                                                                                                      return CSS_Background.backgroundColor(CSS_Color.rgba(255)(255)(255)(Unsafe_Coerce.unsafeCoerce(0.2)));
	                                                                                                                                                                                                                  })))(function () {
	                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".projectOpenButton:active"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Transform.transform(matrix(1.05)(0.0)(0.0)(1.05)(0.0)(0.0)))(function () {
	                                                                                                                                                                                                                          return CSS_Background.backgroundColor(CSS_Color.rgba(255)(255)(255)(Unsafe_Coerce.unsafeCoerce(0.2)));
	                                                                                                                                                                                                                      })))(function () {
	                                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("tr"))($at("margin")("4px")))(function () {
	                                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".keyboard"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("40px"))(function () {
	                                                                                                                                                                                                                                  return $at("border-right")("solid 1px rgba(0, 0, 0, 0.4)");
	                                                                                                                                                                                                                              })))(function () {
	                                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".keyboard > .key"))(Prelude.bind(CSS_Stylesheet.bindStyleM)($at("float")("left"))(function () {
	                                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("width")("8px"))(function () {
	                                                                                                                                                                                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("height")("100%"))(function () {
	                                                                                                                                                                                                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("border")("solid 1px rgba(0, 0, 0, 0.4)"))(function () {
	                                                                                                                                                                                                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)($at("border-right")("none"))(function () {
	                                                                                                                                                                                                                                                      return $at("box-sizing")("border-box");
	                                                                                                                                                                                                                                                  });
	                                                                                                                                                                                                                                              });
	                                                                                                                                                                                                                                          });
	                                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                                  })))(function () {
	                                                                                                                                                                                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".keyboard > .whiteKey"))($at("background-color")("white")))(function () {
	                                                                                                                                                                                                                                          return Soundknot_UI_Timeline_Styles.css(transition)(projectListVisible);
	                                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                                  });
	                                                                                                                                                                                                                              });
	                                                                                                                                                                                                                          });
	                                                                                                                                                                                                                      });
	                                                                                                                                                                                                                  });
	                                                                                                                                                                                                              });
	                                                                                                                                                                                                          });
	                                                                                                                                                                                                      });
	                                                                                                                                                                                                  });
	                                                                                                                                                                                              });
	                                                                                                                                                                                          });
	                                                                                                                                                                                      });
	                                                                                                                                                                                  });
	                                                                                                                                                                              });
	                                                                                                                                                                          });
	                                                                                                                                                                      });
	                                                                                                                                                                  });
	                                                                                                                                                              });
	                                                                                                                                                          });
	                                                                                                                                                      });
	                                                                                                                                                  });
	                                                                                                                                              });
	                                                                                                                                          });
	                                                                                                                                      });
	                                                                                                                                  });
	                                                                                                                              });
	                                                                                                                          });
	                                                                                                                      });
	                                                                                                                  });
	                                                                                                              });
	                                                                                                          });
	                                                                                                      });
	                                                                                                  });
	                                                                                              });
	                                                                                          });
	                                                                                      });
	                                                                                  });
	                                                                              });
	                                                                          });
	                                                                      });
	                                                                  });
	                                                              });
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          }))));
	      };
	  };
	  exports["clazz"] = clazz;
	  exports["@"] = $at;
	  exports["css"] = css;;
	 
	})(PS["Soundknot.Styles"] = PS["Soundknot.Styles"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_String = PS["CSS.String"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_Background = PS["CSS.Background"];
	  var CSS_Border = PS["CSS.Border"];
	  var CSS_Size = PS["CSS.Size"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Font = PS["CSS.Font"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Css = PS["Soundknot.Css"];
	  var Soundknot_Styles = PS["Soundknot.Styles"];
	  var CSS = PS["CSS"];
	  var CSS_Render = PS["CSS.Render"];
	  var CSS_Selector = PS["CSS.Selector"];     
	  var menuBackgroundColor = CSS_String.fromString(CSS_Color.isStringColor)("#4F5956");
	  var c5C393 = CSS_String.fromString(CSS_Color.isStringColor)("#C5C393");
	  var retro = Data_Maybe.fromMaybe("***ERROR***")(CSS_Render.renderedSheet(CSS_Render.render(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("html, body, body > div"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#373F3D")))(function () {
	      return Soundknot_Styles["@"]("font-family")("'Rosarivo', serif");
	  })))(function () {
	      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("input:focus"))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_String.fromString(CSS_Color.isStringColor)("#7BFFA4"))))(function () {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.topMenu))(CSS_Background.backgroundColor(menuBackgroundColor)))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.leftPane))(CSS_Background.backgroundColor(menuBackgroundColor)))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".leftPane .btn:hover"))(Soundknot_Styles["@"]("box-shadow")("0px 8px 1px 1px rgba(0,0,0,0.3);")))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.centerPane))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey)))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.clippingPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey))(function () {
	                              return CSS_Background.backgroundColor(CSS_Color.white);
	                          })))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.btn))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0)))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#F8FBE2")))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_String.fromString(CSS_Color.isStringColor)("#38312D")))(function () {
	                                          return Soundknot_Styles["@"]("box-shadow")("0px 0px 8px rgba(0, 0, 0, 0.5)");
	                                      });
	                                  });
	                              })))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("select, option"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0))(CSS_Size.px(4.0)))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#F8FBE2")))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_String.fromString(CSS_Color.isStringColor)("#38312D")))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-family")("'Rosarivo', serif"))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-size")("medium"))(function () {
	                                                      return Soundknot_Css.textAlign(Soundknot_Css.center);
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  })))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".radialGrad"))(Soundknot_Styles["@"]("background")("-webkit-gradient(radial, center center, 400, center center, 1000, from(rgba(0, 0, 0, 0.0)), to(rgba(0, 0, 0, 0.35)))")))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.titleBar))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("letter-spacing")("0.1em"))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("text-shadow")("1px 1px 3px rgba(0, 0, 0, 0.5)"))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#4B5662")))(function () {
	                                                      return CSS_Font.color(CSS_String.fromString(CSS_Color.isStringColor)("#F9FDBC"));
	                                                  });
	                                              });
	                                          })))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".titleBar:hover"))(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#647281"))))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.centerPane))(Soundknot_Styles["@"]("box-shadow")("10px 10px 30px 10px rgba(0,0,0,0.3) inset;")))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.clippingPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#FAFAFA")))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("box-shadow")("8px 8px 16px 8px rgba(0, 0, 0, 0.2);"))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0))(CSS_Size.px(8.0)))(function () {
	                                                                  return CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(c5C393);
	                                                              });
	                                                          });
	                                                      })))(function () {
	                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection"))(Soundknot_Styles["@"]("stroke")("#848242")))(function () {
	                                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection:hover"))(Soundknot_Styles["@"]("stroke")("#B3B168")))(function () {
	                                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.timeDomain"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("fill")("none"))(function () {
	                                                                      return Soundknot_Styles["@"]("stroke")("#848242");
	                                                                  })))(function () {
	                                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".timeline"))(Soundknot_Styles["@"]("box-shadow")("4px 4px 20px 4px rgba(0, 0, 0, 0.2) inset")))(function () {
	                                                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".timeline .cursor"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("box-shadow")("1px 1px 8px 1px rgba(0, 0, 0, 0.4)"))(function () {
	                                                                              return Prelude.pure(CSS_Stylesheet.applicativeStyleM)(Prelude.unit);
	                                                                          })))(function () {
	                                                                              return CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("svg.waveform"))(Soundknot_Styles["@"]("box-shadow")("2px 2px 12px 4px rgba(0, 0, 0, 0.2)"));
	                                                                          });
	                                                                      });
	                                                                  });
	                                                              });
	                                                          });
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      });
	  }))));
	  exports["retro"] = retro;;
	 
	})(PS["Soundknot.Styles.Retro"] = PS["Soundknot.Styles.Retro"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Serialize"];
	  var WebAudio_Gain = PS["WebAudio.Gain"];
	  var WebAudio_Delay = PS["WebAudio.Delay"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var WebAudio_Compressor = PS["WebAudio.Compressor"];
	  var WebAudio_Oscillator = PS["WebAudio.Oscillator"];
	  var Soundknot_UI_Timeline_Types = PS["Soundknot.UI.Timeline.Types"];
	  var Soundknot_Styles_Retro = PS["Soundknot.Styles.Retro"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];
	  var Data_Foreign_Null = PS["Data.Foreign.Null"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Control_Alt = PS["Control.Alt"];
	  var DOM_File_Types = PS["DOM.File.Types"];
	  var WebAudio = PS["WebAudio"];
	  var WebAudio_BiquadFilter = PS["WebAudio.BiquadFilter"];
	  var TypedArray = PS["TypedArray"];
	  var OpticUI = PS["OpticUI"];
	  var Soundknot_Linear = PS["Soundknot.Linear"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Data_Foreign_Index = PS["Data.Foreign.Index"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
	  var serialize = function (_24) {
	      var serializeProps = function (props) {
	          if (props instanceof Soundknot_Types.DestinationFrame) {
	              return WebAudio_Gain.writeGainParams(props.value0);
	          };
	          if (props instanceof Soundknot_Types.GainFrame) {
	              return WebAudio_Gain.writeGainParams(props.value0);
	          };
	          if (props instanceof Soundknot_Types.DelayFrame) {
	              return WebAudio_Delay.writeDelayParams(props.value0);
	          };
	          if (props instanceof Soundknot_Types.AudioBufferFrame) {
	              return Data_Foreign.toForeign({
	                  file: Data_Nullable.toNullable(props.value0.file)
	              });
	          };
	          if (props instanceof Soundknot_Types.VideoFrame && props.value0 instanceof Data_Maybe.Nothing) {
	              return Data_Foreign.toForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
	          };
	          if (props instanceof Soundknot_Types.VideoFrame && (props.value0 instanceof Data_Maybe.Just && props.value0.value0 instanceof Soundknot_Types.FileSource)) {
	              return Data_Foreign.toForeign(props.value0.value0.value0);
	          };
	          if (props instanceof Soundknot_Types.VideoFrame && (props.value0 instanceof Data_Maybe.Just && props.value0.value0 instanceof Soundknot_Types.URLMediaSource)) {
	              return Data_Foreign.toForeign(props.value0.value0.value0);
	          };
	          if (props instanceof Soundknot_Types.StereoPannerFrame) {
	              return Data_Foreign.toForeign({
	                  pan: WebAudio_Core.audioParamsToForeign(props.value0.pan)
	              });
	          };
	          if (props instanceof Soundknot_Types.ConvolverFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.AnalyserFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.ChannelSplitterFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.ChannelMergerFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.DynamicsCompressorFrame) {
	              return WebAudio_Compressor.writeDynamicsCompressorParams(props.value0);
	          };
	          if (props instanceof Soundknot_Types.BiquadFilterFrame) {
	              return WebAudio_BiquadFilter.biquadFilterParamsToForeign(props.value0);
	          };
	          if (props instanceof Soundknot_Types.WaveShaperFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.OscillatorFrame) {
	              return Data_Foreign.toForeign(WebAudio_Oscillator.oscillatorParamsToForeign(props.value0));
	          };
	          if (props instanceof Soundknot_Types.MediaStreamFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.TimelineFrame) {
	              return Data_Foreign.toForeign(props.value0);
	          };
	          if (props instanceof Soundknot_Types.InstrumentFrame) {
	              return Data_Foreign.toForeign(props.value0.instrument);
	          };
	          if (props instanceof Soundknot_Types.KeyboardFrame) {
	              return Data_Foreign.toForeign(props.value0.instrument);
	          };
	          if (props instanceof Soundknot_Types.MidiInputFrame) {
	              return Data_Foreign.toForeign(props.value0.port);
	          };
	          if (props instanceof Soundknot_Types.WebMidiLinkFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          if (props instanceof Soundknot_Types.PitchDetectFrame) {
	              return Data_Foreign.toForeign({});
	          };
	          throw new Error("Failed pattern match at Soundknot.Serialize line 42, column 5 - line 44, column 5: " + [ props.constructor.name ]);
	      };
	      var serializeNode = function (_25) {
	          return {
	              name: _25.name, 
	              position: _25.position, 
	              type: Soundknot_Types.frameTypeToTitle(_25.props), 
	              props: serializeProps(_25.props), 
	              zIndex: _25.zIndex
	          };
	      };
	      var project = (function () {
	          var _51 = Soundknot_Historical.runHistorical(_24.project);
	          return _51;
	      })();
	      return Data_Foreign.toForeign({
	          projectName: _24.projectName, 
	          nodes: Prelude.map(Prelude.functorArray)(serializeNode)(project.nodes), 
	          edges: project.edges, 
	          scaleFactor: _24.scaleFactor, 
	          translation: _24.translation, 
	          audioFiles: _24.audioFiles
	      });
	  };
	  var readStrMap = Data_Foreign.unsafeReadTagged("Object");
	  var readStereoPannerParams = function (props) {
	      return Prelude["<#>"](Data_Either.functorEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("pan")(props))(WebAudio_Core.readAudioParams))(function (_4) {
	          return {
	              pan: _4
	          };
	      });
	  };
	  var readFile = Data_Foreign.unsafeReadTagged("File");
	  var readVideoElement = function (props) {
	      return Control_Alt["<|>"](Data_Either.altEither)(Control_Alt["<|>"](Data_Either.altEither)(Prelude["<$>"](Data_Either.functorEither)(Prelude["<$>"](Prelude.functorFn)(Data_Maybe.Just.create)(Soundknot_Types.URLMediaSource.create))(Data_Foreign.readString(props)))(Prelude[">>="](Data_Either.bindEither)(readFile(props))(function (file) {
	          return Data_Either.Right.create(Data_Maybe.Just.create(new Soundknot_Types.FileSource(file, $foreign.createObjectURL(TypedArray.fileToBlob(file)))));
	      })))(new Data_Either.Right(Data_Maybe.Nothing.value));
	  };                                                   
	  var readAudioBufferParams = function (props) {
	      return Prelude["<#>"](Data_Either.functorEither)(Prelude["<#>"](Data_Either.functorEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("file")(props))(Data_Foreign_Null.readNull(readFile)))(Data_Foreign_Null.runNull))(function (_3) {
	          return {
	              file: _3
	          };
	      });
	  };
	  var deserialize = function (value) {
	      var deserializeVector2 = function (value_1) {
	          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("x")(value_1))(function (_6) {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("y")(value_1))(function (_5) {
	                  return Prelude.pure(Data_Either.applicativeEither)({
	                      x: _6, 
	                      y: _5
	                  });
	              });
	          });
	      };
	      var deserializePort = function (value_1) {
	          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("node")(value_1))(function (_10) {
	              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("connector")(value_1))(function (_9) {
	                  return Prelude.pure(Data_Either.applicativeEither)({
	                      node: _10, 
	                      connector: _9
	                  });
	              });
	          });
	      };
	      var deserializeNode = function (value_1) {
	          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("name")(value_1))(function (_16) {
	              return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("position")(value_1))(deserializeVector2))(function (_15) {
	                  return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("props")(value_1))(function (_14) {
	                      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("type")(value_1))(function (_13) {
	                          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("zIndex")(value_1))(function (_12) {
	                              return Prelude.bind(Data_Either.bindEither)((function () {
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.destinationSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.DestinationFrame.create)(WebAudio_Gain.readGainParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.gainSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.GainFrame.create)(WebAudio_Gain.readGainParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.delaySymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.DelayFrame.create)(WebAudio_Delay.readDelayParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.audioBufferSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.AudioBufferFrame.create)(readAudioBufferParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.videoSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.VideoFrame.create)(readVideoElement(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.stereoPannerSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.StereoPannerFrame.create)(readStereoPannerParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.convolverSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.ConvolverFrame.value);
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.analyserSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(new Soundknot_Types.AnalyserFrame({
	                                          handler: function (value_2) {
	                                              return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                                          }
	                                      }));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.channelSplitterSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.ChannelSplitterFrame.value);
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.channelMergerSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.ChannelMergerFrame.value);
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.dynamicsCompressorSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.DynamicsCompressorFrame.create)(WebAudio_Compressor.readDynamicsCompressorParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.biquadFilterSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.BiquadFilterFrame.create)(WebAudio_BiquadFilter.foreignToBiquadFilterParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.waveShaperSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(new Soundknot_Types.WaveShaperFrame({}));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.oscillatorSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.OscillatorFrame.create)(WebAudio_Oscillator.foreignToOscillatorParams(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.mediaStreamSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.MediaStreamFrame.value);
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.keyboardSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(function (_74) {
	                                          return Soundknot_Types.KeyboardFrame.create((function (_0) {
	                                              return {
	                                                  instrument: _0, 
	                                                  notes: [  ]
	                                              };
	                                          })(_74));
	                                      })(Data_Foreign.readString(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.timelineSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(Soundknot_Types.TimelineFrame.create)(Soundknot_UI_Timeline_Types.readTimeline(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.instrumentSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(function (_75) {
	                                          return Soundknot_Types.InstrumentFrame.create((function (_1) {
	                                              return {
	                                                  instrument: _1, 
	                                                  notes: [  ]
	                                              };
	                                          })(_75));
	                                      })(Data_Foreign.readString(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.midiInputSymbol)) {
	                                      return Prelude["<$>"](Data_Either.functorEither)(function (_76) {
	                                          return Soundknot_Types.MidiInputFrame.create((function (_2) {
	                                              return {
	                                                  port: _2, 
	                                                  message: [  ]
	                                              };
	                                          })(_76));
	                                      })(Data_Foreign.readString(_14));
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.webMidiLinkSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.WebMidiLinkFrame.value);
	                                  };
	                                  if (Prelude["=="](Prelude.eqString)(_13)(Soundknot_Types.pitchDetectSymbol)) {
	                                      return Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.PitchDetectFrame.value);
	                                  };
	                                  return new Data_Either.Left(new Data_Foreign.JSONError("Unknown symbol: " + _13));
	                              })())(function (_11) {
	                                  return Prelude.pure(Data_Either.applicativeEither)({
	                                      name: _16, 
	                                      position: _15, 
	                                      props: _11, 
	                                      dragging: false, 
	                                      zIndex: _12
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      };
	      var deserializeEdge = function (value_1) {
	          return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("output")(value_1))(deserializePort))(function (_8) {
	              return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("input")(value_1))(deserializePort))(function (_7) {
	                  return Prelude.pure(Data_Either.applicativeEither)({
	                      output: _8, 
	                      input: _7
	                  });
	              });
	          });
	      };
	      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("projectName")(value))(function (_23) {
	          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("scaleFactor")(value))(function (_22) {
	              return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("translation")(value))(deserializeVector2))(function (_21) {
	                  return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("nodes")(value))(Data_Foreign.readArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(deserializeNode)))(function (_20) {
	                      return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("edges")(value))(Data_Foreign.readArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(deserializeEdge)))(function (_19) {
	                          return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("audioFiles")(value))(readStrMap))(function (_18) {
	                              return Prelude.bind(Data_Either.bindEither)(Prelude.pure(Data_Either.applicativeEither)(Soundknot_Types.initialState(_23)(Soundknot_Styles_Retro.retro)))(function (_17) {
	                                  return Prelude.pure(Data_Either.applicativeEither)((function () {
	                                      var _72 = {};
	                                      for (var _73 in _17) {
	                                          if (_17.hasOwnProperty(_73)) {
	                                              _72[_73] = _17[_73];
	                                          };
	                                      };
	                                      _72.scaleFactor = _22;
	                                      _72.translation = _21;
	                                      _72.project = Soundknot_Historical.historical({
	                                          nodes: _20, 
	                                          edges: _19
	                                      });
	                                      _72.audioFiles = _18;
	                                      return _72;
	                                  })());
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      });
	  };
	  exports["deserialize"] = deserialize;
	  exports["serialize"] = serialize;;
	 
	})(PS["Soundknot.Serialize"] = PS["Soundknot.Serialize"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.Persistence"];
	  var Prelude = PS["Prelude"];
	  var Data_Foreign = PS["Data.Foreign"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var DOM = PS["DOM"];
	  var OpticUI = PS["OpticUI"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Serialize = PS["Soundknot.Serialize"];
	  var Data_Date = PS["Data.Date"];     
	  var saveProject = function (name) {
	      return function (state) {
	          return Control_Monad_Aff.makeAff($foreign._saveProject(name)(Soundknot_Serialize.serialize(state)));
	      };
	  };
	  var loadProject = function (name) {
	      return Prelude["<$>"](Control_Monad_Aff.functorAff)(Soundknot_Serialize.deserialize)(Control_Monad_Aff.makeAff($foreign._loadProject(name)));
	  };
	  var getProjectNames = Control_Monad_Aff.makeAff($foreign._getProjectNames);
	  var deleteProject = function (name) {
	      return Control_Monad_Aff.makeAff($foreign._deleteProject(name));
	  };
	  exports["deleteProject"] = deleteProject;
	  exports["getProjectNames"] = getProjectNames;
	  exports["loadProject"] = loadProject;
	  exports["saveProject"] = saveProject;;
	 
	})(PS["Soundknot.Persistence"] = PS["Soundknot.Persistence"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var OpticUI_Core = PS["OpticUI.Core"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Prelude = PS["Prelude"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Either = PS["Data.Either"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_String = PS["Data.String"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Polyfill = PS["Soundknot.Polyfill"];
	  var Soundknot_Persistence = PS["Soundknot.Persistence"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Data_Traversable = PS["Data.Traversable"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var Data_Foreign = PS["Data.Foreign"];     
	  var projectsUI = function (_6) {
	      return function (update) {
	          var updateList = function (selectedProject) {
	              return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.getProjectNames)(function (_0) {
	                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(update((function () {
	                      var _10 = {};
	                      for (var _11 in _6) {
	                          if (_6.hasOwnProperty(_11)) {
	                              _10[_11] = _6[_11];
	                          };
	                      };
	                      _10.selectedProject = selectedProject;
	                      _10.projectEntries = Data_Array[":"](Soundknot_Types.NewProject.value)(Prelude.map(Prelude.functorArray)(Soundknot_Types.ExistingProject.create)(_0));
	                      return _10;
	                  })()));
	              });
	          };
	          var projectEntryDiv = function (label) {
	              return function (props) {
	                  return OpticUI_Markup_HTML.div(Prelude["++"](Prelude.semigroupArray)([ Soundknot_Classes["classA'"](Soundknot_Classes.projectEntry) ])(props))(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectEntryLabel) ])(OpticUI_Markup.text(label)));
	              };
	          };
	          return OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectListBackground), OpticUI_Markup_HTML.onClick(function (e) {
	              return update((function () {
	                  var _12 = {};
	                  for (var _13 in _6) {
	                      if (_6.hasOwnProperty(_13)) {
	                          _12[_13] = _6[_13];
	                      };
	                  };
	                  _12.projectListVisible = false;
	                  return _12;
	              })());
	          }) ]))(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectList), OpticUI_Markup_HTML.onClick(function (e) {
	              return function __do() {
	                  Soundknot_Polyfill.stopPropagation(e)();
	                  return Soundknot_Polyfill.preventDefault(e)();
	              };
	          }) ]))(OpticUI_Core.foreach(OpticUI_Markup.markupMonoid)(Data_Traversable.traversableArray)(function (i) {
	              return OpticUI_Core["with"](function (entry) {
	                  return function (h) {
	                      return OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA(Soundknot_Classes.runClassName(Soundknot_Classes.projectEntry) + (function () {
	                          var _14 = Prelude["=="](Data_Maybe.eqMaybe(Soundknot_Types.eq_ProjectEntrySelect))(new Data_Maybe.Just(entry))(_6.selectedProject);
	                          if (_14) {
	                              return " selected";
	                          };
	                          if (!_14) {
	                              return "";
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _14.constructor.name ]);
	                      })()), OpticUI_Markup.attr("style")("top: " + (Prelude.show(Prelude.showInt)(i * 44 | 0) + "px")), OpticUI_Markup.key((function () {
	                          if (entry instanceof Soundknot_Types.NewProject) {
	                              return "new";
	                          };
	                          if (entry instanceof Soundknot_Types.ExistingProject) {
	                              return entry.value0;
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ entry.constructor.name ]);
	                      })()), OpticUI_Markup_HTML.onClick(function (e) {
	                          return update((function () {
	                              var _17 = {};
	                              for (var _18 in _6) {
	                                  if (_6.hasOwnProperty(_18)) {
	                                      _17[_18] = _6[_18];
	                                  };
	                              };
	                              _17.selectedProject = new Data_Maybe.Just(entry);
	                              return _17;
	                          })());
	                      }) ])(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectEntryLabel) ])(OpticUI_Markup.text(Data_String.replace("///")(" - ")((function () {
	                          if (entry instanceof Soundknot_Types.NewProject) {
	                              return "( New )";
	                          };
	                          if (entry instanceof Soundknot_Types.ExistingProject) {
	                              return entry.value0;
	                          };
	                          throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ entry.constructor.name ]);
	                      })())))));
	                  };
	              });
	          })), OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectOpenButtonList) ]))((function () {
	              var loadButton = function (label) {
	                  return function (icon) {
	                      return function (enabled) {
	                          return function (handler) {
	                              return OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA(Soundknot_Classes.runClassName(Soundknot_Classes.projectOpenButton) + (function () {
	                                  if (enabled) {
	                                      return "";
	                                  };
	                                  if (!enabled) {
	                                      return " disabled";
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Projects line 54, column 17 - line 61, column 13: " + [ enabled.constructor.name ]);
	                              })()), OpticUI_Markup_HTML.onClick(function (e) {
	                                  return function __do() {
	                                      Soundknot_Polyfill.stopPropagation(e)();
	                                      Soundknot_Polyfill.preventDefault(e)();
	                                      return handler();
	                                  };
	                              }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(Soundknot_Utils.glyphicon(icon))(OpticUI_Markup.text(label))));
	                          };
	                      };
	                  };
	              };
	              return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ loadButton("Open")("open")(Data_Maybe.isJust(_6.selectedProject))((function () {
	                  if (_6.selectedProject instanceof Data_Maybe.Nothing) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                  };
	                  if (_6.selectedProject instanceof Data_Maybe.Just) {
	                      if (_6.selectedProject.value0 instanceof Soundknot_Types.NewProject) {
	                          var _24 = Soundknot_Types.initialState("")(_6.config.theme);
	                          return update((function () {
	                              var _25 = {};
	                              for (var _26 in _24) {
	                                  if (_24.hasOwnProperty(_26)) {
	                                      _25[_26] = _24[_26];
	                                  };
	                              };
	                              _25.driver = _6.driver;
	                              _25.config = _6.config;
	                              return _25;
	                          })());
	                      };
	                      if (_6.selectedProject.value0 instanceof Soundknot_Types.ExistingProject) {
	                          return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.loadProject(_6.selectedProject.value0.value0))(function (_1) {
	                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)((function () {
	                                  if (_1 instanceof Data_Either.Left) {
	                                      return Control_Monad_Eff_Console.log(Prelude.show(Data_Foreign.showForeignError)(_1.value0));
	                                  };
	                                  if (_1 instanceof Data_Either.Right) {
	                                      var nextState = (function () {
	                                          var _30 = {};
	                                          for (var _31 in _1.value0) {
	                                              if (_1.value0.hasOwnProperty(_31)) {
	                                                  _30[_31] = _1.value0[_31];
	                                              };
	                                          };
	                                          _30.driver = _6.driver;
	                                          _30.config = _6.config;
	                                          _30.midiInputs = _6.midiInputs;
	                                          _30.sfzMap = _6.sfzMap;
	                                          return _30;
	                                      })();
	                                      return function __do() {
	                                          Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                                              if (_6.driver instanceof Data_Maybe.Nothing) {
	                                                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                              };
	                                              if (_6.driver instanceof Data_Maybe.Just) {
	                                                  var project = (function () {
	                                                      var _33 = Soundknot_Historical.runHistorical(_1.value0.project);
	                                                      return _33;
	                                                  })();
	                                                  return Prelude.bind(Control_Monad_Aff.bindAff)(Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableArray)(project.nodes)(function (_5) {
	                                                      if (_5.props instanceof Soundknot_Types.AudioBufferFrame) {
	                                                          return Data_Maybe.maybe(Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit))(Soundknot_Update.loadAudioFile(_6.driver.value0))(_5.props.value0.file);
	                                                      };
	                                                      if (_5.props instanceof Soundknot_Types.InstrumentFrame) {
	                                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Soundknot_Update.loadInstrument(_5.props.value0.instrument)(_6.driver.value0));
	                                                      };
	                                                      return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                                  }))(function () {
	                                                      return Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableArray)(Data_StrMap.keys(_1.value0.audioFiles))(function (key) {
	                                                          var _38 = Data_StrMap.lookup(key)(_1.value0.audioFiles);
	                                                          if (_38 instanceof Data_Maybe.Nothing) {
	                                                              return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                                                          };
	                                                          if (_38 instanceof Data_Maybe.Just) {
	                                                              return Soundknot_Update.registerAudioBuffer(_6.driver.value0)(_38.value0)(key);
	                                                          };
	                                                          throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _38.constructor.name ]);
	                                                      });
	                                                  });
	                                              };
	                                              throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _6.driver.constructor.name ]);
	                                          })())();
	                                          return update(nextState)();
	                                      };
	                                  };
	                                  throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _1.constructor.name ]);
	                              })());
	                          }));
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _6.selectedProject.value0.constructor.name ]);
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _6.selectedProject.constructor.name ]);
	              })()), loadButton("Save")("save")(Data_Maybe.isJust(_6.selectedProject))(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                  if (_6.selectedProject instanceof Data_Maybe.Just && _6.selectedProject.value0 instanceof Soundknot_Types.NewProject) {
	                      return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.getProjectNames)(function (_3) {
	                          var names$prime = Data_Array.catMaybes(Prelude.map(Prelude.functorArray)(function (name) {
	                              return Data_Array.head(Data_String.split("///")(name));
	                          })(_3));
	                          var newName = Control_Monad_Rec_Class.tailRec(function (i) {
	                              var name = "New Project " + Prelude.show(Prelude.showInt)(i);
	                              var _46 = Data_Array.elemIndex(Prelude.eqString)(name)(names$prime);
	                              if (_46 instanceof Data_Maybe.Just) {
	                                  return new Data_Either.Left(i + 1 | 0);
	                              };
	                              if (_46 instanceof Data_Maybe.Nothing) {
	                                  return new Data_Either.Right(name);
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI.Projects line 117, column 33 - line 123, column 29: " + [ _46.constructor.name ]);
	                          })(0);
	                          return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.saveProject(newName)(_6))(function (_2) {
	                              return updateList(new Data_Maybe.Just(new Soundknot_Types.ExistingProject(_2)));
	                          });
	                      });
	                  };
	                  if (_6.selectedProject instanceof Data_Maybe.Just && _6.selectedProject.value0 instanceof Soundknot_Types.ExistingProject) {
	                      var _50 = Data_Array.head(Data_String.split("///")(_6.selectedProject.value0.value0));
	                      if (_50 instanceof Data_Maybe.Nothing) {
	                          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	                      };
	                      if (_50 instanceof Data_Maybe.Just) {
	                          return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.deleteProject(_6.selectedProject.value0.value0))(function () {
	                              return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.saveProject(_50.value0)(_6))(function (_4) {
	                                  return updateList(new Data_Maybe.Just(new Soundknot_Types.ExistingProject(_4)));
	                              });
	                          });
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI.Projects line 28, column 1 - line 29, column 1: " + [ _50.constructor.name ]);
	                  };
	                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	              })())), loadButton("Delete")("remove")((function () {
	                  if (_6.selectedProject instanceof Data_Maybe.Just && _6.selectedProject.value0 instanceof Soundknot_Types.ExistingProject) {
	                      return true;
	                  };
	                  return false;
	              })())(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))((function () {
	                  if (_6.selectedProject instanceof Data_Maybe.Just && _6.selectedProject.value0 instanceof Soundknot_Types.ExistingProject) {
	                      return Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.deleteProject(_6.selectedProject.value0.value0))(function () {
	                          return updateList(Data_Maybe.Nothing.value);
	                      });
	                  };
	                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit);
	              })())) ]);
	          })()) ]));
	      };
	  };
	  exports["projectsUI"] = projectsUI;;
	 
	})(PS["Soundknot.UI.Projects"] = PS["Soundknot.UI.Projects"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_String = PS["CSS.String"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_Background = PS["CSS.Background"];
	  var CSS_Font = PS["CSS.Font"];
	  var CSS_Border = PS["CSS.Border"];
	  var CSS_Size = PS["CSS.Size"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Css = PS["Soundknot.Css"];
	  var Soundknot_Styles = PS["Soundknot.Styles"];
	  var CSS = PS["CSS"];
	  var CSS_Render = PS["CSS.Render"];
	  var CSS_Selector = PS["CSS.Selector"];     
	  var primaryColor = CSS_Color.rgb(91)(84)(153);
	  var snowscape = Data_Maybe.fromMaybe("***ERROR***")(CSS_Render.renderedSheet(CSS_Render.render(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("html, body, body > div"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.white))(function () {
	      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(primaryColor))(function () {
	          return Soundknot_Styles["@"]("font-family")("\"\u6e38\u30b4\u30b7\u30c3\u30af\u4f53\", \"Yu Gothic\", YuGothic, Meiryo, sans-serif");
	      });
	  })))(function () {
	      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("select, option"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-family")("\"\u6e38\u30b4\u30b7\u30c3\u30af\u4f53\", \"Yu Gothic\", YuGothic, Meiryo, sans-serif"))(function () {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.white))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(primaryColor))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-size")("medium"))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.textAlign(Soundknot_Css.center))(function () {
	                          return CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(primaryColor);
	                      });
	                  });
	              });
	          });
	      })))(function () {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.centerPane))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(primaryColor)))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.clippingPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(primaryColor))(function () {
	                  return CSS_Background.backgroundColor(CSS_Color.white);
	              })))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".btn"))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(primaryColor)))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".button"))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(primaryColor)))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.topMenu))(CSS_Background.backgroundColor(CSS_Color.white)))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.leftPane))(CSS_Background.backgroundColor(CSS_Color.white)))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("line.grid"))(Soundknot_Styles["@"]("stroke")("rgb(91,84,153)")))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.titleBar))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(primaryColor))(function () {
	                                          return Soundknot_Styles["@"]("border-bottom")("solid 1px grey");
	                                      })))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".titleBar:hover"))(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#E7F0FC"))))(function () {
	                                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.nodeContentPane))(Soundknot_Styles["@"]("padding")("16px")))(function () {
	                                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection"))(Soundknot_Styles["@"]("stroke")("#D5D5D5")))(function () {
	                                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.timeDomain"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("fill")("none"))(function () {
	                                                          return Soundknot_Styles["@"]("stroke")("#848242");
	                                                      })))(function () {
	                                                          return CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".timeline"))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey));
	                                                      });
	                                                  });
	                                              });
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      });
	  }))));
	  exports["snowscape"] = snowscape;;
	 
	})(PS["Soundknot.Styles.Snowscape"] = PS["Soundknot.Styles.Snowscape"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var CSS_Stylesheet = PS["CSS.Stylesheet"];
	  var CSS_String = PS["CSS.String"];
	  var CSS_Background = PS["CSS.Background"];
	  var CSS_Color = PS["CSS.Color"];
	  var CSS_Font = PS["CSS.Font"];
	  var CSS_Border = PS["CSS.Border"];
	  var CSS_Size = PS["CSS.Size"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Css = PS["Soundknot.Css"];
	  var Soundknot_Styles = PS["Soundknot.Styles"];
	  var CSS = PS["CSS"];
	  var CSS_Render = PS["CSS.Render"];
	  var CSS_Selector = PS["CSS.Selector"];     
	  var midnight = Data_Maybe.fromMaybe("***ERROR***")(CSS_Render.renderedSheet(CSS_Render.render(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("html, body, body > div"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.black))(function () {
	      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_Color.white))(function () {
	          return Soundknot_Styles["@"]("font-family")("\"\u6e38\u30b4\u30b7\u30c3\u30af\u4f53\", \"Yu Gothic\", YuGothic, Meiryo, sans-serif");
	      });
	  })))(function () {
	      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("select, option, input"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-family")("\"\u6e38\u30b4\u30b7\u30c3\u30af\u4f53\", \"Yu Gothic\", YuGothic, Meiryo, sans-serif"))(function () {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.black))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_Color.white))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("font-size")("medium"))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Css.textAlign(Soundknot_Css.center))(function () {
	                          return CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.white);
	                      });
	                  });
	              });
	          });
	      })))(function () {
	          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.topMenu))(CSS_Background.backgroundColor(CSS_Color.black)))(function () {
	              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.leftPane))(CSS_Background.backgroundColor(CSS_Color.black)))(function () {
	                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.btn))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_Color.black))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.color(CSS_Color.white))(function () {
	                          return CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey);
	                      });
	                  })))(function () {
	                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.titleBar))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#525252")))(function () {
	                          return CSS_Font.color(CSS_Color.white);
	                      })))(function () {
	                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)(".titleBar:hover"))(CSS_Background.backgroundColor(CSS_String.fromString(CSS_Color.isStringColor)("#959595"))))(function () {
	                              return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.centerPane))(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey)))(function () {
	                                  return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](Soundknot_Styles.clazz(Soundknot_Classes.clippingPane))(Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(CSS_Color.grey))(function () {
	                                      return CSS_Background.backgroundColor(CSS_Color.black);
	                                  })))(function () {
	                                      return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection"))(Soundknot_Styles["@"]("stroke")("dimgrey")))(function () {
	                                          return Prelude.bind(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.connection:hover"))(Soundknot_Styles["@"]("stroke")("grey")))(function () {
	                                              return CSS_Stylesheet["?"](CSS_String.fromString(CSS_Selector.isStringSelector)("path.timeDomain"))(Prelude.bind(CSS_Stylesheet.bindStyleM)(Soundknot_Styles["@"]("fill")("none"))(function () {
	                                                  return Soundknot_Styles["@"]("stroke")("white");
	                                              }));
	                                          });
	                                      });
	                                  });
	                              });
	                          });
	                      });
	                  });
	              });
	          });
	      });
	  }))));
	  exports["midnight"] = midnight;;
	 
	})(PS["Soundknot.Styles.Midnight"] = PS["Soundknot.Styles.Midnight"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var $foreign = PS["Soundknot.UI"];
	  var OpticUI_Core = PS["OpticUI.Core"];
	  var WebAudio_Oscillator = PS["WebAudio.Oscillator"];
	  var OpticUI_Markup = PS["OpticUI.Markup"];
	  var Data_Lens_Lens = PS["Data.Lens.Lens"];
	  var Soundknot_UI_Canvas = PS["Soundknot.UI.Canvas"];
	  var Soundknot_UI_Projects = PS["Soundknot.UI.Projects"];
	  var Soundknot_Styles = PS["Soundknot.Styles"];
	  var Soundknot_Styles_Retro = PS["Soundknot.Styles.Retro"];
	  var Soundknot_Styles_Snowscape = PS["Soundknot.Styles.Snowscape"];
	  var Soundknot_Styles_Midnight = PS["Soundknot.Styles.Midnight"];
	  var Prelude = PS["Prelude"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Data_Lens = PS["Data.Lens"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Monoid = PS["Data.Monoid"];
	  var Data_String = PS["Data.String"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var OpticUI = PS["OpticUI"];
	  var OpticUI_Markup_HTML = PS["OpticUI.Markup.HTML"];
	  var WebAudio = PS["WebAudio"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_Classes = PS["Soundknot.Classes"];
	  var Soundknot_Polyfill = PS["Soundknot.Polyfill"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var Soundknot_Persistence = PS["Soundknot.Persistence"];
	  var Soundknot_Utils = PS["Soundknot.Utils"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_Lens = PS["Soundknot.Lens"];
	  var Soundknot_UI_Timeline_Types = PS["Soundknot.UI.Timeline.Types"];
	  var Soundknot_UI_Components = PS["Soundknot.UI.Components"];
	  var KeyValueStorage = PS["KeyValueStorage"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var WebAudio_BiquadFilter = PS["WebAudio.BiquadFilter"];
	  var Data_Foreign_Class = PS["Data.Foreign.Class"];     
	  var getTheme = function (_6) {
	      if (_6 === "retro") {
	          return Soundknot_Styles_Retro.retro;
	      };
	      if (_6 === "snowscape") {
	          return Soundknot_Styles_Snowscape.snowscape;
	      };
	      if (_6 === "midnight") {
	          return Soundknot_Styles_Midnight.midnight;
	      };
	      return Soundknot_Styles_Retro.retro;
	  };
	  var applicationWith = function (sampleRate) {
	      return function (_5) {
	          return function (update) {
	              var undo = update((function () {
	                  var _11 = {};
	                  for (var _12 in _5) {
	                      if (_5.hasOwnProperty(_12)) {
	                          _11[_12] = _5[_12];
	                      };
	                  };
	                  _11.transition = true;
	                  _11.project = Soundknot_Historical.undo(_5.project);
	                  return _11;
	              })());
	              var redo = update((function () {
	                  var _13 = {};
	                  for (var _14 in _5) {
	                      if (_5.hasOwnProperty(_14)) {
	                          _13[_14] = _5[_14];
	                      };
	                  };
	                  _13.transition = true;
	                  _13.project = Soundknot_Historical.redo(_5.project);
	                  return _13;
	              })());
	              var project = (function () {
	                  var _15 = Soundknot_Historical.runHistorical(_5.project);
	                  return _15;
	              })();
	              var openProjectList = Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(Soundknot_Persistence.getProjectNames)(function (_0) {
	                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(update((function () {
	                      var _19 = {};
	                      for (var _20 in _5) {
	                          if (_5.hasOwnProperty(_20)) {
	                              _19[_20] = _5[_20];
	                          };
	                      };
	                      _19.projectEntries = Data_Array[":"](Soundknot_Types.NewProject.value)(Prelude.map(Prelude.functorArray)(function (name) {
	                          var xs = Data_String.split("///")(name);
	                          var pname = (function () {
	                              var _17 = Data_Array.head(xs);
	                              if (_17 instanceof Data_Maybe.Nothing) {
	                                  return "***ERROR***";
	                              };
	                              if (_17 instanceof Data_Maybe.Just) {
	                                  return _17.value0;
	                              };
	                              throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _17.constructor.name ]);
	                          })();
	                          var selected = Prelude["=="](Prelude.eqString)(pname)(_5.projectName);
	                          return new Soundknot_Types.ExistingProject(name);
	                      })(_0));
	                      _19.projectListVisible = true;
	                      return _19;
	                  })()));
	              }));
	              var dropButton = function (title) {
	                  return function (props) {
	                      return OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), OpticUI_Markup_HTML.draggableA, OpticUI_Markup_HTML.onMouseDown(function (e) {
	                          return function __do() {
	                              Soundknot_Polyfill.stopPropagation(e)();
	                              return update((function () {
	                                  var _21 = {};
	                                  for (var _22 in _5) {
	                                      if (_5.hasOwnProperty(_22)) {
	                                          _21[_22] = _5[_22];
	                                      };
	                                  };
	                                  _21.appendingNode = Data_Maybe.Just.create(Prelude.pure(Control_Monad_Eff.applicativeEff)(props));
	                                  return _21;
	                              })())();
	                          };
	                      }), OpticUI_Markup_HTML.onDragStart(function (e) {
	                          return function __do() {
	                              Soundknot_Polyfill.stopPropagation(e)();
	                              return Soundknot_Polyfill.setTransferData("text/plain")("")(e)();
	                          };
	                      }) ])(Prelude["++"](OpticUI_Markup.markupSemigroup)(Soundknot_Utils.glyphicon(Soundknot_Types.iconName(props)))(OpticUI_Markup.text(title)));
	                  };
	              };
	              var disabled = function (f) {
	                  return OpticUI_Markup_HTML.styleA((function () {
	                      var _23 = f(_5.project);
	                      if (_23) {
	                          return "";
	                      };
	                      if (!_23) {
	                          return "opacity: 0.3;";
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _23.constructor.name ]);
	                  })());
	              };
	              var closeInformation = update((function () {
	                  var _24 = {};
	                  for (var _25 in _5) {
	                      if (_5.hasOwnProperty(_25)) {
	                          _24[_25] = _5[_25];
	                      };
	                  };
	                  _24.displayAbout = false;
	                  return _24;
	              })());
	              var buttonList = [ dropButton("Destination")(new Soundknot_Types.DestinationFrame({
	                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	              })), dropButton("Gain")(new Soundknot_Types.GainFrame({
	                  gain: [ new WebAudio_Core.ConstantValue(1.0) ]
	              })), dropButton("Delay")(new Soundknot_Types.DelayFrame({
	                  delayTime: [ new WebAudio_Core.ConstantValue(0.0) ]
	              })), dropButton("Buffer")(new Soundknot_Types.AudioBufferFrame({
	                  file: Data_Maybe.Nothing.value
	              })), dropButton("Media")(new Soundknot_Types.VideoFrame(Data_Maybe.Nothing.value)), dropButton("Panner")(new Soundknot_Types.StereoPannerFrame({
	                  pan: [ new WebAudio_Core.ConstantValue(0.0) ]
	              })), dropButton("Convolver")(Soundknot_Types.ConvolverFrame.value), dropButton("Analyser")(new Soundknot_Types.AnalyserFrame({
	                  handler: function (value) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                  }
	              })), dropButton("Splitter")(Soundknot_Types.ChannelSplitterFrame.value), dropButton("Merger")(Soundknot_Types.ChannelMergerFrame.value), dropButton("Compressor")(new Soundknot_Types.DynamicsCompressorFrame({
	                  threshold: -24.0, 
	                  knee: 30.0, 
	                  ratio: 12.0, 
	                  reduction: 0.0, 
	                  attack: 3.0e-3, 
	                  release: 0.25
	              })), dropButton("Filter")(new Soundknot_Types.BiquadFilterFrame({
	                  type: WebAudio_BiquadFilter.Lowpass.value, 
	                  frequency: 350.0, 
	                  detune: 0.0, 
	                  q: 1.0, 
	                  gain: 0.0
	              })), dropButton("Oscillator")(new Soundknot_Types.OscillatorFrame(WebAudio_Oscillator.initialOscillatorParams)), dropButton("User Media")(Soundknot_Types.MediaStreamFrame.value), dropButton("Timeline")(new Soundknot_Types.TimelineFrame(Soundknot_UI_Timeline_Types.timelineInitialState)), dropButton("Instrument")(new Soundknot_Types.InstrumentFrame({
	                  instrument: "", 
	                  notes: [  ]
	              })), dropButton("MIDI Input")(new Soundknot_Types.MidiInputFrame({
	                  port: "0", 
	                  message: [  ]
	              })), dropButton("WebMidiLink")(Soundknot_Types.WebMidiLinkFrame.value) ];
	              return Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.groundLayer) ]))(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.topMenu) ]))(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.ui(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), OpticUI_Markup_HTML.onClick(function (_2) {
	                  return openProjectList;
	              }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ Soundknot_Utils.glyphicon("download-alt"), OpticUI_Markup.text("File") ]))), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("undo btn"), disabled(Soundknot_Historical.undoable), OpticUI_Markup_HTML.onClick(function (_3) {
	                  return undo;
	              }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ Soundknot_Utils.glyphicon("circle-arrow-left"), OpticUI_Markup.text("Undo") ]))), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.btn), disabled(Soundknot_Historical.redoable), OpticUI_Markup_HTML.onClick(function (_4) {
	                  return redo;
	              }) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)([ OpticUI_Markup.text("Redo"), Soundknot_Utils.glyphicon("circle-arrow-right") ]))), OpticUI_Core.ui(OpticUI_Markup_HTML.select([ OpticUI_Markup.handle("change")(function (e) {
	                  var _29 = OpticUI_Markup_HTML.getProp(Data_Foreign_Class.stringIsForeign)("value")(e);
	                  if (_29 instanceof Data_Maybe.Nothing) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                  };
	                  if (_29 instanceof Data_Maybe.Just) {
	                      return function __do() {
	                          Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(KeyValueStorage.getItemFromStorage("theme"))(function () {
	                              return KeyValueStorage.setItemFromStorage("theme")(_29.value0);
	                          }))();
	                          update((function () {
	                              var _32 = {};
	                              for (var _33 in _5) {
	                                  if (_5.hasOwnProperty(_33)) {
	                                      _32[_33] = _5[_33];
	                                  };
	                              };
	                              _32.config = (function () {
	                                  var _30 = {};
	                                  for (var _31 in _5.config) {
	                                      if (_5.config.hasOwnProperty(_31)) {
	                                          _30[_31] = _5.config[_31];
	                                      };
	                                  };
	                                  _30.theme = _29.value0;
	                                  return _30;
	                              })();
	                              return _32;
	                          })())();
	                          return Prelude.unit;
	                      };
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _29.constructor.name ]);
	              }) ])(Data_Foldable.foldMap(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(function (s) {
	                  return OpticUI_Markup_HTML.option((function () {
	                      var _35 = Prelude["=="](Prelude.eqString)(s)(_5.config.theme);
	                      if (_35) {
	                          return [ OpticUI_Markup.attr("selected")("") ];
	                      };
	                      if (!_35) {
	                          return [  ];
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _35.constructor.name ]);
	                  })())(OpticUI_Markup.text(s));
	              })([ "retro", "snowscape", "midnight" ]))), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width:30px;") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid))), (function () {
	                  var range = Soundknot_Types.maxScaleFactor - Soundknot_Types.minScaleFactor;
	                  return OpticUI_Core.ui(Soundknot_UI_Components.intRangeInput(_5.scaleFactor - Soundknot_Types.minScaleFactor)([ OpticUI_Markup.attr("max")(Prelude.show(Prelude.showInt)(range)) ])(function (value) {
	                      if (_5.driver instanceof Data_Maybe.Nothing) {
	                          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                      };
	                      if (_5.driver instanceof Data_Maybe.Just) {
	                          return update((function () {
	                              var _37 = {};
	                              for (var _38 in _5) {
	                                  if (_5.hasOwnProperty(_38)) {
	                                      _37[_38] = _5[_38];
	                                  };
	                              };
	                              _37.scaleFactor = value + Soundknot_Types.minScaleFactor | 0;
	                              return _37;
	                          })());
	                      };
	                      throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _5.driver.constructor.name ]);
	                  })(function (value) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                  }));
	              })(), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.styleA("width:10px;flex-grow:1.0;") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid))), OpticUI_Core.ui(Soundknot_Utils.iconButton("question-sign")($foreign.showSplash)) ])), OpticUI_Core.withView(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.bottomPane) ]))(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Core.uiMonoid(OpticUI_Markup.markupMonoid))([ OpticUI_Core.ui(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.leftPane) ])(Data_Foldable.mconcat(Data_Foldable.foldableArray)(OpticUI_Markup.markupMonoid)(buttonList))), Soundknot_Lens.state(OpticUI_Core.uiStrong)(Data_Lens_Lens.lens(Soundknot_Historical.runHistorical)(Soundknot_Historical.overwrite)(OpticUI_Core.uiStrong)(Soundknot_UI_Canvas.appCanvas(sampleRate)(_5)(update))), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ Soundknot_Classes["classA'"](Soundknot_Classes.projectName) ])(OpticUI_Markup.text((function () {
	                  var _40 = Prelude["=="](Prelude.eqString)(_5.projectName)("");
	                  if (_40) {
	                      return "(New Project)";
	                  };
	                  if (!_40) {
	                      return _5.projectName;
	                  };
	                  throw new Error("Failed pattern match at Soundknot.UI line 37, column 1 - line 38, column 1: " + [ _40.constructor.name ]);
	              })()))) ])) ])), OpticUI_Core.ui(OpticUI_Markup_HTML.div([ OpticUI_Markup_HTML.classA("radialGrad") ])(Data_Monoid.mempty(OpticUI_Markup.markupMonoid))), Soundknot_Lens.projectEntries(OpticUI_Core.uiStrong)(Soundknot_UI_Projects.projectsUI(_5)(update)), OpticUI_Core.ui(OpticUI_Markup_HTML.style([  ])(OpticUI_Markup.text(Soundknot_Styles.css(_5.transition)(_5.projectListVisible) + getTheme(_5.config.theme)))) ]);
	          };
	      };
	  };
	  var application = function (sampleRate) {
	      return OpticUI_Core["with"](function (_1) {
	          return function (appUpdate) {
	              return applicationWith(sampleRate)(_1)(Soundknot_Update.updateApplication(appUpdate));
	          };
	      });
	  };
	  exports["application"] = application;;
	 
	})(PS["Soundknot.UI"] = PS["Soundknot.UI"] || {});
	(function(exports) {
	  // Generated by psc version 0.7.6.1
	  "use strict";
	  var Sound_AudioGraph_Core = PS["Sound.AudioGraph.Core"];
	  var WebAudio_Core = PS["WebAudio.Core"];
	  var OpticUI_Run = PS["OpticUI.Run"];
	  var Soundknot_WebMidiLink = PS["Soundknot.WebMidiLink"];
	  var Data_StrMap = PS["Data.StrMap"];
	  var Data_Array = PS["Data.Array"];
	  var Data_Foldable = PS["Data.Foldable"];
	  var Prelude = PS["Prelude"];
	  var Data_Maybe = PS["Data.Maybe"];
	  var Data_Nullable = PS["Data.Nullable"];
	  var Control_Monad_Eff = PS["Control.Monad.Eff"];
	  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
	  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
	  var Control_Monad_Aff = PS["Control.Monad.Aff"];
	  var OpticUI = PS["OpticUI"];
	  var Soundknot_Types = PS["Soundknot.Types"];
	  var Soundknot_UI = PS["Soundknot.UI"];
	  var Soundknot_Historical = PS["Soundknot.Historical"];
	  var Soundknot_Update = PS["Soundknot.Update"];
	  var WebAudio = PS["WebAudio"];
	  var WebMidi = PS["WebMidi"];
	  var DOM = PS["DOM"];
	  var KeyValueStorage = PS["KeyValueStorage"];
	  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
	  var processMidiMessage = function (context) {
	      return function (driver) {
	          return function (message) {
	              return function (validator) {
	                  return function __do() {
	                      var _10 = WebAudio_Core.currentTime(context)();
	                      return Soundknot_Update.updateApplicationByDriver(driver)(function (_21) {
	                          return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
	                              var _24 = Soundknot_Historical.runHistorical(_21.project);
	                              var _44 = {};
	                              for (var _45 in _21) {
	                                  if (_21.hasOwnProperty(_45)) {
	                                      _44[_45] = _21[_45];
	                                  };
	                              };
	                              _44.project = Soundknot_Historical.overwrite(_21.project)((function () {
	                                  var _42 = {};
	                                  for (var _43 in _24) {
	                                      if (_24.hasOwnProperty(_43)) {
	                                          _42[_43] = _24[_43];
	                                      };
	                                  };
	                                  _42.nodes = Prelude.map(Prelude.functorArray)(function (_20) {
	                                      var _40 = {};
	                                      for (var _41 in _20) {
	                                          if (_20.hasOwnProperty(_41)) {
	                                              _40[_41] = _20[_41];
	                                          };
	                                      };
	                                      _40.props = (function () {
	                                          if (_20.props instanceof Soundknot_Types.MidiInputFrame) {
	                                              return new Soundknot_Types.MidiInputFrame((function () {
	                                                  var _27 = {};
	                                                  for (var _28 in _20.props.value0) {
	                                                      if (_20.props.value0.hasOwnProperty(_28)) {
	                                                          _27[_28] = _20.props.value0[_28];
	                                                      };
	                                                  };
	                                                  _27.message = message;
	                                                  return _27;
	                                              })());
	                                          };
	                                          if (_20.props instanceof Soundknot_Types.InstrumentFrame) {
	                                              return Soundknot_Types.InstrumentFrame.create(Data_Maybe.fromMaybe(_20.props.value0)(Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.index(message)(0))(function (_9) {
	                                                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.index(message)(1))(function (_8) {
	                                                      return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.index(message)(2))(function (_7) {
	                                                          var inputPort = {
	                                                              node: _20.name, 
	                                                              connector: _20.name + "-input"
	                                                          };
	                                                          return Prelude.bind(Data_Maybe.bindMaybe)(Prelude.pure(Data_Maybe.applicativeMaybe)(Soundknot_Historical.runHistorical(_21.project)))(function (_6) {
	                                                              var edges = Data_Array.filter(function (_17) {
	                                                                  return Prelude["=="](Soundknot_Types.eq_Port)(_17.input)(inputPort);
	                                                              })(_6.edges);
	                                                              var outputNodes = Data_Array.concatMap(function (_19) {
	                                                                  return Data_Array.filter(function (_18) {
	                                                                      return Prelude["=="](Prelude.eqString)(_18.name)(_19.output.node);
	                                                                  })(_6.nodes);
	                                                              })(edges);
	                                                              var hasInput = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (n) {
	                                                                  return function (value) {
	                                                                      return value || validator(n);
	                                                                  };
	                                                              })(false)(outputNodes);
	                                                              if (!hasInput) {
	                                                                  return Data_Maybe.Nothing.value;
	                                                              };
	                                                              if (hasInput) {
	                                                                  return Soundknot_Types.processMidiCommand(_10)(_9)(_8)(_7)(_20.props.value0);
	                                                              };
	                                                              throw new Error("Failed pattern match at Main line 94, column 1 - line 95, column 1: " + [ hasInput.constructor.name ]);
	                                                          });
	                                                      });
	                                                  });
	                                              })));
	                                          };
	                                          return _20.props;
	                                      })();
	                                      return _40;
	                                  })(_24.nodes);
	                                  return _42;
	                              })());
	                              return _44;
	                          })());
	                      })();
	                  };
	              };
	          };
	      };
	  };
	  var updateMIDIInputs = function (access) {
	      return function (context) {
	          return function (driver) {
	              return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
	                  var _5 = Prelude[">>="](Control_Monad_Eff.bindEff)(WebMidi.inputs(access))(WebMidi.maplikeToStrMap)();
	                  driver(function (_14) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
	                          var _48 = {};
	                          for (var _49 in _14) {
	                              if (_14.hasOwnProperty(_49)) {
	                                  _48[_49] = _14[_49];
	                              };
	                          };
	                          _48.midiInputs = _5;
	                          return _48;
	                      })());
	                  })();
	                  return Data_StrMap.foldM(Control_Monad_Eff.monadEff)(function (_16) {
	                      return function (key) {
	                          return function (input) {
	                              return WebMidi.onMidiMessage(function (e) {
	                                  var message = WebMidi.midiData(e);
	                                  return function __do() {
	                                      Control_Monad_Eff_Console.log("[midi] " + (key + (": " + Prelude.show(Prelude.showArray(Prelude.showInt))(message))))();
	                                      return processMidiMessage(context)(driver)(message)(function (_15) {
	                                          if (_15.props instanceof Soundknot_Types.MidiInputFrame && Prelude["=="](Prelude.eqString)(_15.props.value0.port)(key)) {
	                                              return true;
	                                          };
	                                          return false;
	                                      })();
	                                  };
	                              })(input);
	                          };
	                      };
	                  })(Prelude.unit)(_5)();
	              });
	          };
	      };
	  };
	  var main = Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
	      var _4 = Sound_AudioGraph_Core.getAudioGraphContext();
	      var _3 = WebAudio_Core.getAudioContextSampleRate(_4)();
	      var _2 = OpticUI_Run.animate(Soundknot_Types.initialState("")("retro"))(Soundknot_UI.application(_3))();
	      return OpticUI_Run.onLoad(function __do() {
	          _2(function (_11) {
	              return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
	                  var _58 = {};
	                  for (var _59 in _11) {
	                      if (_11.hasOwnProperty(_59)) {
	                          _58[_59] = _11[_59];
	                      };
	                  };
	                  _58.driver = new Data_Maybe.Just(_2);
	                  return _58;
	              })());
	          })();
	          Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(KeyValueStorage.getItemFromStorage("theme"))(function (_0) {
	              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)((function () {
	                  var _61 = Data_Nullable.toMaybe(_0);
	                  if (_61 instanceof Data_Maybe.Nothing) {
	                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
	                  };
	                  if (_61 instanceof Data_Maybe.Just) {
	                      return _2(function (_12) {
	                          return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
	                              var _65 = {};
	                              for (var _66 in _12) {
	                                  if (_12.hasOwnProperty(_66)) {
	                                      _65[_66] = _12[_66];
	                                  };
	                              };
	                              _65.config = (function () {
	                                  var _63 = {};
	                                  for (var _64 in _12.config) {
	                                      if (_12.config.hasOwnProperty(_64)) {
	                                          _63[_64] = _12.config[_64];
	                                      };
	                                  };
	                                  _63.theme = _61.value0;
	                                  return _63;
	                              })();
	                              return _65;
	                          })());
	                      });
	                  };
	                  throw new Error("Failed pattern match at Main line 20, column 1 - line 21, column 1: " + [ _61.constructor.name ]);
	              })());
	          }))();
	          Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception.showError))(Prelude.pure(Control_Monad_Eff.applicativeEff))(Prelude.bind(Control_Monad_Aff.bindAff)(WebMidi.requestMIDIAccess)(function (_1) {
	              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
	                  WebMidi.onStateChange(function (e) {
	                      return updateMIDIInputs(_1)(_4)(_2);
	                  })(_1)();
	                  return updateMIDIInputs(_1)(_4)(_2)();
	              });
	          }))();
	          return Soundknot_WebMidiLink.onWebMidiLink(function (message) {
	              return function __do() {
	                  Control_Monad_Eff_Console.log("[WebMidiLink] " + Prelude.show(Prelude.showArray(Prelude.showInt))(message))();
	                  return processMidiMessage(_4)(_2)(message)(function (_13) {
	                      if (_13.props instanceof Soundknot_Types.WebMidiLinkFrame) {
	                          return true;
	                      };
	                      return false;
	                  })();
	              };
	          })();
	      })();
	  });
	  exports["main"] = main;;
	 
	})(PS["Main"] = PS["Main"] || {});

	PS["Main"].main();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var createElement = __webpack_require__(3)

	module.exports = createElement


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(4)

	var applyProperties = __webpack_require__(6)

	var isVNode = __webpack_require__(9)
	var isVText = __webpack_require__(11)
	var isWidget = __webpack_require__(12)
	var handleThunk = __webpack_require__(13)

	module.exports = createElement

	function createElement(vnode, opts) {
	    var doc = opts ? opts.document || document : document
	    var warn = opts ? opts.warn : null

	    vnode = handleThunk(vnode).a

	    if (isWidget(vnode)) {
	        return vnode.init()
	    } else if (isVText(vnode)) {
	        return doc.createTextNode(vnode.text)
	    } else if (!isVNode(vnode)) {
	        if (warn) {
	            warn("Item is not a valid virtual dom node", vnode)
	        }
	        return null
	    }

	    var node = (vnode.namespace === null) ?
	        doc.createElement(vnode.tagName) :
	        doc.createElementNS(vnode.namespace, vnode.tagName)

	    var props = vnode.properties
	    applyProperties(node, props)

	    var children = vnode.children

	    for (var i = 0; i < children.length; i++) {
	        var childNode = createElement(children[i], opts)
	        if (childNode) {
	            node.appendChild(childNode)
	        }
	    }

	    return node
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = __webpack_require__(5);

	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }

	    module.exports = doccy;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7)
	var isHook = __webpack_require__(8)

	module.exports = applyProperties

	function applyProperties(node, props, previous) {
	    for (var propName in props) {
	        var propValue = props[propName]

	        if (propValue === undefined) {
	            removeProperty(node, propName, propValue, previous);
	        } else if (isHook(propValue)) {
	            removeProperty(node, propName, propValue, previous)
	            if (propValue.hook) {
	                propValue.hook(node,
	                    propName,
	                    previous ? previous[propName] : undefined)
	            }
	        } else {
	            if (isObject(propValue)) {
	                patchObject(node, props, previous, propName, propValue);
	            } else {
	                node[propName] = propValue
	            }
	        }
	    }
	}

	function removeProperty(node, propName, propValue, previous) {
	    if (previous) {
	        var previousValue = previous[propName]

	        if (!isHook(previousValue)) {
	            if (propName === "attributes") {
	                for (var attrName in previousValue) {
	                    node.removeAttribute(attrName)
	                }
	            } else if (propName === "style") {
	                for (var i in previousValue) {
	                    node.style[i] = ""
	                }
	            } else if (typeof previousValue === "string") {
	                node[propName] = ""
	            } else {
	                node[propName] = null
	            }
	        } else if (previousValue.unhook) {
	            previousValue.unhook(node, propName, propValue)
	        }
	    }
	}

	function patchObject(node, props, previous, propName, propValue) {
	    var previousValue = previous ? previous[propName] : undefined

	    // Set attributes
	    if (propName === "attributes") {
	        for (var attrName in propValue) {
	            var attrValue = propValue[attrName]

	            if (attrValue === undefined) {
	                node.removeAttribute(attrName)
	            } else {
	                node.setAttribute(attrName, attrValue)
	            }
	        }

	        return
	    }

	    if(previousValue && isObject(previousValue) &&
	        getPrototype(previousValue) !== getPrototype(propValue)) {
	        node[propName] = propValue
	        return
	    }

	    if (!isObject(node[propName])) {
	        node[propName] = {}
	    }

	    var replacer = propName === "style" ? "" : undefined

	    for (var k in propValue) {
	        var value = propValue[k]
	        node[propName][k] = (value === undefined) ? replacer : value
	    }
	}

	function getPrototype(value) {
	    if (Object.getPrototypeOf) {
	        return Object.getPrototypeOf(value)
	    } else if (value.__proto__) {
	        return value.__proto__
	    } else if (value.constructor) {
	        return value.constructor.prototype
	    }
	}


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function isObject(x) {
		return typeof x === "object" && x !== null;
	};


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = isHook

	function isHook(hook) {
	    return hook &&
	      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
	       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
	}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(10)

	module.exports = isVirtualNode

	function isVirtualNode(x) {
	    return x && x.type === "VirtualNode" && x.version === version
	}


/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = "2"


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(10)

	module.exports = isVirtualText

	function isVirtualText(x) {
	    return x && x.type === "VirtualText" && x.version === version
	}


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = isWidget

	function isWidget(w) {
	    return w && w.type === "Widget"
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var isVNode = __webpack_require__(9)
	var isVText = __webpack_require__(11)
	var isWidget = __webpack_require__(12)
	var isThunk = __webpack_require__(14)

	module.exports = handleThunk

	function handleThunk(a, b) {
	    var renderedA = a
	    var renderedB = b

	    if (isThunk(b)) {
	        renderedB = renderThunk(b, a)
	    }

	    if (isThunk(a)) {
	        renderedA = renderThunk(a, null)
	    }

	    return {
	        a: renderedA,
	        b: renderedB
	    }
	}

	function renderThunk(thunk, previous) {
	    var renderedThunk = thunk.vnode

	    if (!renderedThunk) {
	        renderedThunk = thunk.vnode = thunk.render(previous)
	    }

	    if (!(isVNode(renderedThunk) ||
	            isVText(renderedThunk) ||
	            isWidget(renderedThunk))) {
	        throw new Error("thunk did not return a valid node");
	    }

	    return renderedThunk
	}


/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = isThunk

	function isThunk(t) {
	    return t && t.type === "Thunk"
	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var diff = __webpack_require__(16)

	module.exports = diff


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(17)

	var VPatch = __webpack_require__(18)
	var isVNode = __webpack_require__(9)
	var isVText = __webpack_require__(11)
	var isWidget = __webpack_require__(12)
	var isThunk = __webpack_require__(14)
	var handleThunk = __webpack_require__(13)

	var diffProps = __webpack_require__(19)

	module.exports = diff

	function diff(a, b) {
	    var patch = { a: a }
	    walk(a, b, patch, 0)
	    return patch
	}

	function walk(a, b, patch, index) {
	    if (a === b) {
	        return
	    }

	    var apply = patch[index]
	    var applyClear = false

	    if (isThunk(a) || isThunk(b)) {
	        thunks(a, b, patch, index)
	    } else if (b == null) {

	        // If a is a widget we will add a remove patch for it
	        // Otherwise any child widgets/hooks must be destroyed.
	        // This prevents adding two remove patches for a widget.
	        if (!isWidget(a)) {
	            clearState(a, patch, index)
	            apply = patch[index]
	        }

	        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
	    } else if (isVNode(b)) {
	        if (isVNode(a)) {
	            if (a.tagName === b.tagName &&
	                a.namespace === b.namespace &&
	                a.key === b.key) {
	                var propsPatch = diffProps(a.properties, b.properties)
	                if (propsPatch) {
	                    apply = appendPatch(apply,
	                        new VPatch(VPatch.PROPS, a, propsPatch))
	                }
	                apply = diffChildren(a, b, patch, apply, index)
	            } else {
	                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
	                applyClear = true
	            }
	        } else {
	            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
	            applyClear = true
	        }
	    } else if (isVText(b)) {
	        if (!isVText(a)) {
	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
	            applyClear = true
	        } else if (a.text !== b.text) {
	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
	        }
	    } else if (isWidget(b)) {
	        if (!isWidget(a)) {
	            applyClear = true
	        }

	        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
	    }

	    if (apply) {
	        patch[index] = apply
	    }

	    if (applyClear) {
	        clearState(a, patch, index)
	    }
	}

	function diffChildren(a, b, patch, apply, index) {
	    var aChildren = a.children
	    var orderedSet = reorder(aChildren, b.children)
	    var bChildren = orderedSet.children

	    var aLen = aChildren.length
	    var bLen = bChildren.length
	    var len = aLen > bLen ? aLen : bLen

	    for (var i = 0; i < len; i++) {
	        var leftNode = aChildren[i]
	        var rightNode = bChildren[i]
	        index += 1

	        if (!leftNode) {
	            if (rightNode) {
	                // Excess nodes in b need to be added
	                apply = appendPatch(apply,
	                    new VPatch(VPatch.INSERT, null, rightNode))
	            }
	        } else {
	            walk(leftNode, rightNode, patch, index)
	        }

	        if (isVNode(leftNode) && leftNode.count) {
	            index += leftNode.count
	        }
	    }

	    if (orderedSet.moves) {
	        // Reorder nodes last
	        apply = appendPatch(apply, new VPatch(
	            VPatch.ORDER,
	            a,
	            orderedSet.moves
	        ))
	    }

	    return apply
	}

	function clearState(vNode, patch, index) {
	    // TODO: Make this a single walk, not two
	    unhook(vNode, patch, index)
	    destroyWidgets(vNode, patch, index)
	}

	// Patch records for all destroyed widgets must be added because we need
	// a DOM node reference for the destroy function
	function destroyWidgets(vNode, patch, index) {
	    if (isWidget(vNode)) {
	        if (typeof vNode.destroy === "function") {
	            patch[index] = appendPatch(
	                patch[index],
	                new VPatch(VPatch.REMOVE, vNode, null)
	            )
	        }
	    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
	        var children = vNode.children
	        var len = children.length
	        for (var i = 0; i < len; i++) {
	            var child = children[i]
	            index += 1

	            destroyWidgets(child, patch, index)

	            if (isVNode(child) && child.count) {
	                index += child.count
	            }
	        }
	    } else if (isThunk(vNode)) {
	        thunks(vNode, null, patch, index)
	    }
	}

	// Create a sub-patch for thunks
	function thunks(a, b, patch, index) {
	    var nodes = handleThunk(a, b)
	    var thunkPatch = diff(nodes.a, nodes.b)
	    if (hasPatches(thunkPatch)) {
	        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
	    }
	}

	function hasPatches(patch) {
	    for (var index in patch) {
	        if (index !== "a") {
	            return true
	        }
	    }

	    return false
	}

	// Execute hooks when two nodes are identical
	function unhook(vNode, patch, index) {
	    if (isVNode(vNode)) {
	        if (vNode.hooks) {
	            patch[index] = appendPatch(
	                patch[index],
	                new VPatch(
	                    VPatch.PROPS,
	                    vNode,
	                    undefinedKeys(vNode.hooks)
	                )
	            )
	        }

	        if (vNode.descendantHooks || vNode.hasThunks) {
	            var children = vNode.children
	            var len = children.length
	            for (var i = 0; i < len; i++) {
	                var child = children[i]
	                index += 1

	                unhook(child, patch, index)

	                if (isVNode(child) && child.count) {
	                    index += child.count
	                }
	            }
	        }
	    } else if (isThunk(vNode)) {
	        thunks(vNode, null, patch, index)
	    }
	}

	function undefinedKeys(obj) {
	    var result = {}

	    for (var key in obj) {
	        result[key] = undefined
	    }

	    return result
	}

	// List diff, naive left to right reordering
	function reorder(aChildren, bChildren) {
	    // O(M) time, O(M) memory
	    var bChildIndex = keyIndex(bChildren)
	    var bKeys = bChildIndex.keys
	    var bFree = bChildIndex.free

	    if (bFree.length === bChildren.length) {
	        return {
	            children: bChildren,
	            moves: null
	        }
	    }

	    // O(N) time, O(N) memory
	    var aChildIndex = keyIndex(aChildren)
	    var aKeys = aChildIndex.keys
	    var aFree = aChildIndex.free

	    if (aFree.length === aChildren.length) {
	        return {
	            children: bChildren,
	            moves: null
	        }
	    }

	    // O(MAX(N, M)) memory
	    var newChildren = []

	    var freeIndex = 0
	    var freeCount = bFree.length
	    var deletedItems = 0

	    // Iterate through a and match a node in b
	    // O(N) time,
	    for (var i = 0 ; i < aChildren.length; i++) {
	        var aItem = aChildren[i]
	        var itemIndex

	        if (aItem.key) {
	            if (bKeys.hasOwnProperty(aItem.key)) {
	                // Match up the old keys
	                itemIndex = bKeys[aItem.key]
	                newChildren.push(bChildren[itemIndex])

	            } else {
	                // Remove old keyed items
	                itemIndex = i - deletedItems++
	                newChildren.push(null)
	            }
	        } else {
	            // Match the item in a with the next free item in b
	            if (freeIndex < freeCount) {
	                itemIndex = bFree[freeIndex++]
	                newChildren.push(bChildren[itemIndex])
	            } else {
	                // There are no free items in b to match with
	                // the free items in a, so the extra free nodes
	                // are deleted.
	                itemIndex = i - deletedItems++
	                newChildren.push(null)
	            }
	        }
	    }

	    var lastFreeIndex = freeIndex >= bFree.length ?
	        bChildren.length :
	        bFree[freeIndex]

	    // Iterate through b and append any new keys
	    // O(M) time
	    for (var j = 0; j < bChildren.length; j++) {
	        var newItem = bChildren[j]

	        if (newItem.key) {
	            if (!aKeys.hasOwnProperty(newItem.key)) {
	                // Add any new keyed items
	                // We are adding new items to the end and then sorting them
	                // in place. In future we should insert new items in place.
	                newChildren.push(newItem)
	            }
	        } else if (j >= lastFreeIndex) {
	            // Add any leftover non-keyed items
	            newChildren.push(newItem)
	        }
	    }

	    var simulate = newChildren.slice()
	    var simulateIndex = 0
	    var removes = []
	    var inserts = []
	    var simulateItem

	    for (var k = 0; k < bChildren.length;) {
	        var wantedItem = bChildren[k]
	        simulateItem = simulate[simulateIndex]

	        // remove items
	        while (simulateItem === null && simulate.length) {
	            removes.push(remove(simulate, simulateIndex, null))
	            simulateItem = simulate[simulateIndex]
	        }

	        if (!simulateItem || simulateItem.key !== wantedItem.key) {
	            // if we need a key in this position...
	            if (wantedItem.key) {
	                if (simulateItem && simulateItem.key) {
	                    // if an insert doesn't put this key in place, it needs to move
	                    if (bKeys[simulateItem.key] !== k + 1) {
	                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
	                        simulateItem = simulate[simulateIndex]
	                        // if the remove didn't put the wanted item in place, we need to insert it
	                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
	                            inserts.push({key: wantedItem.key, to: k})
	                        }
	                        // items are matching, so skip ahead
	                        else {
	                            simulateIndex++
	                        }
	                    }
	                    else {
	                        inserts.push({key: wantedItem.key, to: k})
	                    }
	                }
	                else {
	                    inserts.push({key: wantedItem.key, to: k})
	                }
	                k++
	            }
	            // a key in simulate has no matching wanted key, remove it
	            else if (simulateItem && simulateItem.key) {
	                removes.push(remove(simulate, simulateIndex, simulateItem.key))
	            }
	        }
	        else {
	            simulateIndex++
	            k++
	        }
	    }

	    // remove all the remaining nodes from simulate
	    while(simulateIndex < simulate.length) {
	        simulateItem = simulate[simulateIndex]
	        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
	    }

	    // If the only moves we have are deletes then we can just
	    // let the delete patch remove these items.
	    if (removes.length === deletedItems && !inserts.length) {
	        return {
	            children: newChildren,
	            moves: null
	        }
	    }

	    return {
	        children: newChildren,
	        moves: {
	            removes: removes,
	            inserts: inserts
	        }
	    }
	}

	function remove(arr, index, key) {
	    arr.splice(index, 1)

	    return {
	        from: index,
	        key: key
	    }
	}

	function keyIndex(children) {
	    var keys = {}
	    var free = []
	    var length = children.length

	    for (var i = 0; i < length; i++) {
	        var child = children[i]

	        if (child.key) {
	            keys[child.key] = i
	        } else {
	            free.push(i)
	        }
	    }

	    return {
	        keys: keys,     // A hash of key name to index
	        free: free      // An array of unkeyed item indices
	    }
	}

	function appendPatch(apply, patch) {
	    if (apply) {
	        if (isArray(apply)) {
	            apply.push(patch)
	        } else {
	            apply = [apply, patch]
	        }

	        return apply
	    } else {
	        return patch
	    }
	}


/***/ },
/* 17 */
/***/ function(module, exports) {

	var nativeIsArray = Array.isArray
	var toString = Object.prototype.toString

	module.exports = nativeIsArray || isArray

	function isArray(obj) {
	    return toString.call(obj) === "[object Array]"
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(10)

	VirtualPatch.NONE = 0
	VirtualPatch.VTEXT = 1
	VirtualPatch.VNODE = 2
	VirtualPatch.WIDGET = 3
	VirtualPatch.PROPS = 4
	VirtualPatch.ORDER = 5
	VirtualPatch.INSERT = 6
	VirtualPatch.REMOVE = 7
	VirtualPatch.THUNK = 8

	module.exports = VirtualPatch

	function VirtualPatch(type, vNode, patch) {
	    this.type = Number(type)
	    this.vNode = vNode
	    this.patch = patch
	}

	VirtualPatch.prototype.version = version
	VirtualPatch.prototype.type = "VirtualPatch"


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7)
	var isHook = __webpack_require__(8)

	module.exports = diffProps

	function diffProps(a, b) {
	    var diff

	    for (var aKey in a) {
	        if (!(aKey in b)) {
	            diff = diff || {}
	            diff[aKey] = undefined
	        }

	        var aValue = a[aKey]
	        var bValue = b[aKey]

	        if (aValue === bValue) {
	            continue
	        } else if (isObject(aValue) && isObject(bValue)) {
	            if (getPrototype(bValue) !== getPrototype(aValue)) {
	                diff = diff || {}
	                diff[aKey] = bValue
	            } else if (isHook(bValue)) {
	                 diff = diff || {}
	                 diff[aKey] = bValue
	            } else {
	                var objectDiff = diffProps(aValue, bValue)
	                if (objectDiff) {
	                    diff = diff || {}
	                    diff[aKey] = objectDiff
	                }
	            }
	        } else {
	            diff = diff || {}
	            diff[aKey] = bValue
	        }
	    }

	    for (var bKey in b) {
	        if (!(bKey in a)) {
	            diff = diff || {}
	            diff[bKey] = b[bKey]
	        }
	    }

	    return diff
	}

	function getPrototype(value) {
	  if (Object.getPrototypeOf) {
	    return Object.getPrototypeOf(value)
	  } else if (value.__proto__) {
	    return value.__proto__
	  } else if (value.constructor) {
	    return value.constructor.prototype
	  }
	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var patch = __webpack_require__(21)

	module.exports = patch


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(4)
	var isArray = __webpack_require__(17)

	var render = __webpack_require__(3)
	var domIndex = __webpack_require__(22)
	var patchOp = __webpack_require__(23)
	module.exports = patch

	function patch(rootNode, patches, renderOptions) {
	    renderOptions = renderOptions || {}
	    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch
	        ? renderOptions.patch
	        : patchRecursive
	    renderOptions.render = renderOptions.render || render

	    return renderOptions.patch(rootNode, patches, renderOptions)
	}

	function patchRecursive(rootNode, patches, renderOptions) {
	    var indices = patchIndices(patches)

	    if (indices.length === 0) {
	        return rootNode
	    }

	    var index = domIndex(rootNode, patches.a, indices)
	    var ownerDocument = rootNode.ownerDocument

	    if (!renderOptions.document && ownerDocument !== document) {
	        renderOptions.document = ownerDocument
	    }

	    for (var i = 0; i < indices.length; i++) {
	        var nodeIndex = indices[i]
	        rootNode = applyPatch(rootNode,
	            index[nodeIndex],
	            patches[nodeIndex],
	            renderOptions)
	    }

	    return rootNode
	}

	function applyPatch(rootNode, domNode, patchList, renderOptions) {
	    if (!domNode) {
	        return rootNode
	    }

	    var newNode

	    if (isArray(patchList)) {
	        for (var i = 0; i < patchList.length; i++) {
	            newNode = patchOp(patchList[i], domNode, renderOptions)

	            if (domNode === rootNode) {
	                rootNode = newNode
	            }
	        }
	    } else {
	        newNode = patchOp(patchList, domNode, renderOptions)

	        if (domNode === rootNode) {
	            rootNode = newNode
	        }
	    }

	    return rootNode
	}

	function patchIndices(patches) {
	    var indices = []

	    for (var key in patches) {
	        if (key !== "a") {
	            indices.push(Number(key))
	        }
	    }

	    return indices
	}


/***/ },
/* 22 */
/***/ function(module, exports) {

	// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
	// We don't want to read all of the DOM nodes in the tree so we use
	// the in-order tree indexing to eliminate recursion down certain branches.
	// We only recurse into a DOM node if we know that it contains a child of
	// interest.

	var noChild = {}

	module.exports = domIndex

	function domIndex(rootNode, tree, indices, nodes) {
	    if (!indices || indices.length === 0) {
	        return {}
	    } else {
	        indices.sort(ascending)
	        return recurse(rootNode, tree, indices, nodes, 0)
	    }
	}

	function recurse(rootNode, tree, indices, nodes, rootIndex) {
	    nodes = nodes || {}


	    if (rootNode) {
	        if (indexInRange(indices, rootIndex, rootIndex)) {
	            nodes[rootIndex] = rootNode
	        }

	        var vChildren = tree.children

	        if (vChildren) {

	            var childNodes = rootNode.childNodes

	            for (var i = 0; i < tree.children.length; i++) {
	                rootIndex += 1

	                var vChild = vChildren[i] || noChild
	                var nextIndex = rootIndex + (vChild.count || 0)

	                // skip recursion down the tree if there are no nodes down here
	                if (indexInRange(indices, rootIndex, nextIndex)) {
	                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
	                }

	                rootIndex = nextIndex
	            }
	        }
	    }

	    return nodes
	}

	// Binary search for an index in the interval [left, right]
	function indexInRange(indices, left, right) {
	    if (indices.length === 0) {
	        return false
	    }

	    var minIndex = 0
	    var maxIndex = indices.length - 1
	    var currentIndex
	    var currentItem

	    while (minIndex <= maxIndex) {
	        currentIndex = ((maxIndex + minIndex) / 2) >> 0
	        currentItem = indices[currentIndex]

	        if (minIndex === maxIndex) {
	            return currentItem >= left && currentItem <= right
	        } else if (currentItem < left) {
	            minIndex = currentIndex + 1
	        } else  if (currentItem > right) {
	            maxIndex = currentIndex - 1
	        } else {
	            return true
	        }
	    }

	    return false;
	}

	function ascending(a, b) {
	    return a > b ? 1 : -1
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var applyProperties = __webpack_require__(6)

	var isWidget = __webpack_require__(12)
	var VPatch = __webpack_require__(18)

	var updateWidget = __webpack_require__(24)

	module.exports = applyPatch

	function applyPatch(vpatch, domNode, renderOptions) {
	    var type = vpatch.type
	    var vNode = vpatch.vNode
	    var patch = vpatch.patch

	    switch (type) {
	        case VPatch.REMOVE:
	            return removeNode(domNode, vNode)
	        case VPatch.INSERT:
	            return insertNode(domNode, patch, renderOptions)
	        case VPatch.VTEXT:
	            return stringPatch(domNode, vNode, patch, renderOptions)
	        case VPatch.WIDGET:
	            return widgetPatch(domNode, vNode, patch, renderOptions)
	        case VPatch.VNODE:
	            return vNodePatch(domNode, vNode, patch, renderOptions)
	        case VPatch.ORDER:
	            reorderChildren(domNode, patch)
	            return domNode
	        case VPatch.PROPS:
	            applyProperties(domNode, patch, vNode.properties)
	            return domNode
	        case VPatch.THUNK:
	            return replaceRoot(domNode,
	                renderOptions.patch(domNode, patch, renderOptions))
	        default:
	            return domNode
	    }
	}

	function removeNode(domNode, vNode) {
	    var parentNode = domNode.parentNode

	    if (parentNode) {
	        parentNode.removeChild(domNode)
	    }

	    destroyWidget(domNode, vNode);

	    return null
	}

	function insertNode(parentNode, vNode, renderOptions) {
	    var newNode = renderOptions.render(vNode, renderOptions)

	    if (parentNode) {
	        parentNode.appendChild(newNode)
	    }

	    return parentNode
	}

	function stringPatch(domNode, leftVNode, vText, renderOptions) {
	    var newNode

	    if (domNode.nodeType === 3) {
	        domNode.replaceData(0, domNode.length, vText.text)
	        newNode = domNode
	    } else {
	        var parentNode = domNode.parentNode
	        newNode = renderOptions.render(vText, renderOptions)

	        if (parentNode && newNode !== domNode) {
	            parentNode.replaceChild(newNode, domNode)
	        }
	    }

	    return newNode
	}

	function widgetPatch(domNode, leftVNode, widget, renderOptions) {
	    var updating = updateWidget(leftVNode, widget)
	    var newNode

	    if (updating) {
	        newNode = widget.update(leftVNode, domNode) || domNode
	    } else {
	        newNode = renderOptions.render(widget, renderOptions)
	    }

	    var parentNode = domNode.parentNode

	    if (parentNode && newNode !== domNode) {
	        parentNode.replaceChild(newNode, domNode)
	    }

	    if (!updating) {
	        destroyWidget(domNode, leftVNode)
	    }

	    return newNode
	}

	function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
	    var parentNode = domNode.parentNode
	    var newNode = renderOptions.render(vNode, renderOptions)

	    if (parentNode && newNode !== domNode) {
	        parentNode.replaceChild(newNode, domNode)
	    }

	    return newNode
	}

	function destroyWidget(domNode, w) {
	    if (typeof w.destroy === "function" && isWidget(w)) {
	        w.destroy(domNode)
	    }
	}

	function reorderChildren(domNode, moves) {
	    var childNodes = domNode.childNodes
	    var keyMap = {}
	    var node
	    var remove
	    var insert

	    for (var i = 0; i < moves.removes.length; i++) {
	        remove = moves.removes[i]
	        node = childNodes[remove.from]
	        if (remove.key) {
	            keyMap[remove.key] = node
	        }
	        domNode.removeChild(node)
	    }

	    var length = childNodes.length
	    for (var j = 0; j < moves.inserts.length; j++) {
	        insert = moves.inserts[j]
	        node = keyMap[insert.key]
	        // this is the weirdest bug i've ever seen in webkit
	        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
	    }
	}

	function replaceRoot(oldRoot, newRoot) {
	    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
	        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
	    }

	    return newRoot;
	}


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var isWidget = __webpack_require__(12)

	module.exports = updateWidget

	function updateWidget(a, b) {
	    if (isWidget(a) && isWidget(b)) {
	        if ("name" in a && "name" in b) {
	            return a.id === b.id
	        } else {
	            return a.init === b.init
	        }
	    }

	    return false
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(10)

	module.exports = VirtualText

	function VirtualText(text) {
	    this.text = String(text)
	}

	VirtualText.prototype.version = version
	VirtualText.prototype.type = "VirtualText"


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(10)
	var isVNode = __webpack_require__(9)
	var isWidget = __webpack_require__(12)
	var isThunk = __webpack_require__(14)
	var isVHook = __webpack_require__(8)

	module.exports = VirtualNode

	var noProperties = {}
	var noChildren = []

	function VirtualNode(tagName, properties, children, key, namespace) {
	    this.tagName = tagName
	    this.properties = properties || noProperties
	    this.children = children || noChildren
	    this.key = key != null ? String(key) : undefined
	    this.namespace = (typeof namespace === "string") ? namespace : null

	    var count = (children && children.length) || 0
	    var descendants = 0
	    var hasWidgets = false
	    var hasThunks = false
	    var descendantHooks = false
	    var hooks

	    for (var propName in properties) {
	        if (properties.hasOwnProperty(propName)) {
	            var property = properties[propName]
	            if (isVHook(property) && property.unhook) {
	                if (!hooks) {
	                    hooks = {}
	                }

	                hooks[propName] = property
	            }
	        }
	    }

	    for (var i = 0; i < count; i++) {
	        var child = children[i]
	        if (isVNode(child)) {
	            descendants += child.count || 0

	            if (!hasWidgets && child.hasWidgets) {
	                hasWidgets = true
	            }

	            if (!hasThunks && child.hasThunks) {
	                hasThunks = true
	            }

	            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
	                descendantHooks = true
	            }
	        } else if (!hasWidgets && isWidget(child)) {
	            if (typeof child.destroy === "function") {
	                hasWidgets = true
	            }
	        } else if (!hasThunks && isThunk(child)) {
	            hasThunks = true;
	        }
	    }

	    this.count = count + descendants
	    this.hasWidgets = hasWidgets
	    this.hasThunks = hasThunks
	    this.hooks = hooks
	    this.descendantHooks = descendantHooks
	}

	VirtualNode.prototype.version = version
	VirtualNode.prototype.type = "VirtualNode"


/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	module.exports = SoftSetHook;

	function SoftSetHook(value) {
	    if (!(this instanceof SoftSetHook)) {
	        return new SoftSetHook(value);
	    }

	    this.value = value;
	}

	SoftSetHook.prototype.hook = function (node, propertyName) {
	    if (node[propertyName] !== this.value) {
	        node[propertyName] = this.value;
	    }
	};


/***/ }
/******/ ])
});
;