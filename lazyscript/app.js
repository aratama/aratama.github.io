(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Generated by psc-bundle 0.9.3
var PS = {};
(function(exports) {
    "use strict";

  // module Data.Functor

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  // module Data.Show

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  // module Data.Semigroup

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);   
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Data.HeytingAlgebra

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var BooleanAlgebra = function (__superclass_Data$dotHeytingAlgebra$dotHeytingAlgebra_0) {
      this["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"] = __superclass_Data$dotHeytingAlgebra$dotHeytingAlgebra_0;
  }; 
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
})(PS["Data.BooleanAlgebra"] = PS["Data.BooleanAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Data.Ring

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  // module Data.Semiring

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar29) {
                  return $dollar29;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 283, column 1 - line 283, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 78, column 3 - line 78, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 137, column 3 - line 137, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["fromJust"] = fromJust;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["runFirst"] = runFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($164) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($164));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($167) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]()))(function ($168) {
                      return Data_Monoid_Disj.Disj(p($168));
                  })($167));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($169) {
              return any(dictFoldable)(Data_BooleanAlgebra.booleanAlgebraBoolean)(Data_Eq.eq(dictEq)($169));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($170) {
                  return !elem(dictFoldable)(dictEq)(x)($170);
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["notElem"] = notElem;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 46, column 3 - line 46, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar52) {
                  return $dollar52;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 262, column 1 - line 262, column 23: " + [ v.constructor.name ]);
          })());
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 243, column 1 - line 243, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 53, column 3 - line 53, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 89, column 3 - line 89, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromRight"] = fromRight;
  exports["isLeft"] = isLeft;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (__superclass_Data$dotRing$dotRing_0) {
      this["__superclass_Data.Ring.Ring_0"] = __superclass_Data$dotRing$dotRing_0;
  }; 
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
    "use strict";

  // module Data.EuclideanRing

  exports.intDegree = function (x) {
    return Math.abs(x);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var EuclideanRing = function (__superclass_Data$dotCommutativeRing$dotCommutativeRing_0, degree, div, mod) {
      this["__superclass_Data.CommutativeRing.CommutativeRing_0"] = __superclass_Data$dotCommutativeRing$dotCommutativeRing_0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (v) {
      return v;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function ($26) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f($26));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 103, column 5 - line 108, column 27: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.fromRight(dictPartial))(Control_Monad_ST.readSTRef(v1));
              })();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(new Data_Either.Left(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans"] = PS["Control.Monad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Either = PS["Data.Either"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($98) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($98));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 55, column 3 - line 55, column 69: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var bimapFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (nf) {
              return function (nm) {
                  return function (v) {
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(function ($99) {
                                  return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value0($99));
                              })(function ($100) {
                                  return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value1($100));
                              });
                          })(v.value0);
                      };
                      if (v instanceof FreeT) {
                          return new FreeT(function (v1) {
                              return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)(function ($101) {
                                  return nf(Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm))($101));
                              }))(nm(v.value0(Data_Unit.unit)));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 96, column 1 - line 96, column 114: " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var hoistFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var $77 = v1.value0(Data_Unit.unit);
                      if ($77 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($77.value0(Data_Unit.unit))(function (v2) {
                              if (v2 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(v1.value1(v2.value0)));
                              };
                              if (v2 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(h)(v1.value1);
                                  })(v2.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 49, column 9 - line 51, column 68: " + [ v2.constructor.name ]);
                          });
                      };
                      if ($77 instanceof Bind) {
                          return Data_Exists.runExists(function (v2) {
                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value1(z))(v1.value1);
                              })));
                          })($77.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 46, column 5 - line 52, column 98: " + [ $77.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 44, column 3 - line 44, column 36: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(interp(v.value0))(function (v1) {
                          return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(v1));
                      });
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 104, column 3 - line 104, column 31: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Data_Either.Left) {
                          return go(v.value0);
                      };
                      if (v instanceof Data_Either.Right) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 78, column 7 - line 80, column 26: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["bimapFreeT"] = bimapFreeT;
  exports["freeT"] = freeT;
  exports["hoistFreeT"] = hoistFreeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function (f) {
                  return Data_Function.apply(Data_Maybe_First.runFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $127 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($127) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$127) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 189, column 58 - line 189, column 93: " + [ $127.constructor.name ]);
                  })(f));
              };
          };
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["lookup"] = lookup;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadState = function (__superclass_Control$dotMonad$dotMonad_0, state) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["modify"] = modify;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var functorMaybeT = function (dictMonad) {
      return new Data_Functor.Functor(Control_Applicative.liftA1(applicativeMaybeT(dictMonad)));
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var $36 = f(v1.value0);
                      return $36;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 55, column 5 - line 58, column 22: " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(dictMonad);
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($61) {
          return MaybeT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Just.create($61)));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function ($63) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  var $42 = f(a);
                  return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($42)(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                          if (m$prime instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Right(Data_Maybe.Nothing.value);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Maybe.Just(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 86, column 11 - line 89, column 45: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($63));
          };
      });
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v2) {
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return v1;
                  };
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v2);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value));
  };
  exports["MaybeT"] = MaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return Data_Function.apply(mapWriterT)(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(k)(v))(v1);
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictApplicative["__superclass_Control.Apply.Apply_0"]());
          }, function (a) {
              return Data_Function.apply(WriterT)(Data_Function.apply(Control_Applicative.pure(dictApplicative))(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];        
  var Parallel = function (x) {
      return x;
  };
  var MonadPar = function (__superclass_Control$dotMonad$dotMonad_0, par) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.par = par;
  };
  var runParallel = function (v) {
      return v;
  };
  var parallel = Parallel;
  var par = function (dict) {
      return dict.par;
  }; 
  var functorParallel = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function ($90) {
              return parallel(Data_Functor.map(dictFunctor)(f)(runParallel($90)));
          };
      });
  };
  var applyParallel = function (dictMonadPar) {
      return new Control_Apply.Apply(function () {
          return functorParallel((((dictMonadPar["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (f) {
          return function (a) {
              return parallel(par(dictMonadPar)(Data_Function.apply)(runParallel(f))(runParallel(a)));
          };
      });
  };
  exports["MonadPar"] = MonadPar;
  exports["par"] = par;
  exports["parallel"] = parallel;
  exports["runParallel"] = runParallel;
  exports["functorParallel"] = functorParallel;
  exports["applyParallel"] = applyParallel;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($4) {
                  return c2d(b2c(a2b($4)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
          };
      };
  });
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictMonadPar) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadPar["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Parallel_Class.runParallel(Control_Apply.apply(Control_Parallel_Class.applyParallel(dictMonadPar))(Data_Functor.map(Control_Parallel_Class.functorParallel((((dictMonadPar["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                          if (v1 instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadPar["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(v1.value0));
                                          };
                                          if (v1 instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadPar["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v2) {
                                                      return go(t);
                                                  });
                                              })(v1.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine line 73, column 5 - line 75, column 63: " + [ v1.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
  var $$await = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["await"] = $$await;
  exports["fuseWith"] = fuseWith;
  exports["profunctorAwait"] = profunctorAwait;
  exports["functorAwait"] = functorAwait;
})(PS["Control.Coroutine"] = PS["Control.Coroutine"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];        
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var Stall = (function () {
      function Stall(value0) {
          this.value0 = value0;
      };
      Stall.create = function (value0) {
          return new Stall(value0);
      };
      return Stall;
  })();
  var runStallingProcess = function (dictMonadRec) {
      return function ($31) {
          return Control_Monad_Maybe_Trans.runMaybeT(Control_Monad_Free_Trans.runFreeT(Data_Maybe.functorMaybe)(Control_Monad_Maybe_Trans.monadRecMaybeT(dictMonadRec))(Data_Maybe.maybe(Control_Plus.empty(Control_Monad_Maybe_Trans.plusMaybeT(dictMonadRec["__superclass_Control.Monad.Monad_0"]())))(Control_Applicative.pure(Control_Monad_Maybe_Trans.applicativeMaybeT(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))))(Control_Monad_Free_Trans.hoistFreeT(Data_Maybe.functorMaybe)(Control_Monad_Maybe_Trans.functorMaybeT(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(function ($32) {
              return Control_Monad_Maybe_Trans.MaybeT(Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.Just.create)($32));
          })($31)));
      };
  };
  var bifunctorStallF = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof Emit) {
                  return new Emit(f(v.value0), g(v.value1));
              };
              if (v instanceof Stall) {
                  return new Stall(g(v.value0));
              };
              throw new Error("Failed pattern match at Control.Coroutine.Stalling line 51, column 15 - line 53, column 27: " + [ v.constructor.name ]);
          };
      };
  });
  var functorStallF = new Data_Functor.Functor(function (f) {
      return Data_Bifunctor.rmap(bifunctorStallF)(f);
  });
  var fuse = function (dictMonadRec) {
      return function (dictMonadPar) {
          return Control_Coroutine.fuseWith(functorStallF)(Control_Coroutine.functorAwait)(Data_Maybe.functorMaybe)(dictMonadRec)(dictMonadPar)(function (f) {
              return function (q) {
                  return function (v) {
                      if (q instanceof Emit) {
                          return new Data_Maybe.Just(f(q.value1)(v(q.value0)));
                      };
                      if (q instanceof Stall) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Control.Coroutine.Stalling line 86, column 5 - line 88, column 27: " + [ q.constructor.name ]);
                  };
              };
          });
      };
  };
  exports["Emit"] = Emit;
  exports["Stall"] = Stall;
  exports["fuse"] = fuse;
  exports["runStallingProcess"] = runStallingProcess;
  exports["bifunctorStallF"] = bifunctorStallF;
  exports["functorStallF"] = functorStallF;
})(PS["Control.Coroutine.Stalling"] = PS["Control.Coroutine.Stalling"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._forkAff = function (nonCanceler, aff) {
    var voidF = function(){};

    return function(success, error) {
      var canceler = aff(voidF, voidF);
      success(canceler);
      return nonCanceler;
    };
  }

  exports._forkAll = function (nonCanceler, foldl, affs) {
    var voidF = function(){};

    return function(success, error) {
      try {
        var cancelers = foldl(function(acc) {
          return function(aff) {
            acc.push(aff(voidF, voidF));
            return acc;
          }
        })([])(affs);
      } catch (err) {
        error(err)
      }

      var canceler = function(e) {
        return function(success, error) {
          var cancellations = 0;
          var result        = false;
          var errored       = false;

          var s = function(bool) {
            cancellations = cancellations + 1;
            result        = result || bool;

            if (cancellations === cancelers.length && !errored) {
              success(result);
            }
          };

          var f = function(err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          for (var i = 0; i < cancelers.length; i++) {
            cancelers[i](e)(s, f);
          }

          return nonCanceler;
        };
      };

      success(canceler);
      return nonCanceler;
    };
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      try {
        return cb(function(e) {
          return function() {
            error(e);
          };
        })(function(v) {
          return function() {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      success(v);
      return nonCanceler;
    };
  }

  exports._throwError = function (nonCanceler, e) {
    return function(success, error) {
      error(e);
      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      try {
        return aff(function(v) {
          try {
            var v2 = f(v);
          } catch (err) {
            error(err)
          }
          success(v2);
        }, error);
      } catch (err) {
        error(err);
      }
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._attempt = function (Left, Right, aff) {
    return function(success, error) {
      try {
        return aff(function(v) {
          success(Right(v));
        }, function(e) {
          success(Left(e));
        });
      } catch (err) {
        success(Left(err));
      }
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        successT(v)();
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  }

  exports._tailRecM = function (isLeft, f, a) {
    return function(success, error) {
      return function go(acc) {
        var result, status, canceler;

        // Observes synchronous effects using a flag.
        //   status = 0 (unresolved status)
        //   status = 1 (synchronous effect)
        //   status = 2 (asynchronous effect)
        while (true) {
          status = 0;
          canceler = f(acc)(function(v) {
            // If the status is still unresolved, we have observed a
            // synchronous effect. Otherwise, the status will be `2`.
            if (status === 0) {
              // Store the result for further synchronous processing.
              result = v;
              status = 1;
            } else {
              // When we have observed an asynchronous effect, we use normal
              // recursion. This is safe because we will be on a new stack.
              if (isLeft(v)) {
                go(v.value0);
              } else {
                try {
                  success(v.value0);
                } catch (err) {
                  error(err);
                }
              }
            }
          }, error);

          // If the status has already resolved to `1` by our Aff handler, then
          // we have observed a synchronous effect. Otherwise it will still be
          // `0`.
          if (status === 1) {
            // When we have observed a synchronous effect, we merely swap out the
            // accumulator and continue the loop, preserving stack.
            if (isLeft(result)) {
              acc = result.value0;
              continue;
            } else {
              try {
                success(result.value0);
              } catch (err) {
                error(err);
              }
            }
          } else {
            // If the status has not resolved yet, then we have observed an
            // asynchronous effect.
            status = 2;
          }
          return canceler;
        }

      }(a);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._makeVar = function (nonCanceler) {
    return function(success, error) {
      try {
        success({
          consumers: [],
          producers: [],
          error: undefined
        });
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  };

  exports._takeVar = function (nonCanceler, avar) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        var producer = avar.producers.shift();

        producer(success, error);
      } else {
        avar.consumers.push({success: success, error: error});
      }

      return nonCanceler;
    };
  };

  exports._putVar = function (nonCanceler, avar, a) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.consumers.length === 0) {
        avar.producers.push(function(success, error) {
          try {
            success(a);
          } catch (err) {
            error(err);
          }
        });

        success({});
      } else {
        var consumer = avar.consumers.shift();

        try {
          consumer.success(a);
        } catch (err) {
          error(err);

          return;
        }

        success({});
      }

      return nonCanceler;
    };
  };

  exports._killVar = function (nonCanceler, avar, e) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        var errors = [];

        avar.error = e;

        while (avar.consumers.length > 0) {
          var consumer = avar.consumers.shift();

          try {
            consumer.error(e);
          } catch (err) {
            errors.push(err);
          }
        }

        if (errors.length > 0) error(errors[0]);
        else success({});
      }

      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff.Internal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  exports["_killVar"] = $foreign._killVar;
  exports["_makeVar"] = $foreign._makeVar;
  exports["_putVar"] = $foreign._putVar;
  exports["_takeVar"] = $foreign._takeVar;
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var forkAff = function (aff) {
      return $foreign._forkAff(nonCanceler, aff);
  };
  var forkAll = function (dictFoldable) {
      return function (affs) {
          return $foreign._forkAll(nonCanceler, Data_Foldable.foldl(dictFoldable), affs);
      };
  };
  var killVar = function (q) {
      return function (e) {
          return Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal._killVar(nonCanceler, q, e));
      };
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };
  var makeVar = Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal._makeVar(nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal._putVar(nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal._takeVar(nonCanceler, q));
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          return $foreign._tailRecM(Data_Either.isLeft, f, a);
      };
  });
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadAff;
  }, function (aff) {
      return function (ex) {
          return Control_Bind.bind(bindAff)(attempt(aff))(Data_Either.either(ex)(Control_Applicative.pure(applicativeAff)));
      };
  }, function (e) {
      return $foreign._throwError(nonCanceler, e);
  });
  var monadParAff = new Control_Parallel_Class.MonadPar(function () {
      return monadAff;
  }, function (f) {
      return function (ma) {
          return function (mb) {
              var putOrKill = function (v) {
                  return Data_Either.either(killVar(v))(putVar(v));
              };
              return Control_Bind.bind(bindAff)(makeVar)(function (v) {
                  return Control_Bind.bind(bindAff)(makeVar)(function (v1) {
                      return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v))(attempt(ma))))(function (v2) {
                          return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v1))(attempt(mb))))(function (v3) {
                              return Control_Apply.apply(applyAff)(Data_Functor.map(functorAff)(f)(takeVar(v)))(takeVar(v1));
                          });
                      });
                  });
              });
          };
      };
  });
  exports["attempt"] = attempt;
  exports["forkAff"] = forkAff;
  exports["forkAll"] = forkAll;
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadParAff"] = monadParAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Internal_1 = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Aff_Internal_1 = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var makeVar = Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal_1._makeVar(Control_Monad_Aff.nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal_1._putVar(Control_Monad_Aff.nonCanceler, q, a));
      };
  };
  var makeVar$prime = function (a) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(makeVar)(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(putVar(v)(a))(function () {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
          });
      });
  };
  var takeVar = function (q) {
      return Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal_1._takeVar(Control_Monad_Aff.nonCanceler, q));
  };
  var modifyVar = function (f) {
      return function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(takeVar(v))(function ($2) {
              return putVar(v)(f($2));
          });
      };
  };
  exports["makeVar"] = makeVar;
  exports["makeVar'"] = makeVar$prime;
  exports["modifyVar"] = modifyVar;
  exports["putVar"] = putVar;
  exports["takeVar"] = takeVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      while (list !== emptyList) {
        result[count++] = list.head;
        list = list.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Data.Unfoldable

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              while (true) {
                var maybe = f(b);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                b = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Partial_Unsafe.unsafePartial(function (dictPartial) {
      return Data_Maybe.fromJust(dictPartial);
  }))(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $49 = comp(x)(y);
                  if ($49 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($49 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($49 instanceof Data_Ordering.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 436, column 15 - line 441, column 1: " + [ $49.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())([  ]));
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["some"] = some;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["uncons"] = uncons;
  exports["zip"] = zip;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];        
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var $$null = function (s) {
      return $foreign.length(s) === 0;
  };                                                                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["null"] = $$null;
  exports["uncons"] = uncons;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["joinWith"] = $foreign.joinWith;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["split"] = $foreign.split;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
  exports["trim"] = $foreign.trim;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, SNumber.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create); 
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 356, column 7 - line 356, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return Data_Function.apply(showParen(v > 10))(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 350, column 1 - line 358, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($239) {
          return genericShowPrec(0)(toSpine(dictGeneric)($239));
      };
  };
  var genericTuple = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(force(v.value1[0]))))(fromSpine(dictGeneric1)(force(v.value1[1])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var sndProxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              var fstProxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              return new SigProd("Data.Tuple.Tuple", [ {
                  sigConstructor: "Data.Tuple.Tuple", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(fstProxy(x));
                  }, function (v) {
                      return toSignature(dictGeneric1)(sndProxy(x));
                  } ]
              } ]);
          }, function (v) {
              return new SProd("Data.Tuple.Tuple", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              }, function (v1) {
                  return toSpine(dictGeneric1)(v.value1);
              } ]);
          });
      };
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gEq"] = gEq;
  exports["gShow"] = gShow;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericBool"] = genericBool;
  exports["genericTuple"] = genericTuple;
  exports["eqGenericSpine"] = eqGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 251, column 21: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 232, column 1 - line 232, column 19: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      return function (acc) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v1 instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              return Data_Function.apply(go(v.value1)(v1.value1))(new Cons(f(v.value0)(v1.value0), acc));
                          };
                          throw new Error("Failed pattern match at Data.List line 638, column 1 - line 642, column 63: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                      };
                  };
              };
              return Data_Function.apply(reverse)(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var $$null = function (v) {
      if (v instanceof Nil) {
          return true;
      };
      return false;
  };
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      var $218 = f(v.value0);
                      if ($218 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($218 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Cons($218.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 400, column 5 - line 402, column 35: " + [ $218.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 396, column 1 - line 402, column 35: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(Nil.value));
          };
      };
  };
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 217, column 1 - line 217, column 19: " + [ v.constructor.name ]);
  };
  var genericList = function (dictGeneric) {
      return new Data_Generic.Generic(function (v) {
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Nil" && v.value1.length === 0)) {
              return new Data_Maybe.Just(Nil.value);
          };
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Cons" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Cons.create))(Data_Generic.fromSpine(dictGeneric)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericList(dictGeneric))(v.value1[1](Data_Unit.unit)));
          };
          return Data_Maybe.Nothing.value;
      }, function ($dollarq) {
          return new Data_Generic.SigProd("Data.List.List", [ {
              sigConstructor: "Data.List.Nil", 
              sigValues: [  ]
          }, {
              sigConstructor: "Data.List.Cons", 
              sigValues: [ function ($dollarq1) {
                  return Data_Generic.toSignature(dictGeneric)(Data_Generic.anyProxy);
              }, function ($dollarq1) {
                  return Data_Generic.toSignature(genericList(dictGeneric))(Data_Generic.anyProxy);
              } ]
          } ]);
      }, function (v) {
          if (v instanceof Nil) {
              return new Data_Generic.SProd("Data.List.Nil", [  ]);
          };
          if (v instanceof Cons) {
              return new Data_Generic.SProd("Data.List.Cons", [ function ($dollarq) {
                  return Data_Generic.toSpine(dictGeneric)(v.value0);
              }, function ($dollarq) {
                  return Data_Generic.toSpine(genericList(dictGeneric))(v.value1);
              } ]);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Control_Applicative.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match at Data.List line 750, column 3 - line 750, column 26: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Control_Applicative.pure(dictApplicative)(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 748, column 3 - line 748, column 28: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });                                            
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                  };
                  if (v1 instanceof Cons) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 686, column 1 - line 686, column 23: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["catMaybes"] = catMaybes;
  exports["foldM"] = foldM;
  exports["head"] = head;
  exports["length"] = length;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["tail"] = tail;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["genericList"] = genericList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List.Nil && v.value1 instanceof Data_List.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List.Nil && v.value1 instanceof Data_List.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List.Nil.value, Data_List.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable_1 = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable_1 = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Inject = PS["Data.Inject"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var $20 = Data_CatList.uncons(v.value1);
              if ($20 instanceof Data_Maybe.Nothing) {
                  return new Return(Unsafe_Coerce.unsafeCoerce(v.value0.value0));
              };
              if ($20 instanceof Data_Maybe.Just) {
                  var __tco_v = Unsafe_Coerce.unsafeCoerce(concatF(runExpF($20.value0.value0)(v.value0.value0))($20.value0.value1));
                  v = __tco_v;
                  continue tco;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 171, column 7 - line 175, column 64: " + [ $20.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              return new Bind(v.value0.value0, function (a) {
                  return Unsafe_Coerce.unsafeCoerce(concatF(v.value0.value1(a))(v.value1));
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 169, column 3 - line 177, column 56: " + [ v.value0.constructor.name ]);
      };
  };
  var runFreeM = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (k) {
              var go = function (f) {
                  var $29 = toView(f);
                  if ($29 instanceof Return) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)(Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())($29.value0));
                  };
                  if ($29 instanceof Bind) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(k(Data_Functor.map(dictFunctor)($29.value1)($29.value0)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 147, column 10 - line 149, column 37: " + [ $29.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
          };
      };
  };
  var fromView = function (f) {
      return new Free(Unsafe_Coerce.unsafeCoerce(f), Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($53) {
              return Control_Applicative.pure(freeApplicative)(k($53));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(Unsafe_Coerce.unsafeCoerce(k)));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($54) {
      return fromView(Return.create($54));
  });
  var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
      return freeMonad;
  }, function (k) {
      return function (a) {
          return Control_Bind.bind(freeBind)(k(a))(Data_Either.either(Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k))(Control_Applicative.pure(freeApplicative)));
      };
  });
  var liftF = function (f) {
      return fromView(new Bind(Unsafe_Coerce.unsafeCoerce(f), function ($55) {
          return Control_Applicative.pure(freeApplicative)(Unsafe_Coerce.unsafeCoerce($55));
      }));
  };
  exports["liftF"] = liftF;
  exports["runFreeM"] = runFreeM;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
  exports["freeMonadRec"] = freeMonadRec;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(s))(function (v1) {
                      var $60 = f(v1.value0);
                      return $60(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return Data_Function.apply(StateT)(function ($95) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f($95));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var runState = function (v) {
      return function ($14) {
          return Data_Identity.runIdentity(v($14));
      };
  };
  exports["runState"] = runState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var runWriter = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Writer_Trans.runWriterT($0));
  };
  exports["runWriter"] = runWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  // jshint maxparams: 1

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Math"];
  exports["pow"] = $foreign.pow;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  }; 
  var readString = unsafeReadTagged("String");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Function.apply(Data_Either.Left.create)(new TypeMismatch("Int", $foreign.tagOf(value)));
      var fromNumber = function ($91) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($91));
      };
      return Data_Either.either(Data_Function["const"](error))(fromNumber)(readNumber(value));
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Data_Either.applicativeEither), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };                         
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                         
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["ix"] = ix;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.writeNull = null;
})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foreign.Null"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["writeNull"] = $foreign.writeNull;
})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.writeUndefined = undefined;
})(PS["Data.Foreign.Undefined"] = PS["Data.Foreign.Undefined"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foreign.Undefined"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["writeUndefined"] = $foreign.writeUndefined;
})(PS["Data.Foreign.Undefined"] = PS["Data.Foreign.Undefined"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var IsForeign = function (read) {
      this.read = read;
  };
  var stringIsForeign = new IsForeign(Data_Foreign.readString);
  var read = function (dict) {
      return dict.read;
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function (value) {
              return Data_Either.either(function ($19) {
                  return Data_Either.Left.create(f($19));
              })(Data_Either.Right.create)(read(dictIsForeign)(value));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Foreign_Index.ix(dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Foreign_Index.errorAt(dictIndex)(prop)));
              };
          };
      };
  };
  exports["IsForeign"] = IsForeign;
  exports["read"] = read;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["stringIsForeign"] = stringIsForeign;
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;                        
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Data_Either.Left.create(Data_Foreign.TypeMismatch.create("HTMLElement")($0));
  })(Data_Either.Right.create);                                          
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;   
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["readHTMLElement"] = readHTMLElement;
  exports["windowToEventTarget"] = windowToEventTarget;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var load = "load";
  exports["load"] = load;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports["null"] = null;

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  };

  exports.notNull = function(x) {
      return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["appendChild"] = $foreign.appendChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";                                             

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelector"] = $foreign.querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();
  var numSpaceBlocks = 8;
  var numLat1Blocks = 63;
  var numConvBlocks = 1230;
  var numBlocks = 2783;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS, 
      unicodeCat: NUMCAT_ZS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var spacechars = [ {
      start: 32, 
      length: 1, 
      convRule: rule1
  }, {
      start: 160, 
      length: 1, 
      convRule: rule1
  }, {
      start: 5760, 
      length: 1, 
      convRule: rule1
  }, {
      start: 6158, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8192, 
      length: 11, 
      convRule: rule1
  }, {
      start: 8239, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8287, 
      length: 1, 
      convRule: rule1
  }, {
      start: 12288, 
      length: 1, 
      convRule: rule1
  } ];
  var gencatZP = 67108864;
  var rule140 = {
      category: gencatZP, 
      unicodeCat: NUMCAT_ZP.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule139 = {
      category: gencatZL, 
      unicodeCat: NUMCAT_ZL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule148 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 26, 
      titledist: 0
  };
  var rule149 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 1, 
      updist: -26, 
      lowdist: 0, 
      titledist: -26
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM, 
      unicodeCat: NUMCAT_SM.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK, 
      unicodeCat: NUMCAT_SK.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC, 
      unicodeCat: NUMCAT_SC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS, 
      unicodeCat: NUMCAT_PS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO, 
      unicodeCat: NUMCAT_PO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPI = 16384;
  var rule15 = {
      category: gencatPI, 
      unicodeCat: NUMCAT_PI.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPF = 131072;
  var rule19 = {
      category: gencatPF, 
      unicodeCat: NUMCAT_PF.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE, 
      unicodeCat: NUMCAT_PE.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD, 
      unicodeCat: NUMCAT_PD.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC, 
      unicodeCat: NUMCAT_PC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatNO = 65536;
  var rule17 = {
      category: gencatNO, 
      unicodeCat: NUMCAT_NO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule116 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule146 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 16, 
      titledist: 0
  };
  var rule147 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 1, 
      updist: -16, 
      lowdist: 0, 
      titledist: -16
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND, 
      unicodeCat: NUMCAT_ND.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule84 = {
      category: gencatMN, 
      unicodeCat: NUMCAT_MN.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule85 = {
      category: gencatMN, 
      unicodeCat: NUMCAT_MN.value, 
      possible: 1, 
      updist: 84, 
      lowdist: 0, 
      titledist: 84
  };
  var gencatME = 4194304;
  var rule109 = {
      category: gencatME, 
      unicodeCat: NUMCAT_ME.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule114 = {
      category: gencatMC, 
      unicodeCat: NUMCAT_MC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU, 
      unicodeCat: NUMCAT_CN.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule105 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -60, 
      titledist: 0
  };
  var rule107 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7, 
      titledist: 0
  };
  var rule108 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 80, 
      titledist: 0
  };
  var rule110 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 15, 
      titledist: 0
  };
  var rule112 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 48, 
      titledist: 0
  };
  var rule115 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 7264, 
      titledist: 0
  };
  var rule120 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7615, 
      titledist: 0
  };
  var rule122 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8, 
      titledist: 0
  };
  var rule131 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -74, 
      titledist: 0
  };
  var rule134 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -86, 
      titledist: 0
  };
  var rule135 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -100, 
      titledist: 0
  };
  var rule136 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -112, 
      titledist: 0
  };
  var rule137 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -128, 
      titledist: 0
  };
  var rule138 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -126, 
      titledist: 0
  };
  var rule141 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7517, 
      titledist: 0
  };
  var rule142 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8383, 
      titledist: 0
  };
  var rule143 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8262, 
      titledist: 0
  };
  var rule144 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 28, 
      titledist: 0
  };
  var rule150 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10743, 
      titledist: 0
  };
  var rule151 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -3814, 
      titledist: 0
  };
  var rule152 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10727, 
      titledist: 0
  };
  var rule155 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10780, 
      titledist: 0
  };
  var rule156 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10749, 
      titledist: 0
  };
  var rule157 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10783, 
      titledist: 0
  };
  var rule158 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10782, 
      titledist: 0
  };
  var rule159 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10815, 
      titledist: 0
  };
  var rule161 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -35332, 
      titledist: 0
  };
  var rule162 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -42280, 
      titledist: 0
  };
  var rule165 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 40, 
      titledist: 0
  };
  var rule21 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 1, 
      titledist: 0
  };
  var rule23 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -199, 
      titledist: 0
  };
  var rule25 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -121, 
      titledist: 0
  };
  var rule28 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 210, 
      titledist: 0
  };
  var rule29 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 206, 
      titledist: 0
  };
  var rule30 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 205, 
      titledist: 0
  };
  var rule31 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 79, 
      titledist: 0
  };
  var rule32 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 202, 
      titledist: 0
  };
  var rule33 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 203, 
      titledist: 0
  };
  var rule34 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 207, 
      titledist: 0
  };
  var rule36 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 211, 
      titledist: 0
  };
  var rule37 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 209, 
      titledist: 0
  };
  var rule39 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 213, 
      titledist: 0
  };
  var rule41 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 214, 
      titledist: 0
  };
  var rule42 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 218, 
      titledist: 0
  };
  var rule43 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 217, 
      titledist: 0
  };
  var rule44 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 219, 
      titledist: 0
  };
  var rule47 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 2, 
      titledist: 1
  };
  var rule51 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -97, 
      titledist: 0
  };
  var rule52 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -56, 
      titledist: 0
  };
  var rule53 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -130, 
      titledist: 0
  };
  var rule54 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 10795, 
      titledist: 0
  };
  var rule55 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -163, 
      titledist: 0
  };
  var rule56 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 10792, 
      titledist: 0
  };
  var rule58 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -195, 
      titledist: 0
  };
  var rule59 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 69, 
      titledist: 0
  };
  var rule60 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 71, 
      titledist: 0
  };
  var rule86 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 38, 
      titledist: 0
  };
  var rule87 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 37, 
      titledist: 0
  };
  var rule88 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 64, 
      titledist: 0
  };
  var rule89 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 63, 
      titledist: 0
  };
  var rule9 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 32, 
      titledist: 0
  };
  var rule95 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 8, 
      titledist: 0
  };
  var rule98 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8, 
      titledist: 0
  };
  var rule132 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -9, 
      titledist: 0
  };
  var rule48 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: -1, 
      lowdist: 1, 
      titledist: 0
  };
  var gencatLO = 262144;
  var rule45 = {
      category: gencatLO, 
      unicodeCat: NUMCAT_LO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule83 = {
      category: gencatLM, 
      unicodeCat: NUMCAT_LM.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -54, 
      lowdist: 0, 
      titledist: -54
  };
  var rule101 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -8, 
      lowdist: 0, 
      titledist: -8
  };
  var rule102 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -86, 
      lowdist: 0, 
      titledist: -86
  };
  var rule103 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -80, 
      lowdist: 0, 
      titledist: -80
  };
  var rule104 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 7, 
      lowdist: 0, 
      titledist: 7
  };
  var rule106 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -96, 
      lowdist: 0, 
      titledist: -96
  };
  var rule111 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -15, 
      lowdist: 0, 
      titledist: -15
  };
  var rule113 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -48, 
      lowdist: 0, 
      titledist: -48
  };
  var rule117 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 35332, 
      lowdist: 0, 
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 3814, 
      lowdist: 0, 
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -59, 
      lowdist: 0, 
      titledist: -59
  };
  var rule12 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -32, 
      lowdist: 0, 
      titledist: -32
  };
  var rule121 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 8, 
      lowdist: 0, 
      titledist: 8
  };
  var rule123 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 74, 
      lowdist: 0, 
      titledist: 74
  };
  var rule124 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 86, 
      lowdist: 0, 
      titledist: 86
  };
  var rule125 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 100, 
      lowdist: 0, 
      titledist: 100
  };
  var rule126 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 128, 
      lowdist: 0, 
      titledist: 128
  };
  var rule127 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 112, 
      lowdist: 0, 
      titledist: 112
  };
  var rule128 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 126, 
      lowdist: 0, 
      titledist: 126
  };
  var rule130 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 9, 
      lowdist: 0, 
      titledist: 9
  };
  var rule133 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -7205, 
      lowdist: 0, 
      titledist: -7205
  };
  var rule14 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule145 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -28, 
      lowdist: 0, 
      titledist: -28
  };
  var rule153 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -10795, 
      lowdist: 0, 
      titledist: -10795
  };
  var rule154 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -10792, 
      lowdist: 0, 
      titledist: -10792
  };
  var rule160 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -7264, 
      lowdist: 0, 
      titledist: -7264
  };
  var rule166 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -40, 
      lowdist: 0, 
      titledist: -40
  };
  var rule18 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 743, 
      lowdist: 0, 
      titledist: 743
  };
  var rule20 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 121, 
      lowdist: 0, 
      titledist: 121
  };
  var rule22 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -1, 
      lowdist: 0, 
      titledist: -1
  };
  var rule24 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -232, 
      lowdist: 0, 
      titledist: -232
  };
  var rule26 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -300, 
      lowdist: 0, 
      titledist: -300
  };
  var rule27 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 195, 
      lowdist: 0, 
      titledist: 195
  };
  var rule35 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 97, 
      lowdist: 0, 
      titledist: 97
  };
  var rule38 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 163, 
      lowdist: 0, 
      titledist: 163
  };
  var rule40 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 130, 
      lowdist: 0, 
      titledist: 130
  };
  var rule46 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 56, 
      lowdist: 0, 
      titledist: 56
  };
  var rule49 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -2, 
      lowdist: 0, 
      titledist: -1
  };
  var rule50 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -79, 
      lowdist: 0, 
      titledist: -79
  };
  var rule57 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10815, 
      lowdist: 0, 
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10783, 
      lowdist: 0, 
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10780, 
      lowdist: 0, 
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10782, 
      lowdist: 0, 
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -210, 
      lowdist: 0, 
      titledist: -210
  };
  var rule65 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -206, 
      lowdist: 0, 
      titledist: -206
  };
  var rule66 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -205, 
      lowdist: 0, 
      titledist: -205
  };
  var rule67 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -202, 
      lowdist: 0, 
      titledist: -202
  };
  var rule68 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -203, 
      lowdist: 0, 
      titledist: -203
  };
  var rule69 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -207, 
      lowdist: 0, 
      titledist: -207
  };
  var rule70 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 42280, 
      lowdist: 0, 
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -209, 
      lowdist: 0, 
      titledist: -209
  };
  var rule72 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -211, 
      lowdist: 0, 
      titledist: -211
  };
  var rule73 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10743, 
      lowdist: 0, 
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10749, 
      lowdist: 0, 
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -213, 
      lowdist: 0, 
      titledist: -213
  };
  var rule76 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -214, 
      lowdist: 0, 
      titledist: -214
  };
  var rule77 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10727, 
      lowdist: 0, 
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -218, 
      lowdist: 0, 
      titledist: -218
  };
  var rule79 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -69, 
      lowdist: 0, 
      titledist: -69
  };
  var rule80 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -217, 
      lowdist: 0, 
      titledist: -217
  };
  var rule81 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -71, 
      lowdist: 0, 
      titledist: -71
  };
  var rule82 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -219, 
      lowdist: 0, 
      titledist: -219
  };
  var rule90 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -38, 
      lowdist: 0, 
      titledist: -38
  };
  var rule91 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -37, 
      lowdist: 0, 
      titledist: -37
  };
  var rule92 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -31, 
      lowdist: 0, 
      titledist: -31
  };
  var rule93 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -64, 
      lowdist: 0, 
      titledist: -64
  };
  var rule94 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -63, 
      lowdist: 0, 
      titledist: -63
  };
  var rule96 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -62, 
      lowdist: 0, 
      titledist: -62
  };
  var rule97 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -57, 
      lowdist: 0, 
      titledist: -57
  };
  var rule99 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -47, 
      lowdist: 0, 
      titledist: -47
  };
  var gencatCS = 134217728;
  var rule163 = {
      category: gencatCS, 
      unicodeCat: NUMCAT_CS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule164 = {
      category: gencatCO, 
      unicodeCat: NUMCAT_CO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCF = 32768;
  var rule16 = {
      category: gencatCF, 
      unicodeCat: NUMCAT_CF.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC, 
      unicodeCat: NUMCAT_CC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var convchars = [ {
      start: 65, 
      length: 26, 
      convRule: rule9
  }, {
      start: 97, 
      length: 26, 
      convRule: rule12
  }, {
      start: 181, 
      length: 1, 
      convRule: rule18
  }, {
      start: 192, 
      length: 23, 
      convRule: rule9
  }, {
      start: 216, 
      length: 7, 
      convRule: rule9
  }, {
      start: 224, 
      length: 23, 
      convRule: rule12
  }, {
      start: 248, 
      length: 7, 
      convRule: rule12
  }, {
      start: 255, 
      length: 1, 
      convRule: rule20
  }, {
      start: 256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 304, 
      length: 1, 
      convRule: rule23
  }, {
      start: 305, 
      length: 1, 
      convRule: rule24
  }, {
      start: 306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 313, 
      length: 1, 
      convRule: rule21
  }, {
      start: 314, 
      length: 1, 
      convRule: rule22
  }, {
      start: 315, 
      length: 1, 
      convRule: rule21
  }, {
      start: 316, 
      length: 1, 
      convRule: rule22
  }, {
      start: 317, 
      length: 1, 
      convRule: rule21
  }, {
      start: 318, 
      length: 1, 
      convRule: rule22
  }, {
      start: 319, 
      length: 1, 
      convRule: rule21
  }, {
      start: 320, 
      length: 1, 
      convRule: rule22
  }, {
      start: 321, 
      length: 1, 
      convRule: rule21
  }, {
      start: 322, 
      length: 1, 
      convRule: rule22
  }, {
      start: 323, 
      length: 1, 
      convRule: rule21
  }, {
      start: 324, 
      length: 1, 
      convRule: rule22
  }, {
      start: 325, 
      length: 1, 
      convRule: rule21
  }, {
      start: 326, 
      length: 1, 
      convRule: rule22
  }, {
      start: 327, 
      length: 1, 
      convRule: rule21
  }, {
      start: 328, 
      length: 1, 
      convRule: rule22
  }, {
      start: 330, 
      length: 1, 
      convRule: rule21
  }, {
      start: 331, 
      length: 1, 
      convRule: rule22
  }, {
      start: 332, 
      length: 1, 
      convRule: rule21
  }, {
      start: 333, 
      length: 1, 
      convRule: rule22
  }, {
      start: 334, 
      length: 1, 
      convRule: rule21
  }, {
      start: 335, 
      length: 1, 
      convRule: rule22
  }, {
      start: 336, 
      length: 1, 
      convRule: rule21
  }, {
      start: 337, 
      length: 1, 
      convRule: rule22
  }, {
      start: 338, 
      length: 1, 
      convRule: rule21
  }, {
      start: 339, 
      length: 1, 
      convRule: rule22
  }, {
      start: 340, 
      length: 1, 
      convRule: rule21
  }, {
      start: 341, 
      length: 1, 
      convRule: rule22
  }, {
      start: 342, 
      length: 1, 
      convRule: rule21
  }, {
      start: 343, 
      length: 1, 
      convRule: rule22
  }, {
      start: 344, 
      length: 1, 
      convRule: rule21
  }, {
      start: 345, 
      length: 1, 
      convRule: rule22
  }, {
      start: 346, 
      length: 1, 
      convRule: rule21
  }, {
      start: 347, 
      length: 1, 
      convRule: rule22
  }, {
      start: 348, 
      length: 1, 
      convRule: rule21
  }, {
      start: 349, 
      length: 1, 
      convRule: rule22
  }, {
      start: 350, 
      length: 1, 
      convRule: rule21
  }, {
      start: 351, 
      length: 1, 
      convRule: rule22
  }, {
      start: 352, 
      length: 1, 
      convRule: rule21
  }, {
      start: 353, 
      length: 1, 
      convRule: rule22
  }, {
      start: 354, 
      length: 1, 
      convRule: rule21
  }, {
      start: 355, 
      length: 1, 
      convRule: rule22
  }, {
      start: 356, 
      length: 1, 
      convRule: rule21
  }, {
      start: 357, 
      length: 1, 
      convRule: rule22
  }, {
      start: 358, 
      length: 1, 
      convRule: rule21
  }, {
      start: 359, 
      length: 1, 
      convRule: rule22
  }, {
      start: 360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 362, 
      length: 1, 
      convRule: rule21
  }, {
      start: 363, 
      length: 1, 
      convRule: rule22
  }, {
      start: 364, 
      length: 1, 
      convRule: rule21
  }, {
      start: 365, 
      length: 1, 
      convRule: rule22
  }, {
      start: 366, 
      length: 1, 
      convRule: rule21
  }, {
      start: 367, 
      length: 1, 
      convRule: rule22
  }, {
      start: 368, 
      length: 1, 
      convRule: rule21
  }, {
      start: 369, 
      length: 1, 
      convRule: rule22
  }, {
      start: 370, 
      length: 1, 
      convRule: rule21
  }, {
      start: 371, 
      length: 1, 
      convRule: rule22
  }, {
      start: 372, 
      length: 1, 
      convRule: rule21
  }, {
      start: 373, 
      length: 1, 
      convRule: rule22
  }, {
      start: 374, 
      length: 1, 
      convRule: rule21
  }, {
      start: 375, 
      length: 1, 
      convRule: rule22
  }, {
      start: 376, 
      length: 1, 
      convRule: rule25
  }, {
      start: 377, 
      length: 1, 
      convRule: rule21
  }, {
      start: 378, 
      length: 1, 
      convRule: rule22
  }, {
      start: 379, 
      length: 1, 
      convRule: rule21
  }, {
      start: 380, 
      length: 1, 
      convRule: rule22
  }, {
      start: 381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 383, 
      length: 1, 
      convRule: rule26
  }, {
      start: 384, 
      length: 1, 
      convRule: rule27
  }, {
      start: 385, 
      length: 1, 
      convRule: rule28
  }, {
      start: 386, 
      length: 1, 
      convRule: rule21
  }, {
      start: 387, 
      length: 1, 
      convRule: rule22
  }, {
      start: 388, 
      length: 1, 
      convRule: rule21
  }, {
      start: 389, 
      length: 1, 
      convRule: rule22
  }, {
      start: 390, 
      length: 1, 
      convRule: rule29
  }, {
      start: 391, 
      length: 1, 
      convRule: rule21
  }, {
      start: 392, 
      length: 1, 
      convRule: rule22
  }, {
      start: 393, 
      length: 2, 
      convRule: rule30
  }, {
      start: 395, 
      length: 1, 
      convRule: rule21
  }, {
      start: 396, 
      length: 1, 
      convRule: rule22
  }, {
      start: 398, 
      length: 1, 
      convRule: rule31
  }, {
      start: 399, 
      length: 1, 
      convRule: rule32
  }, {
      start: 400, 
      length: 1, 
      convRule: rule33
  }, {
      start: 401, 
      length: 1, 
      convRule: rule21
  }, {
      start: 402, 
      length: 1, 
      convRule: rule22
  }, {
      start: 403, 
      length: 1, 
      convRule: rule30
  }, {
      start: 404, 
      length: 1, 
      convRule: rule34
  }, {
      start: 405, 
      length: 1, 
      convRule: rule35
  }, {
      start: 406, 
      length: 1, 
      convRule: rule36
  }, {
      start: 407, 
      length: 1, 
      convRule: rule37
  }, {
      start: 408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 410, 
      length: 1, 
      convRule: rule38
  }, {
      start: 412, 
      length: 1, 
      convRule: rule36
  }, {
      start: 413, 
      length: 1, 
      convRule: rule39
  }, {
      start: 414, 
      length: 1, 
      convRule: rule40
  }, {
      start: 415, 
      length: 1, 
      convRule: rule41
  }, {
      start: 416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 422, 
      length: 1, 
      convRule: rule42
  }, {
      start: 423, 
      length: 1, 
      convRule: rule21
  }, {
      start: 424, 
      length: 1, 
      convRule: rule22
  }, {
      start: 425, 
      length: 1, 
      convRule: rule42
  }, {
      start: 428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 430, 
      length: 1, 
      convRule: rule42
  }, {
      start: 431, 
      length: 1, 
      convRule: rule21
  }, {
      start: 432, 
      length: 1, 
      convRule: rule22
  }, {
      start: 433, 
      length: 2, 
      convRule: rule43
  }, {
      start: 435, 
      length: 1, 
      convRule: rule21
  }, {
      start: 436, 
      length: 1, 
      convRule: rule22
  }, {
      start: 437, 
      length: 1, 
      convRule: rule21
  }, {
      start: 438, 
      length: 1, 
      convRule: rule22
  }, {
      start: 439, 
      length: 1, 
      convRule: rule44
  }, {
      start: 440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 447, 
      length: 1, 
      convRule: rule46
  }, {
      start: 452, 
      length: 1, 
      convRule: rule47
  }, {
      start: 453, 
      length: 1, 
      convRule: rule48
  }, {
      start: 454, 
      length: 1, 
      convRule: rule49
  }, {
      start: 455, 
      length: 1, 
      convRule: rule47
  }, {
      start: 456, 
      length: 1, 
      convRule: rule48
  }, {
      start: 457, 
      length: 1, 
      convRule: rule49
  }, {
      start: 458, 
      length: 1, 
      convRule: rule47
  }, {
      start: 459, 
      length: 1, 
      convRule: rule48
  }, {
      start: 460, 
      length: 1, 
      convRule: rule49
  }, {
      start: 461, 
      length: 1, 
      convRule: rule21
  }, {
      start: 462, 
      length: 1, 
      convRule: rule22
  }, {
      start: 463, 
      length: 1, 
      convRule: rule21
  }, {
      start: 464, 
      length: 1, 
      convRule: rule22
  }, {
      start: 465, 
      length: 1, 
      convRule: rule21
  }, {
      start: 466, 
      length: 1, 
      convRule: rule22
  }, {
      start: 467, 
      length: 1, 
      convRule: rule21
  }, {
      start: 468, 
      length: 1, 
      convRule: rule22
  }, {
      start: 469, 
      length: 1, 
      convRule: rule21
  }, {
      start: 470, 
      length: 1, 
      convRule: rule22
  }, {
      start: 471, 
      length: 1, 
      convRule: rule21
  }, {
      start: 472, 
      length: 1, 
      convRule: rule22
  }, {
      start: 473, 
      length: 1, 
      convRule: rule21
  }, {
      start: 474, 
      length: 1, 
      convRule: rule22
  }, {
      start: 475, 
      length: 1, 
      convRule: rule21
  }, {
      start: 476, 
      length: 1, 
      convRule: rule22
  }, {
      start: 477, 
      length: 1, 
      convRule: rule50
  }, {
      start: 478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 492, 
      length: 1, 
      convRule: rule21
  }, {
      start: 493, 
      length: 1, 
      convRule: rule22
  }, {
      start: 494, 
      length: 1, 
      convRule: rule21
  }, {
      start: 495, 
      length: 1, 
      convRule: rule22
  }, {
      start: 497, 
      length: 1, 
      convRule: rule47
  }, {
      start: 498, 
      length: 1, 
      convRule: rule48
  }, {
      start: 499, 
      length: 1, 
      convRule: rule49
  }, {
      start: 500, 
      length: 1, 
      convRule: rule21
  }, {
      start: 501, 
      length: 1, 
      convRule: rule22
  }, {
      start: 502, 
      length: 1, 
      convRule: rule51
  }, {
      start: 503, 
      length: 1, 
      convRule: rule52
  }, {
      start: 504, 
      length: 1, 
      convRule: rule21
  }, {
      start: 505, 
      length: 1, 
      convRule: rule22
  }, {
      start: 506, 
      length: 1, 
      convRule: rule21
  }, {
      start: 507, 
      length: 1, 
      convRule: rule22
  }, {
      start: 508, 
      length: 1, 
      convRule: rule21
  }, {
      start: 509, 
      length: 1, 
      convRule: rule22
  }, {
      start: 510, 
      length: 1, 
      convRule: rule21
  }, {
      start: 511, 
      length: 1, 
      convRule: rule22
  }, {
      start: 512, 
      length: 1, 
      convRule: rule21
  }, {
      start: 513, 
      length: 1, 
      convRule: rule22
  }, {
      start: 514, 
      length: 1, 
      convRule: rule21
  }, {
      start: 515, 
      length: 1, 
      convRule: rule22
  }, {
      start: 516, 
      length: 1, 
      convRule: rule21
  }, {
      start: 517, 
      length: 1, 
      convRule: rule22
  }, {
      start: 518, 
      length: 1, 
      convRule: rule21
  }, {
      start: 519, 
      length: 1, 
      convRule: rule22
  }, {
      start: 520, 
      length: 1, 
      convRule: rule21
  }, {
      start: 521, 
      length: 1, 
      convRule: rule22
  }, {
      start: 522, 
      length: 1, 
      convRule: rule21
  }, {
      start: 523, 
      length: 1, 
      convRule: rule22
  }, {
      start: 524, 
      length: 1, 
      convRule: rule21
  }, {
      start: 525, 
      length: 1, 
      convRule: rule22
  }, {
      start: 526, 
      length: 1, 
      convRule: rule21
  }, {
      start: 527, 
      length: 1, 
      convRule: rule22
  }, {
      start: 528, 
      length: 1, 
      convRule: rule21
  }, {
      start: 529, 
      length: 1, 
      convRule: rule22
  }, {
      start: 530, 
      length: 1, 
      convRule: rule21
  }, {
      start: 531, 
      length: 1, 
      convRule: rule22
  }, {
      start: 532, 
      length: 1, 
      convRule: rule21
  }, {
      start: 533, 
      length: 1, 
      convRule: rule22
  }, {
      start: 534, 
      length: 1, 
      convRule: rule21
  }, {
      start: 535, 
      length: 1, 
      convRule: rule22
  }, {
      start: 536, 
      length: 1, 
      convRule: rule21
  }, {
      start: 537, 
      length: 1, 
      convRule: rule22
  }, {
      start: 538, 
      length: 1, 
      convRule: rule21
  }, {
      start: 539, 
      length: 1, 
      convRule: rule22
  }, {
      start: 540, 
      length: 1, 
      convRule: rule21
  }, {
      start: 541, 
      length: 1, 
      convRule: rule22
  }, {
      start: 542, 
      length: 1, 
      convRule: rule21
  }, {
      start: 543, 
      length: 1, 
      convRule: rule22
  }, {
      start: 544, 
      length: 1, 
      convRule: rule53
  }, {
      start: 546, 
      length: 1, 
      convRule: rule21
  }, {
      start: 547, 
      length: 1, 
      convRule: rule22
  }, {
      start: 548, 
      length: 1, 
      convRule: rule21
  }, {
      start: 549, 
      length: 1, 
      convRule: rule22
  }, {
      start: 550, 
      length: 1, 
      convRule: rule21
  }, {
      start: 551, 
      length: 1, 
      convRule: rule22
  }, {
      start: 552, 
      length: 1, 
      convRule: rule21
  }, {
      start: 553, 
      length: 1, 
      convRule: rule22
  }, {
      start: 554, 
      length: 1, 
      convRule: rule21
  }, {
      start: 555, 
      length: 1, 
      convRule: rule22
  }, {
      start: 556, 
      length: 1, 
      convRule: rule21
  }, {
      start: 557, 
      length: 1, 
      convRule: rule22
  }, {
      start: 558, 
      length: 1, 
      convRule: rule21
  }, {
      start: 559, 
      length: 1, 
      convRule: rule22
  }, {
      start: 560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 570, 
      length: 1, 
      convRule: rule54
  }, {
      start: 571, 
      length: 1, 
      convRule: rule21
  }, {
      start: 572, 
      length: 1, 
      convRule: rule22
  }, {
      start: 573, 
      length: 1, 
      convRule: rule55
  }, {
      start: 574, 
      length: 1, 
      convRule: rule56
  }, {
      start: 575, 
      length: 2, 
      convRule: rule57
  }, {
      start: 577, 
      length: 1, 
      convRule: rule21
  }, {
      start: 578, 
      length: 1, 
      convRule: rule22
  }, {
      start: 579, 
      length: 1, 
      convRule: rule58
  }, {
      start: 580, 
      length: 1, 
      convRule: rule59
  }, {
      start: 581, 
      length: 1, 
      convRule: rule60
  }, {
      start: 582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 592, 
      length: 1, 
      convRule: rule61
  }, {
      start: 593, 
      length: 1, 
      convRule: rule62
  }, {
      start: 594, 
      length: 1, 
      convRule: rule63
  }, {
      start: 595, 
      length: 1, 
      convRule: rule64
  }, {
      start: 596, 
      length: 1, 
      convRule: rule65
  }, {
      start: 598, 
      length: 2, 
      convRule: rule66
  }, {
      start: 601, 
      length: 1, 
      convRule: rule67
  }, {
      start: 603, 
      length: 1, 
      convRule: rule68
  }, {
      start: 608, 
      length: 1, 
      convRule: rule66
  }, {
      start: 611, 
      length: 1, 
      convRule: rule69
  }, {
      start: 613, 
      length: 1, 
      convRule: rule70
  }, {
      start: 616, 
      length: 1, 
      convRule: rule71
  }, {
      start: 617, 
      length: 1, 
      convRule: rule72
  }, {
      start: 619, 
      length: 1, 
      convRule: rule73
  }, {
      start: 623, 
      length: 1, 
      convRule: rule72
  }, {
      start: 625, 
      length: 1, 
      convRule: rule74
  }, {
      start: 626, 
      length: 1, 
      convRule: rule75
  }, {
      start: 629, 
      length: 1, 
      convRule: rule76
  }, {
      start: 637, 
      length: 1, 
      convRule: rule77
  }, {
      start: 640, 
      length: 1, 
      convRule: rule78
  }, {
      start: 643, 
      length: 1, 
      convRule: rule78
  }, {
      start: 648, 
      length: 1, 
      convRule: rule78
  }, {
      start: 649, 
      length: 1, 
      convRule: rule79
  }, {
      start: 650, 
      length: 2, 
      convRule: rule80
  }, {
      start: 652, 
      length: 1, 
      convRule: rule81
  }, {
      start: 658, 
      length: 1, 
      convRule: rule82
  }, {
      start: 837, 
      length: 1, 
      convRule: rule85
  }, {
      start: 880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 891, 
      length: 3, 
      convRule: rule40
  }, {
      start: 902, 
      length: 1, 
      convRule: rule86
  }, {
      start: 904, 
      length: 3, 
      convRule: rule87
  }, {
      start: 908, 
      length: 1, 
      convRule: rule88
  }, {
      start: 910, 
      length: 2, 
      convRule: rule89
  }, {
      start: 913, 
      length: 17, 
      convRule: rule9
  }, {
      start: 931, 
      length: 9, 
      convRule: rule9
  }, {
      start: 940, 
      length: 1, 
      convRule: rule90
  }, {
      start: 941, 
      length: 3, 
      convRule: rule91
  }, {
      start: 945, 
      length: 17, 
      convRule: rule12
  }, {
      start: 962, 
      length: 1, 
      convRule: rule92
  }, {
      start: 963, 
      length: 9, 
      convRule: rule12
  }, {
      start: 972, 
      length: 1, 
      convRule: rule93
  }, {
      start: 973, 
      length: 2, 
      convRule: rule94
  }, {
      start: 975, 
      length: 1, 
      convRule: rule95
  }, {
      start: 976, 
      length: 1, 
      convRule: rule96
  }, {
      start: 977, 
      length: 1, 
      convRule: rule97
  }, {
      start: 981, 
      length: 1, 
      convRule: rule99
  }, {
      start: 982, 
      length: 1, 
      convRule: rule100
  }, {
      start: 983, 
      length: 1, 
      convRule: rule101
  }, {
      start: 984, 
      length: 1, 
      convRule: rule21
  }, {
      start: 985, 
      length: 1, 
      convRule: rule22
  }, {
      start: 986, 
      length: 1, 
      convRule: rule21
  }, {
      start: 987, 
      length: 1, 
      convRule: rule22
  }, {
      start: 988, 
      length: 1, 
      convRule: rule21
  }, {
      start: 989, 
      length: 1, 
      convRule: rule22
  }, {
      start: 990, 
      length: 1, 
      convRule: rule21
  }, {
      start: 991, 
      length: 1, 
      convRule: rule22
  }, {
      start: 992, 
      length: 1, 
      convRule: rule21
  }, {
      start: 993, 
      length: 1, 
      convRule: rule22
  }, {
      start: 994, 
      length: 1, 
      convRule: rule21
  }, {
      start: 995, 
      length: 1, 
      convRule: rule22
  }, {
      start: 996, 
      length: 1, 
      convRule: rule21
  }, {
      start: 997, 
      length: 1, 
      convRule: rule22
  }, {
      start: 998, 
      length: 1, 
      convRule: rule21
  }, {
      start: 999, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1000, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1001, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1002, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1003, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1004, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1005, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1006, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1007, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1008, 
      length: 1, 
      convRule: rule102
  }, {
      start: 1009, 
      length: 1, 
      convRule: rule103
  }, {
      start: 1010, 
      length: 1, 
      convRule: rule104
  }, {
      start: 1012, 
      length: 1, 
      convRule: rule105
  }, {
      start: 1013, 
      length: 1, 
      convRule: rule106
  }, {
      start: 1015, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1016, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1017, 
      length: 1, 
      convRule: rule107
  }, {
      start: 1018, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1019, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1021, 
      length: 3, 
      convRule: rule53
  }, {
      start: 1024, 
      length: 16, 
      convRule: rule108
  }, {
      start: 1040, 
      length: 32, 
      convRule: rule9
  }, {
      start: 1072, 
      length: 32, 
      convRule: rule12
  }, {
      start: 1104, 
      length: 16, 
      convRule: rule103
  }, {
      start: 1120, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1121, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1122, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1123, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1124, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1125, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1126, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1127, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1128, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1129, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1130, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1131, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1132, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1133, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1134, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1135, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1136, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1137, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1138, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1139, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1140, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1141, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1142, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1143, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1144, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1145, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1146, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1147, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1148, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1149, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1150, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1151, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1152, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1153, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1162, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1163, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1164, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1165, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1166, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1167, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1168, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1169, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1170, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1171, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1172, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1173, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1174, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1175, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1176, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1177, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1178, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1179, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1180, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1181, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1182, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1183, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1184, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1185, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1186, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1187, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1188, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1189, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1190, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1191, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1192, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1193, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1194, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1195, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1196, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1197, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1198, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1199, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1200, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1201, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1202, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1203, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1204, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1205, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1206, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1207, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1208, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1209, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1210, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1211, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1212, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1213, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1214, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1215, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1216, 
      length: 1, 
      convRule: rule110
  }, {
      start: 1217, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1218, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1219, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1220, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1221, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1222, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1223, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1224, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1225, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1226, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1227, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1228, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1229, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1230, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1231, 
      length: 1, 
      convRule: rule111
  }, {
      start: 1232, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1233, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1234, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1235, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1236, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1237, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1238, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1239, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1240, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1241, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1242, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1243, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1244, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1245, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1246, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1247, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1248, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1249, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1250, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1251, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1252, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1253, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1254, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1255, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1304, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1305, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1312, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1313, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1314, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1315, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1316, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1317, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1318, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1319, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1329, 
      length: 38, 
      convRule: rule112
  }, {
      start: 1377, 
      length: 38, 
      convRule: rule113
  }, {
      start: 4256, 
      length: 38, 
      convRule: rule115
  }, {
      start: 7545, 
      length: 1, 
      convRule: rule117
  }, {
      start: 7549, 
      length: 1, 
      convRule: rule118
  }, {
      start: 7680, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7681, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7682, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7683, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7684, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7685, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7686, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7687, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7688, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7689, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7690, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7691, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7692, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7693, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7694, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7695, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7696, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7697, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7698, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7699, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7700, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7701, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7702, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7703, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7704, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7705, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7706, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7707, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7708, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7709, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7710, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7711, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7712, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7713, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7714, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7715, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7716, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7717, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7718, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7719, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7720, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7721, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7722, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7723, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7724, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7725, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7726, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7727, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7728, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7729, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7730, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7731, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7732, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7733, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7734, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7735, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7736, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7737, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7738, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7739, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7740, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7741, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7742, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7743, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7744, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7745, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7746, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7747, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7748, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7749, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7750, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7751, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7752, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7753, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7754, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7755, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7756, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7757, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7758, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7759, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7760, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7761, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7762, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7763, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7764, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7765, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7766, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7767, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7768, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7769, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7770, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7771, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7772, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7773, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7774, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7775, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7776, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7777, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7778, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7779, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7780, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7781, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7782, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7783, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7784, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7785, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7800, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7801, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7835, 
      length: 1, 
      convRule: rule119
  }, {
      start: 7838, 
      length: 1, 
      convRule: rule120
  }, {
      start: 7840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7864, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7865, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7866, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7867, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7868, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7869, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7870, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7871, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7872, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7873, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7874, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7875, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7876, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7877, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7888, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7889, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7890, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7891, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7892, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7893, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7894, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7895, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7898, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7899, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7900, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7901, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7902, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7903, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7904, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7905, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7906, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7907, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7908, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7909, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7910, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7911, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7922, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7923, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7924, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7925, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7926, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7927, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7928, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7929, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7930, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7931, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7932, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7933, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7934, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7935, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7936, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7944, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7952, 
      length: 6, 
      convRule: rule121
  }, {
      start: 7960, 
      length: 6, 
      convRule: rule122
  }, {
      start: 7968, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7976, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7984, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7992, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8000, 
      length: 6, 
      convRule: rule121
  }, {
      start: 8008, 
      length: 6, 
      convRule: rule122
  }, {
      start: 8017, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8019, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8021, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8023, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8025, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8027, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8029, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8031, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8032, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8040, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8048, 
      length: 2, 
      convRule: rule123
  }, {
      start: 8050, 
      length: 4, 
      convRule: rule124
  }, {
      start: 8054, 
      length: 2, 
      convRule: rule125
  }, {
      start: 8056, 
      length: 2, 
      convRule: rule126
  }, {
      start: 8058, 
      length: 2, 
      convRule: rule127
  }, {
      start: 8060, 
      length: 2, 
      convRule: rule128
  }, {
      start: 8064, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8072, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8080, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8088, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8096, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8104, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8112, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8115, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8120, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8122, 
      length: 2, 
      convRule: rule131
  }, {
      start: 8124, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8126, 
      length: 1, 
      convRule: rule133
  }, {
      start: 8131, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8136, 
      length: 4, 
      convRule: rule134
  }, {
      start: 8140, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8144, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8152, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8154, 
      length: 2, 
      convRule: rule135
  }, {
      start: 8160, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8165, 
      length: 1, 
      convRule: rule104
  }, {
      start: 8168, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8170, 
      length: 2, 
      convRule: rule136
  }, {
      start: 8172, 
      length: 1, 
      convRule: rule107
  }, {
      start: 8179, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8184, 
      length: 2, 
      convRule: rule137
  }, {
      start: 8186, 
      length: 2, 
      convRule: rule138
  }, {
      start: 8188, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8486, 
      length: 1, 
      convRule: rule141
  }, {
      start: 8490, 
      length: 1, 
      convRule: rule142
  }, {
      start: 8491, 
      length: 1, 
      convRule: rule143
  }, {
      start: 8498, 
      length: 1, 
      convRule: rule144
  }, {
      start: 8526, 
      length: 1, 
      convRule: rule145
  }, {
      start: 8544, 
      length: 16, 
      convRule: rule146
  }, {
      start: 8560, 
      length: 16, 
      convRule: rule147
  }, {
      start: 8579, 
      length: 1, 
      convRule: rule21
  }, {
      start: 8580, 
      length: 1, 
      convRule: rule22
  }, {
      start: 9398, 
      length: 26, 
      convRule: rule148
  }, {
      start: 9424, 
      length: 26, 
      convRule: rule149
  }, {
      start: 11264, 
      length: 47, 
      convRule: rule112
  }, {
      start: 11312, 
      length: 47, 
      convRule: rule113
  }, {
      start: 11360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11362, 
      length: 1, 
      convRule: rule150
  }, {
      start: 11363, 
      length: 1, 
      convRule: rule151
  }, {
      start: 11364, 
      length: 1, 
      convRule: rule152
  }, {
      start: 11365, 
      length: 1, 
      convRule: rule153
  }, {
      start: 11366, 
      length: 1, 
      convRule: rule154
  }, {
      start: 11367, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11368, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11369, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11370, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11371, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11372, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11373, 
      length: 1, 
      convRule: rule155
  }, {
      start: 11374, 
      length: 1, 
      convRule: rule156
  }, {
      start: 11375, 
      length: 1, 
      convRule: rule157
  }, {
      start: 11376, 
      length: 1, 
      convRule: rule158
  }, {
      start: 11378, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11379, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11390, 
      length: 2, 
      convRule: rule159
  }, {
      start: 11392, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11393, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11394, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11395, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11396, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11397, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11398, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11399, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11400, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11401, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11402, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11403, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11404, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11405, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11406, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11407, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11410, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11411, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11412, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11413, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11414, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11415, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11422, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11423, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11424, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11425, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11426, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11427, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11430, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11431, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11432, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11433, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11434, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11435, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11436, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11437, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11438, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11439, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11442, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11443, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11446, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11447, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11448, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11449, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11450, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11451, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11452, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11453, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11454, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11455, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11456, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11457, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11458, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11459, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11460, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11461, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11462, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11463, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11464, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11465, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11466, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11467, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11468, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11469, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11470, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11471, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11472, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11473, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11474, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11475, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11476, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11477, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11499, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11500, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11501, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11502, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11520, 
      length: 38, 
      convRule: rule160
  }, {
      start: 42560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42564, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42565, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42566, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42567, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42568, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42569, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42570, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42571, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42572, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42573, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42574, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42575, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42576, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42577, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42578, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42579, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42580, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42581, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42592, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42593, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42594, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42595, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42596, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42597, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42598, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42599, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42600, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42601, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42602, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42603, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42604, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42605, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42624, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42625, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42626, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42627, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42628, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42629, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42630, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42631, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42632, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42633, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42634, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42635, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42636, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42637, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42638, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42639, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42640, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42641, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42642, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42643, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42644, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42645, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42646, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42647, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42830, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42831, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42832, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42833, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42834, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42835, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42836, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42837, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42838, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42839, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42873, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42874, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42875, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42876, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42877, 
      length: 1, 
      convRule: rule161
  }, {
      start: 42878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42891, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42892, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42893, 
      length: 1, 
      convRule: rule162
  }, {
      start: 42896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 65313, 
      length: 26, 
      convRule: rule9
  }, {
      start: 65345, 
      length: 26, 
      convRule: rule12
  }, {
      start: 66560, 
      length: 40, 
      convRule: rule165
  }, {
      start: 66600, 
      length: 40, 
      convRule: rule166
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (v) {
              return function (compare) {
                  return Data_Foldable.find(Data_Foldable.foldableArray)(function (testA) {
                      return compare(a)(testA) === 0;
                  })(array);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return 0;
          };
          if (v.start > v1.start) {
              return 1;
          };
          if (Data_Boolean.otherwise) {
              return -1;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4759, column 1 - line 4765, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar, 
                  length: 1, 
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4771, column 8 - line 4773, column 62: " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4843, column 8 - line 4845, column 55: " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowupper = caseConv(function (v) {
      return v.updist;
  });
  var checkAttrS = function (categories) {
      return function ($$char) {
          var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories);
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4800, column 8 - line 4802, column 72: " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswspace = checkAttrS([ gencatZS ]);
  var allchars = [ {
      start: 0, 
      length: 32, 
      convRule: rule0
  }, {
      start: 32, 
      length: 1, 
      convRule: rule1
  }, {
      start: 33, 
      length: 3, 
      convRule: rule2
  }, {
      start: 36, 
      length: 1, 
      convRule: rule3
  }, {
      start: 37, 
      length: 3, 
      convRule: rule2
  }, {
      start: 40, 
      length: 1, 
      convRule: rule4
  }, {
      start: 41, 
      length: 1, 
      convRule: rule5
  }, {
      start: 42, 
      length: 1, 
      convRule: rule2
  }, {
      start: 43, 
      length: 1, 
      convRule: rule6
  }, {
      start: 44, 
      length: 1, 
      convRule: rule2
  }, {
      start: 45, 
      length: 1, 
      convRule: rule7
  }, {
      start: 46, 
      length: 2, 
      convRule: rule2
  }, {
      start: 48, 
      length: 10, 
      convRule: rule8
  }, {
      start: 58, 
      length: 2, 
      convRule: rule2
  }, {
      start: 60, 
      length: 3, 
      convRule: rule6
  }, {
      start: 63, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65, 
      length: 26, 
      convRule: rule9
  }, {
      start: 91, 
      length: 1, 
      convRule: rule4
  }, {
      start: 92, 
      length: 1, 
      convRule: rule2
  }, {
      start: 93, 
      length: 1, 
      convRule: rule5
  }, {
      start: 94, 
      length: 1, 
      convRule: rule10
  }, {
      start: 95, 
      length: 1, 
      convRule: rule11
  }, {
      start: 96, 
      length: 1, 
      convRule: rule10
  }, {
      start: 97, 
      length: 26, 
      convRule: rule12
  }, {
      start: 123, 
      length: 1, 
      convRule: rule4
  }, {
      start: 124, 
      length: 1, 
      convRule: rule6
  }, {
      start: 125, 
      length: 1, 
      convRule: rule5
  }, {
      start: 126, 
      length: 1, 
      convRule: rule6
  }, {
      start: 127, 
      length: 33, 
      convRule: rule0
  }, {
      start: 160, 
      length: 1, 
      convRule: rule1
  }, {
      start: 161, 
      length: 1, 
      convRule: rule2
  }, {
      start: 162, 
      length: 4, 
      convRule: rule3
  }, {
      start: 166, 
      length: 2, 
      convRule: rule13
  }, {
      start: 168, 
      length: 1, 
      convRule: rule10
  }, {
      start: 169, 
      length: 1, 
      convRule: rule13
  }, {
      start: 170, 
      length: 1, 
      convRule: rule14
  }, {
      start: 171, 
      length: 1, 
      convRule: rule15
  }, {
      start: 172, 
      length: 1, 
      convRule: rule6
  }, {
      start: 173, 
      length: 1, 
      convRule: rule16
  }, {
      start: 174, 
      length: 1, 
      convRule: rule13
  }, {
      start: 175, 
      length: 1, 
      convRule: rule10
  }, {
      start: 176, 
      length: 1, 
      convRule: rule13
  }, {
      start: 177, 
      length: 1, 
      convRule: rule6
  }, {
      start: 178, 
      length: 2, 
      convRule: rule17
  }, {
      start: 180, 
      length: 1, 
      convRule: rule10
  }, {
      start: 181, 
      length: 1, 
      convRule: rule18
  }, {
      start: 182, 
      length: 1, 
      convRule: rule13
  }, {
      start: 183, 
      length: 1, 
      convRule: rule2
  }, {
      start: 184, 
      length: 1, 
      convRule: rule10
  }, {
      start: 185, 
      length: 1, 
      convRule: rule17
  }, {
      start: 186, 
      length: 1, 
      convRule: rule14
  }, {
      start: 187, 
      length: 1, 
      convRule: rule19
  }, {
      start: 188, 
      length: 3, 
      convRule: rule17
  }, {
      start: 191, 
      length: 1, 
      convRule: rule2
  }, {
      start: 192, 
      length: 23, 
      convRule: rule9
  }, {
      start: 215, 
      length: 1, 
      convRule: rule6
  }, {
      start: 216, 
      length: 7, 
      convRule: rule9
  }, {
      start: 223, 
      length: 1, 
      convRule: rule14
  }, {
      start: 224, 
      length: 23, 
      convRule: rule12
  }, {
      start: 247, 
      length: 1, 
      convRule: rule6
  }, {
      start: 248, 
      length: 7, 
      convRule: rule12
  }, {
      start: 255, 
      length: 1, 
      convRule: rule20
  }, {
      start: 256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 304, 
      length: 1, 
      convRule: rule23
  }, {
      start: 305, 
      length: 1, 
      convRule: rule24
  }, {
      start: 306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 312, 
      length: 1, 
      convRule: rule14
  }, {
      start: 313, 
      length: 1, 
      convRule: rule21
  }, {
      start: 314, 
      length: 1, 
      convRule: rule22
  }, {
      start: 315, 
      length: 1, 
      convRule: rule21
  }, {
      start: 316, 
      length: 1, 
      convRule: rule22
  }, {
      start: 317, 
      length: 1, 
      convRule: rule21
  }, {
      start: 318, 
      length: 1, 
      convRule: rule22
  }, {
      start: 319, 
      length: 1, 
      convRule: rule21
  }, {
      start: 320, 
      length: 1, 
      convRule: rule22
  }, {
      start: 321, 
      length: 1, 
      convRule: rule21
  }, {
      start: 322, 
      length: 1, 
      convRule: rule22
  }, {
      start: 323, 
      length: 1, 
      convRule: rule21
  }, {
      start: 324, 
      length: 1, 
      convRule: rule22
  }, {
      start: 325, 
      length: 1, 
      convRule: rule21
  }, {
      start: 326, 
      length: 1, 
      convRule: rule22
  }, {
      start: 327, 
      length: 1, 
      convRule: rule21
  }, {
      start: 328, 
      length: 1, 
      convRule: rule22
  }, {
      start: 329, 
      length: 1, 
      convRule: rule14
  }, {
      start: 330, 
      length: 1, 
      convRule: rule21
  }, {
      start: 331, 
      length: 1, 
      convRule: rule22
  }, {
      start: 332, 
      length: 1, 
      convRule: rule21
  }, {
      start: 333, 
      length: 1, 
      convRule: rule22
  }, {
      start: 334, 
      length: 1, 
      convRule: rule21
  }, {
      start: 335, 
      length: 1, 
      convRule: rule22
  }, {
      start: 336, 
      length: 1, 
      convRule: rule21
  }, {
      start: 337, 
      length: 1, 
      convRule: rule22
  }, {
      start: 338, 
      length: 1, 
      convRule: rule21
  }, {
      start: 339, 
      length: 1, 
      convRule: rule22
  }, {
      start: 340, 
      length: 1, 
      convRule: rule21
  }, {
      start: 341, 
      length: 1, 
      convRule: rule22
  }, {
      start: 342, 
      length: 1, 
      convRule: rule21
  }, {
      start: 343, 
      length: 1, 
      convRule: rule22
  }, {
      start: 344, 
      length: 1, 
      convRule: rule21
  }, {
      start: 345, 
      length: 1, 
      convRule: rule22
  }, {
      start: 346, 
      length: 1, 
      convRule: rule21
  }, {
      start: 347, 
      length: 1, 
      convRule: rule22
  }, {
      start: 348, 
      length: 1, 
      convRule: rule21
  }, {
      start: 349, 
      length: 1, 
      convRule: rule22
  }, {
      start: 350, 
      length: 1, 
      convRule: rule21
  }, {
      start: 351, 
      length: 1, 
      convRule: rule22
  }, {
      start: 352, 
      length: 1, 
      convRule: rule21
  }, {
      start: 353, 
      length: 1, 
      convRule: rule22
  }, {
      start: 354, 
      length: 1, 
      convRule: rule21
  }, {
      start: 355, 
      length: 1, 
      convRule: rule22
  }, {
      start: 356, 
      length: 1, 
      convRule: rule21
  }, {
      start: 357, 
      length: 1, 
      convRule: rule22
  }, {
      start: 358, 
      length: 1, 
      convRule: rule21
  }, {
      start: 359, 
      length: 1, 
      convRule: rule22
  }, {
      start: 360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 362, 
      length: 1, 
      convRule: rule21
  }, {
      start: 363, 
      length: 1, 
      convRule: rule22
  }, {
      start: 364, 
      length: 1, 
      convRule: rule21
  }, {
      start: 365, 
      length: 1, 
      convRule: rule22
  }, {
      start: 366, 
      length: 1, 
      convRule: rule21
  }, {
      start: 367, 
      length: 1, 
      convRule: rule22
  }, {
      start: 368, 
      length: 1, 
      convRule: rule21
  }, {
      start: 369, 
      length: 1, 
      convRule: rule22
  }, {
      start: 370, 
      length: 1, 
      convRule: rule21
  }, {
      start: 371, 
      length: 1, 
      convRule: rule22
  }, {
      start: 372, 
      length: 1, 
      convRule: rule21
  }, {
      start: 373, 
      length: 1, 
      convRule: rule22
  }, {
      start: 374, 
      length: 1, 
      convRule: rule21
  }, {
      start: 375, 
      length: 1, 
      convRule: rule22
  }, {
      start: 376, 
      length: 1, 
      convRule: rule25
  }, {
      start: 377, 
      length: 1, 
      convRule: rule21
  }, {
      start: 378, 
      length: 1, 
      convRule: rule22
  }, {
      start: 379, 
      length: 1, 
      convRule: rule21
  }, {
      start: 380, 
      length: 1, 
      convRule: rule22
  }, {
      start: 381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 383, 
      length: 1, 
      convRule: rule26
  }, {
      start: 384, 
      length: 1, 
      convRule: rule27
  }, {
      start: 385, 
      length: 1, 
      convRule: rule28
  }, {
      start: 386, 
      length: 1, 
      convRule: rule21
  }, {
      start: 387, 
      length: 1, 
      convRule: rule22
  }, {
      start: 388, 
      length: 1, 
      convRule: rule21
  }, {
      start: 389, 
      length: 1, 
      convRule: rule22
  }, {
      start: 390, 
      length: 1, 
      convRule: rule29
  }, {
      start: 391, 
      length: 1, 
      convRule: rule21
  }, {
      start: 392, 
      length: 1, 
      convRule: rule22
  }, {
      start: 393, 
      length: 2, 
      convRule: rule30
  }, {
      start: 395, 
      length: 1, 
      convRule: rule21
  }, {
      start: 396, 
      length: 1, 
      convRule: rule22
  }, {
      start: 397, 
      length: 1, 
      convRule: rule14
  }, {
      start: 398, 
      length: 1, 
      convRule: rule31
  }, {
      start: 399, 
      length: 1, 
      convRule: rule32
  }, {
      start: 400, 
      length: 1, 
      convRule: rule33
  }, {
      start: 401, 
      length: 1, 
      convRule: rule21
  }, {
      start: 402, 
      length: 1, 
      convRule: rule22
  }, {
      start: 403, 
      length: 1, 
      convRule: rule30
  }, {
      start: 404, 
      length: 1, 
      convRule: rule34
  }, {
      start: 405, 
      length: 1, 
      convRule: rule35
  }, {
      start: 406, 
      length: 1, 
      convRule: rule36
  }, {
      start: 407, 
      length: 1, 
      convRule: rule37
  }, {
      start: 408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 410, 
      length: 1, 
      convRule: rule38
  }, {
      start: 411, 
      length: 1, 
      convRule: rule14
  }, {
      start: 412, 
      length: 1, 
      convRule: rule36
  }, {
      start: 413, 
      length: 1, 
      convRule: rule39
  }, {
      start: 414, 
      length: 1, 
      convRule: rule40
  }, {
      start: 415, 
      length: 1, 
      convRule: rule41
  }, {
      start: 416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 422, 
      length: 1, 
      convRule: rule42
  }, {
      start: 423, 
      length: 1, 
      convRule: rule21
  }, {
      start: 424, 
      length: 1, 
      convRule: rule22
  }, {
      start: 425, 
      length: 1, 
      convRule: rule42
  }, {
      start: 426, 
      length: 2, 
      convRule: rule14
  }, {
      start: 428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 430, 
      length: 1, 
      convRule: rule42
  }, {
      start: 431, 
      length: 1, 
      convRule: rule21
  }, {
      start: 432, 
      length: 1, 
      convRule: rule22
  }, {
      start: 433, 
      length: 2, 
      convRule: rule43
  }, {
      start: 435, 
      length: 1, 
      convRule: rule21
  }, {
      start: 436, 
      length: 1, 
      convRule: rule22
  }, {
      start: 437, 
      length: 1, 
      convRule: rule21
  }, {
      start: 438, 
      length: 1, 
      convRule: rule22
  }, {
      start: 439, 
      length: 1, 
      convRule: rule44
  }, {
      start: 440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 442, 
      length: 1, 
      convRule: rule14
  }, {
      start: 443, 
      length: 1, 
      convRule: rule45
  }, {
      start: 444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 446, 
      length: 1, 
      convRule: rule14
  }, {
      start: 447, 
      length: 1, 
      convRule: rule46
  }, {
      start: 448, 
      length: 4, 
      convRule: rule45
  }, {
      start: 452, 
      length: 1, 
      convRule: rule47
  }, {
      start: 453, 
      length: 1, 
      convRule: rule48
  }, {
      start: 454, 
      length: 1, 
      convRule: rule49
  }, {
      start: 455, 
      length: 1, 
      convRule: rule47
  }, {
      start: 456, 
      length: 1, 
      convRule: rule48
  }, {
      start: 457, 
      length: 1, 
      convRule: rule49
  }, {
      start: 458, 
      length: 1, 
      convRule: rule47
  }, {
      start: 459, 
      length: 1, 
      convRule: rule48
  }, {
      start: 460, 
      length: 1, 
      convRule: rule49
  }, {
      start: 461, 
      length: 1, 
      convRule: rule21
  }, {
      start: 462, 
      length: 1, 
      convRule: rule22
  }, {
      start: 463, 
      length: 1, 
      convRule: rule21
  }, {
      start: 464, 
      length: 1, 
      convRule: rule22
  }, {
      start: 465, 
      length: 1, 
      convRule: rule21
  }, {
      start: 466, 
      length: 1, 
      convRule: rule22
  }, {
      start: 467, 
      length: 1, 
      convRule: rule21
  }, {
      start: 468, 
      length: 1, 
      convRule: rule22
  }, {
      start: 469, 
      length: 1, 
      convRule: rule21
  }, {
      start: 470, 
      length: 1, 
      convRule: rule22
  }, {
      start: 471, 
      length: 1, 
      convRule: rule21
  }, {
      start: 472, 
      length: 1, 
      convRule: rule22
  }, {
      start: 473, 
      length: 1, 
      convRule: rule21
  }, {
      start: 474, 
      length: 1, 
      convRule: rule22
  }, {
      start: 475, 
      length: 1, 
      convRule: rule21
  }, {
      start: 476, 
      length: 1, 
      convRule: rule22
  }, {
      start: 477, 
      length: 1, 
      convRule: rule50
  }, {
      start: 478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 492, 
      length: 1, 
      convRule: rule21
  }, {
      start: 493, 
      length: 1, 
      convRule: rule22
  }, {
      start: 494, 
      length: 1, 
      convRule: rule21
  }, {
      start: 495, 
      length: 1, 
      convRule: rule22
  }, {
      start: 496, 
      length: 1, 
      convRule: rule14
  }, {
      start: 497, 
      length: 1, 
      convRule: rule47
  }, {
      start: 498, 
      length: 1, 
      convRule: rule48
  }, {
      start: 499, 
      length: 1, 
      convRule: rule49
  }, {
      start: 500, 
      length: 1, 
      convRule: rule21
  }, {
      start: 501, 
      length: 1, 
      convRule: rule22
  }, {
      start: 502, 
      length: 1, 
      convRule: rule51
  }, {
      start: 503, 
      length: 1, 
      convRule: rule52
  }, {
      start: 504, 
      length: 1, 
      convRule: rule21
  }, {
      start: 505, 
      length: 1, 
      convRule: rule22
  }, {
      start: 506, 
      length: 1, 
      convRule: rule21
  }, {
      start: 507, 
      length: 1, 
      convRule: rule22
  }, {
      start: 508, 
      length: 1, 
      convRule: rule21
  }, {
      start: 509, 
      length: 1, 
      convRule: rule22
  }, {
      start: 510, 
      length: 1, 
      convRule: rule21
  }, {
      start: 511, 
      length: 1, 
      convRule: rule22
  }, {
      start: 512, 
      length: 1, 
      convRule: rule21
  }, {
      start: 513, 
      length: 1, 
      convRule: rule22
  }, {
      start: 514, 
      length: 1, 
      convRule: rule21
  }, {
      start: 515, 
      length: 1, 
      convRule: rule22
  }, {
      start: 516, 
      length: 1, 
      convRule: rule21
  }, {
      start: 517, 
      length: 1, 
      convRule: rule22
  }, {
      start: 518, 
      length: 1, 
      convRule: rule21
  }, {
      start: 519, 
      length: 1, 
      convRule: rule22
  }, {
      start: 520, 
      length: 1, 
      convRule: rule21
  }, {
      start: 521, 
      length: 1, 
      convRule: rule22
  }, {
      start: 522, 
      length: 1, 
      convRule: rule21
  }, {
      start: 523, 
      length: 1, 
      convRule: rule22
  }, {
      start: 524, 
      length: 1, 
      convRule: rule21
  }, {
      start: 525, 
      length: 1, 
      convRule: rule22
  }, {
      start: 526, 
      length: 1, 
      convRule: rule21
  }, {
      start: 527, 
      length: 1, 
      convRule: rule22
  }, {
      start: 528, 
      length: 1, 
      convRule: rule21
  }, {
      start: 529, 
      length: 1, 
      convRule: rule22
  }, {
      start: 530, 
      length: 1, 
      convRule: rule21
  }, {
      start: 531, 
      length: 1, 
      convRule: rule22
  }, {
      start: 532, 
      length: 1, 
      convRule: rule21
  }, {
      start: 533, 
      length: 1, 
      convRule: rule22
  }, {
      start: 534, 
      length: 1, 
      convRule: rule21
  }, {
      start: 535, 
      length: 1, 
      convRule: rule22
  }, {
      start: 536, 
      length: 1, 
      convRule: rule21
  }, {
      start: 537, 
      length: 1, 
      convRule: rule22
  }, {
      start: 538, 
      length: 1, 
      convRule: rule21
  }, {
      start: 539, 
      length: 1, 
      convRule: rule22
  }, {
      start: 540, 
      length: 1, 
      convRule: rule21
  }, {
      start: 541, 
      length: 1, 
      convRule: rule22
  }, {
      start: 542, 
      length: 1, 
      convRule: rule21
  }, {
      start: 543, 
      length: 1, 
      convRule: rule22
  }, {
      start: 544, 
      length: 1, 
      convRule: rule53
  }, {
      start: 545, 
      length: 1, 
      convRule: rule14
  }, {
      start: 546, 
      length: 1, 
      convRule: rule21
  }, {
      start: 547, 
      length: 1, 
      convRule: rule22
  }, {
      start: 548, 
      length: 1, 
      convRule: rule21
  }, {
      start: 549, 
      length: 1, 
      convRule: rule22
  }, {
      start: 550, 
      length: 1, 
      convRule: rule21
  }, {
      start: 551, 
      length: 1, 
      convRule: rule22
  }, {
      start: 552, 
      length: 1, 
      convRule: rule21
  }, {
      start: 553, 
      length: 1, 
      convRule: rule22
  }, {
      start: 554, 
      length: 1, 
      convRule: rule21
  }, {
      start: 555, 
      length: 1, 
      convRule: rule22
  }, {
      start: 556, 
      length: 1, 
      convRule: rule21
  }, {
      start: 557, 
      length: 1, 
      convRule: rule22
  }, {
      start: 558, 
      length: 1, 
      convRule: rule21
  }, {
      start: 559, 
      length: 1, 
      convRule: rule22
  }, {
      start: 560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 564, 
      length: 6, 
      convRule: rule14
  }, {
      start: 570, 
      length: 1, 
      convRule: rule54
  }, {
      start: 571, 
      length: 1, 
      convRule: rule21
  }, {
      start: 572, 
      length: 1, 
      convRule: rule22
  }, {
      start: 573, 
      length: 1, 
      convRule: rule55
  }, {
      start: 574, 
      length: 1, 
      convRule: rule56
  }, {
      start: 575, 
      length: 2, 
      convRule: rule57
  }, {
      start: 577, 
      length: 1, 
      convRule: rule21
  }, {
      start: 578, 
      length: 1, 
      convRule: rule22
  }, {
      start: 579, 
      length: 1, 
      convRule: rule58
  }, {
      start: 580, 
      length: 1, 
      convRule: rule59
  }, {
      start: 581, 
      length: 1, 
      convRule: rule60
  }, {
      start: 582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 592, 
      length: 1, 
      convRule: rule61
  }, {
      start: 593, 
      length: 1, 
      convRule: rule62
  }, {
      start: 594, 
      length: 1, 
      convRule: rule63
  }, {
      start: 595, 
      length: 1, 
      convRule: rule64
  }, {
      start: 596, 
      length: 1, 
      convRule: rule65
  }, {
      start: 597, 
      length: 1, 
      convRule: rule14
  }, {
      start: 598, 
      length: 2, 
      convRule: rule66
  }, {
      start: 600, 
      length: 1, 
      convRule: rule14
  }, {
      start: 601, 
      length: 1, 
      convRule: rule67
  }, {
      start: 602, 
      length: 1, 
      convRule: rule14
  }, {
      start: 603, 
      length: 1, 
      convRule: rule68
  }, {
      start: 604, 
      length: 4, 
      convRule: rule14
  }, {
      start: 608, 
      length: 1, 
      convRule: rule66
  }, {
      start: 609, 
      length: 2, 
      convRule: rule14
  }, {
      start: 611, 
      length: 1, 
      convRule: rule69
  }, {
      start: 612, 
      length: 1, 
      convRule: rule14
  }, {
      start: 613, 
      length: 1, 
      convRule: rule70
  }, {
      start: 614, 
      length: 2, 
      convRule: rule14
  }, {
      start: 616, 
      length: 1, 
      convRule: rule71
  }, {
      start: 617, 
      length: 1, 
      convRule: rule72
  }, {
      start: 618, 
      length: 1, 
      convRule: rule14
  }, {
      start: 619, 
      length: 1, 
      convRule: rule73
  }, {
      start: 620, 
      length: 3, 
      convRule: rule14
  }, {
      start: 623, 
      length: 1, 
      convRule: rule72
  }, {
      start: 624, 
      length: 1, 
      convRule: rule14
  }, {
      start: 625, 
      length: 1, 
      convRule: rule74
  }, {
      start: 626, 
      length: 1, 
      convRule: rule75
  }, {
      start: 627, 
      length: 2, 
      convRule: rule14
  }, {
      start: 629, 
      length: 1, 
      convRule: rule76
  }, {
      start: 630, 
      length: 7, 
      convRule: rule14
  }, {
      start: 637, 
      length: 1, 
      convRule: rule77
  }, {
      start: 638, 
      length: 2, 
      convRule: rule14
  }, {
      start: 640, 
      length: 1, 
      convRule: rule78
  }, {
      start: 641, 
      length: 2, 
      convRule: rule14
  }, {
      start: 643, 
      length: 1, 
      convRule: rule78
  }, {
      start: 644, 
      length: 4, 
      convRule: rule14
  }, {
      start: 648, 
      length: 1, 
      convRule: rule78
  }, {
      start: 649, 
      length: 1, 
      convRule: rule79
  }, {
      start: 650, 
      length: 2, 
      convRule: rule80
  }, {
      start: 652, 
      length: 1, 
      convRule: rule81
  }, {
      start: 653, 
      length: 5, 
      convRule: rule14
  }, {
      start: 658, 
      length: 1, 
      convRule: rule82
  }, {
      start: 659, 
      length: 1, 
      convRule: rule14
  }, {
      start: 660, 
      length: 1, 
      convRule: rule45
  }, {
      start: 661, 
      length: 27, 
      convRule: rule14
  }, {
      start: 688, 
      length: 18, 
      convRule: rule83
  }, {
      start: 706, 
      length: 4, 
      convRule: rule10
  }, {
      start: 710, 
      length: 12, 
      convRule: rule83
  }, {
      start: 722, 
      length: 14, 
      convRule: rule10
  }, {
      start: 736, 
      length: 5, 
      convRule: rule83
  }, {
      start: 741, 
      length: 7, 
      convRule: rule10
  }, {
      start: 748, 
      length: 1, 
      convRule: rule83
  }, {
      start: 749, 
      length: 1, 
      convRule: rule10
  }, {
      start: 750, 
      length: 1, 
      convRule: rule83
  }, {
      start: 751, 
      length: 17, 
      convRule: rule10
  }, {
      start: 768, 
      length: 69, 
      convRule: rule84
  }, {
      start: 837, 
      length: 1, 
      convRule: rule85
  }, {
      start: 838, 
      length: 42, 
      convRule: rule84
  }, {
      start: 880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 884, 
      length: 1, 
      convRule: rule83
  }, {
      start: 885, 
      length: 1, 
      convRule: rule10
  }, {
      start: 886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 890, 
      length: 1, 
      convRule: rule83
  }, {
      start: 891, 
      length: 3, 
      convRule: rule40
  }, {
      start: 894, 
      length: 1, 
      convRule: rule2
  }, {
      start: 900, 
      length: 2, 
      convRule: rule10
  }, {
      start: 902, 
      length: 1, 
      convRule: rule86
  }, {
      start: 903, 
      length: 1, 
      convRule: rule2
  }, {
      start: 904, 
      length: 3, 
      convRule: rule87
  }, {
      start: 908, 
      length: 1, 
      convRule: rule88
  }, {
      start: 910, 
      length: 2, 
      convRule: rule89
  }, {
      start: 912, 
      length: 1, 
      convRule: rule14
  }, {
      start: 913, 
      length: 17, 
      convRule: rule9
  }, {
      start: 931, 
      length: 9, 
      convRule: rule9
  }, {
      start: 940, 
      length: 1, 
      convRule: rule90
  }, {
      start: 941, 
      length: 3, 
      convRule: rule91
  }, {
      start: 944, 
      length: 1, 
      convRule: rule14
  }, {
      start: 945, 
      length: 17, 
      convRule: rule12
  }, {
      start: 962, 
      length: 1, 
      convRule: rule92
  }, {
      start: 963, 
      length: 9, 
      convRule: rule12
  }, {
      start: 972, 
      length: 1, 
      convRule: rule93
  }, {
      start: 973, 
      length: 2, 
      convRule: rule94
  }, {
      start: 975, 
      length: 1, 
      convRule: rule95
  }, {
      start: 976, 
      length: 1, 
      convRule: rule96
  }, {
      start: 977, 
      length: 1, 
      convRule: rule97
  }, {
      start: 978, 
      length: 3, 
      convRule: rule98
  }, {
      start: 981, 
      length: 1, 
      convRule: rule99
  }, {
      start: 982, 
      length: 1, 
      convRule: rule100
  }, {
      start: 983, 
      length: 1, 
      convRule: rule101
  }, {
      start: 984, 
      length: 1, 
      convRule: rule21
  }, {
      start: 985, 
      length: 1, 
      convRule: rule22
  }, {
      start: 986, 
      length: 1, 
      convRule: rule21
  }, {
      start: 987, 
      length: 1, 
      convRule: rule22
  }, {
      start: 988, 
      length: 1, 
      convRule: rule21
  }, {
      start: 989, 
      length: 1, 
      convRule: rule22
  }, {
      start: 990, 
      length: 1, 
      convRule: rule21
  }, {
      start: 991, 
      length: 1, 
      convRule: rule22
  }, {
      start: 992, 
      length: 1, 
      convRule: rule21
  }, {
      start: 993, 
      length: 1, 
      convRule: rule22
  }, {
      start: 994, 
      length: 1, 
      convRule: rule21
  }, {
      start: 995, 
      length: 1, 
      convRule: rule22
  }, {
      start: 996, 
      length: 1, 
      convRule: rule21
  }, {
      start: 997, 
      length: 1, 
      convRule: rule22
  }, {
      start: 998, 
      length: 1, 
      convRule: rule21
  }, {
      start: 999, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1000, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1001, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1002, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1003, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1004, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1005, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1006, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1007, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1008, 
      length: 1, 
      convRule: rule102
  }, {
      start: 1009, 
      length: 1, 
      convRule: rule103
  }, {
      start: 1010, 
      length: 1, 
      convRule: rule104
  }, {
      start: 1011, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1012, 
      length: 1, 
      convRule: rule105
  }, {
      start: 1013, 
      length: 1, 
      convRule: rule106
  }, {
      start: 1014, 
      length: 1, 
      convRule: rule6
  }, {
      start: 1015, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1016, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1017, 
      length: 1, 
      convRule: rule107
  }, {
      start: 1018, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1019, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1020, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1021, 
      length: 3, 
      convRule: rule53
  }, {
      start: 1024, 
      length: 16, 
      convRule: rule108
  }, {
      start: 1040, 
      length: 32, 
      convRule: rule9
  }, {
      start: 1072, 
      length: 32, 
      convRule: rule12
  }, {
      start: 1104, 
      length: 16, 
      convRule: rule103
  }, {
      start: 1120, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1121, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1122, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1123, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1124, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1125, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1126, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1127, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1128, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1129, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1130, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1131, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1132, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1133, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1134, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1135, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1136, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1137, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1138, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1139, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1140, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1141, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1142, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1143, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1144, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1145, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1146, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1147, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1148, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1149, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1150, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1151, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1152, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1153, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1154, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1155, 
      length: 5, 
      convRule: rule84
  }, {
      start: 1160, 
      length: 2, 
      convRule: rule109
  }, {
      start: 1162, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1163, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1164, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1165, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1166, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1167, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1168, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1169, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1170, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1171, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1172, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1173, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1174, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1175, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1176, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1177, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1178, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1179, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1180, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1181, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1182, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1183, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1184, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1185, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1186, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1187, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1188, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1189, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1190, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1191, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1192, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1193, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1194, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1195, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1196, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1197, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1198, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1199, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1200, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1201, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1202, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1203, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1204, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1205, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1206, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1207, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1208, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1209, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1210, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1211, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1212, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1213, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1214, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1215, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1216, 
      length: 1, 
      convRule: rule110
  }, {
      start: 1217, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1218, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1219, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1220, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1221, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1222, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1223, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1224, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1225, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1226, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1227, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1228, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1229, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1230, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1231, 
      length: 1, 
      convRule: rule111
  }, {
      start: 1232, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1233, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1234, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1235, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1236, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1237, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1238, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1239, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1240, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1241, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1242, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1243, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1244, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1245, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1246, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1247, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1248, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1249, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1250, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1251, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1252, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1253, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1254, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1255, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1304, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1305, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1312, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1313, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1314, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1315, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1316, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1317, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1318, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1319, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1329, 
      length: 38, 
      convRule: rule112
  }, {
      start: 1369, 
      length: 1, 
      convRule: rule83
  }, {
      start: 1370, 
      length: 6, 
      convRule: rule2
  }, {
      start: 1377, 
      length: 38, 
      convRule: rule113
  }, {
      start: 1415, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1417, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1418, 
      length: 1, 
      convRule: rule7
  }, {
      start: 1425, 
      length: 45, 
      convRule: rule84
  }, {
      start: 1470, 
      length: 1, 
      convRule: rule7
  }, {
      start: 1471, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1472, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1473, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1475, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1476, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1478, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1479, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1488, 
      length: 27, 
      convRule: rule45
  }, {
      start: 1520, 
      length: 3, 
      convRule: rule45
  }, {
      start: 1523, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1536, 
      length: 4, 
      convRule: rule16
  }, {
      start: 1542, 
      length: 3, 
      convRule: rule6
  }, {
      start: 1545, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1547, 
      length: 1, 
      convRule: rule3
  }, {
      start: 1548, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1550, 
      length: 2, 
      convRule: rule13
  }, {
      start: 1552, 
      length: 11, 
      convRule: rule84
  }, {
      start: 1563, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1566, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1568, 
      length: 32, 
      convRule: rule45
  }, {
      start: 1600, 
      length: 1, 
      convRule: rule83
  }, {
      start: 1601, 
      length: 10, 
      convRule: rule45
  }, {
      start: 1611, 
      length: 21, 
      convRule: rule84
  }, {
      start: 1632, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1642, 
      length: 4, 
      convRule: rule2
  }, {
      start: 1646, 
      length: 2, 
      convRule: rule45
  }, {
      start: 1648, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1649, 
      length: 99, 
      convRule: rule45
  }, {
      start: 1748, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1750, 
      length: 7, 
      convRule: rule84
  }, {
      start: 1757, 
      length: 1, 
      convRule: rule16
  }, {
      start: 1758, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1759, 
      length: 6, 
      convRule: rule84
  }, {
      start: 1765, 
      length: 2, 
      convRule: rule83
  }, {
      start: 1767, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1769, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1770, 
      length: 4, 
      convRule: rule84
  }, {
      start: 1774, 
      length: 2, 
      convRule: rule45
  }, {
      start: 1776, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1786, 
      length: 3, 
      convRule: rule45
  }, {
      start: 1789, 
      length: 2, 
      convRule: rule13
  }, {
      start: 1791, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1792, 
      length: 14, 
      convRule: rule2
  }, {
      start: 1807, 
      length: 1, 
      convRule: rule16
  }, {
      start: 1808, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1809, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1810, 
      length: 30, 
      convRule: rule45
  }, {
      start: 1840, 
      length: 27, 
      convRule: rule84
  }, {
      start: 1869, 
      length: 89, 
      convRule: rule45
  }, {
      start: 1958, 
      length: 11, 
      convRule: rule84
  }, {
      start: 1969, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1984, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1994, 
      length: 33, 
      convRule: rule45
  }, {
      start: 2027, 
      length: 9, 
      convRule: rule84
  }, {
      start: 2036, 
      length: 2, 
      convRule: rule83
  }, {
      start: 2038, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2039, 
      length: 3, 
      convRule: rule2
  }, {
      start: 2042, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2048, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2070, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2074, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2075, 
      length: 9, 
      convRule: rule84
  }, {
      start: 2084, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2085, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2088, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2089, 
      length: 5, 
      convRule: rule84
  }, {
      start: 2096, 
      length: 15, 
      convRule: rule2
  }, {
      start: 2112, 
      length: 25, 
      convRule: rule45
  }, {
      start: 2137, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2142, 
      length: 1, 
      convRule: rule2
  }, {
      start: 2304, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2307, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2308, 
      length: 54, 
      convRule: rule45
  }, {
      start: 2362, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2363, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2364, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2365, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2366, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2369, 
      length: 8, 
      convRule: rule84
  }, {
      start: 2377, 
      length: 4, 
      convRule: rule114
  }, {
      start: 2381, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2382, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2384, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2385, 
      length: 7, 
      convRule: rule84
  }, {
      start: 2392, 
      length: 10, 
      convRule: rule45
  }, {
      start: 2402, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2404, 
      length: 2, 
      convRule: rule2
  }, {
      start: 2406, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2416, 
      length: 1, 
      convRule: rule2
  }, {
      start: 2417, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2418, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2425, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2433, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2434, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2437, 
      length: 8, 
      convRule: rule45
  }, {
      start: 2447, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2451, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2474, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2482, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2486, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2492, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2493, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2494, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2497, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2503, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2507, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2509, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2510, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2519, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2524, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2527, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2530, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2534, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2544, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2546, 
      length: 2, 
      convRule: rule3
  }, {
      start: 2548, 
      length: 6, 
      convRule: rule17
  }, {
      start: 2554, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2555, 
      length: 1, 
      convRule: rule3
  }, {
      start: 2561, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2563, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2565, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2575, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2579, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2602, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2610, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2613, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2616, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2620, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2622, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2625, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2631, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2635, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2641, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2649, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2654, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2662, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2672, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2674, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2677, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2689, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2691, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2693, 
      length: 9, 
      convRule: rule45
  }, {
      start: 2703, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2707, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2730, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2738, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2741, 
      length: 5, 
      convRule: rule45
  }, {
      start: 2748, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2750, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2753, 
      length: 5, 
      convRule: rule84
  }, {
      start: 2759, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2761, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2763, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2765, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2768, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2784, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2786, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2790, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2801, 
      length: 1, 
      convRule: rule3
  }, {
      start: 2817, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2818, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2821, 
      length: 8, 
      convRule: rule45
  }, {
      start: 2831, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2835, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2858, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2866, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2869, 
      length: 5, 
      convRule: rule45
  }, {
      start: 2876, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2877, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2878, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2879, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2880, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2881, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2887, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2891, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2893, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2902, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2903, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2908, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2911, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2914, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2918, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2928, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2929, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2930, 
      length: 6, 
      convRule: rule17
  }, {
      start: 2946, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2947, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2949, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2958, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2962, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2969, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2972, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2974, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2979, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2984, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2990, 
      length: 12, 
      convRule: rule45
  }, {
      start: 3006, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3008, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3009, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3014, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3018, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3021, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3024, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3031, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3046, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3056, 
      length: 3, 
      convRule: rule17
  }, {
      start: 3059, 
      length: 6, 
      convRule: rule13
  }, {
      start: 3065, 
      length: 1, 
      convRule: rule3
  }, {
      start: 3066, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3073, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3077, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3086, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3090, 
      length: 23, 
      convRule: rule45
  }, {
      start: 3114, 
      length: 10, 
      convRule: rule45
  }, {
      start: 3125, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3133, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3134, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3137, 
      length: 4, 
      convRule: rule114
  }, {
      start: 3142, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3146, 
      length: 4, 
      convRule: rule84
  }, {
      start: 3157, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3160, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3168, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3170, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3174, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3192, 
      length: 7, 
      convRule: rule17
  }, {
      start: 3199, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3202, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3205, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3214, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3218, 
      length: 23, 
      convRule: rule45
  }, {
      start: 3242, 
      length: 10, 
      convRule: rule45
  }, {
      start: 3253, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3260, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3261, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3262, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3263, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3264, 
      length: 5, 
      convRule: rule114
  }, {
      start: 3270, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3271, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3274, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3276, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3285, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3294, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3296, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3298, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3302, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3313, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3330, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3333, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3342, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3346, 
      length: 41, 
      convRule: rule45
  }, {
      start: 3389, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3390, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3393, 
      length: 4, 
      convRule: rule84
  }, {
      start: 3398, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3402, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3405, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3406, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3415, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3424, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3426, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3430, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3440, 
      length: 6, 
      convRule: rule17
  }, {
      start: 3449, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3450, 
      length: 6, 
      convRule: rule45
  }, {
      start: 3458, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3461, 
      length: 18, 
      convRule: rule45
  }, {
      start: 3482, 
      length: 24, 
      convRule: rule45
  }, {
      start: 3507, 
      length: 9, 
      convRule: rule45
  }, {
      start: 3517, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3520, 
      length: 7, 
      convRule: rule45
  }, {
      start: 3530, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3535, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3538, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3542, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3544, 
      length: 8, 
      convRule: rule114
  }, {
      start: 3570, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3572, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3585, 
      length: 48, 
      convRule: rule45
  }, {
      start: 3633, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3634, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3636, 
      length: 7, 
      convRule: rule84
  }, {
      start: 3647, 
      length: 1, 
      convRule: rule3
  }, {
      start: 3648, 
      length: 6, 
      convRule: rule45
  }, {
      start: 3654, 
      length: 1, 
      convRule: rule83
  }, {
      start: 3655, 
      length: 8, 
      convRule: rule84
  }, {
      start: 3663, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3664, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3674, 
      length: 2, 
      convRule: rule2
  }, {
      start: 3713, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3716, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3719, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3722, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3725, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3732, 
      length: 4, 
      convRule: rule45
  }, {
      start: 3737, 
      length: 7, 
      convRule: rule45
  }, {
      start: 3745, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3751, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3754, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3757, 
      length: 4, 
      convRule: rule45
  }, {
      start: 3761, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3762, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3764, 
      length: 6, 
      convRule: rule84
  }, {
      start: 3771, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3773, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3776, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3782, 
      length: 1, 
      convRule: rule83
  }, {
      start: 3784, 
      length: 6, 
      convRule: rule84
  }, {
      start: 3792, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3804, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3840, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3841, 
      length: 3, 
      convRule: rule13
  }, {
      start: 3844, 
      length: 15, 
      convRule: rule2
  }, {
      start: 3859, 
      length: 5, 
      convRule: rule13
  }, {
      start: 3864, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3866, 
      length: 6, 
      convRule: rule13
  }, {
      start: 3872, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3882, 
      length: 10, 
      convRule: rule17
  }, {
      start: 3892, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3893, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3894, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3895, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3896, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3897, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3898, 
      length: 1, 
      convRule: rule4
  }, {
      start: 3899, 
      length: 1, 
      convRule: rule5
  }, {
      start: 3900, 
      length: 1, 
      convRule: rule4
  }, {
      start: 3901, 
      length: 1, 
      convRule: rule5
  }, {
      start: 3902, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3904, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3913, 
      length: 36, 
      convRule: rule45
  }, {
      start: 3953, 
      length: 14, 
      convRule: rule84
  }, {
      start: 3967, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3968, 
      length: 5, 
      convRule: rule84
  }, {
      start: 3973, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3974, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3976, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3981, 
      length: 11, 
      convRule: rule84
  }, {
      start: 3993, 
      length: 36, 
      convRule: rule84
  }, {
      start: 4030, 
      length: 8, 
      convRule: rule13
  }, {
      start: 4038, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4039, 
      length: 6, 
      convRule: rule13
  }, {
      start: 4046, 
      length: 2, 
      convRule: rule13
  }, {
      start: 4048, 
      length: 5, 
      convRule: rule2
  }, {
      start: 4053, 
      length: 4, 
      convRule: rule13
  }, {
      start: 4057, 
      length: 2, 
      convRule: rule2
  }, {
      start: 4096, 
      length: 43, 
      convRule: rule45
  }, {
      start: 4139, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4141, 
      length: 4, 
      convRule: rule84
  }, {
      start: 4145, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4146, 
      length: 6, 
      convRule: rule84
  }, {
      start: 4152, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4153, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4155, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4157, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4159, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4160, 
      length: 10, 
      convRule: rule8
  }, {
      start: 4170, 
      length: 6, 
      convRule: rule2
  }, {
      start: 4176, 
      length: 6, 
      convRule: rule45
  }, {
      start: 4182, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4184, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4186, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4190, 
      length: 3, 
      convRule: rule84
  }, {
      start: 4193, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4194, 
      length: 3, 
      convRule: rule114
  }, {
      start: 4197, 
      length: 2, 
      convRule: rule45
  }, {
      start: 4199, 
      length: 7, 
      convRule: rule114
  }, {
      start: 4206, 
      length: 3, 
      convRule: rule45
  }, {
      start: 4209, 
      length: 4, 
      convRule: rule84
  }, {
      start: 4213, 
      length: 13, 
      convRule: rule45
  }, {
      start: 4226, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4227, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4229, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4231, 
      length: 6, 
      convRule: rule114
  }, {
      start: 4237, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4238, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4239, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4240, 
      length: 10, 
      convRule: rule8
  }, {
      start: 4250, 
      length: 3, 
      convRule: rule114
  }, {
      start: 4253, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4254, 
      length: 2, 
      convRule: rule13
  }, {
      start: 4256, 
      length: 38, 
      convRule: rule115
  }, {
      start: 4304, 
      length: 43, 
      convRule: rule45
  }, {
      start: 4347, 
      length: 1, 
      convRule: rule2
  }, {
      start: 4348, 
      length: 1, 
      convRule: rule83
  }, {
      start: 4352, 
      length: 329, 
      convRule: rule45
  }, {
      start: 4682, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4688, 
      length: 7, 
      convRule: rule45
  }, {
      start: 4696, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4698, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4704, 
      length: 41, 
      convRule: rule45
  }, {
      start: 4746, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4752, 
      length: 33, 
      convRule: rule45
  }, {
      start: 4786, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4792, 
      length: 7, 
      convRule: rule45
  }, {
      start: 4800, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4802, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4808, 
      length: 15, 
      convRule: rule45
  }, {
      start: 4824, 
      length: 57, 
      convRule: rule45
  }, {
      start: 4882, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4888, 
      length: 67, 
      convRule: rule45
  }, {
      start: 4957, 
      length: 3, 
      convRule: rule84
  }, {
      start: 4960, 
      length: 1, 
      convRule: rule13
  }, {
      start: 4961, 
      length: 8, 
      convRule: rule2
  }, {
      start: 4969, 
      length: 20, 
      convRule: rule17
  }, {
      start: 4992, 
      length: 16, 
      convRule: rule45
  }, {
      start: 5008, 
      length: 10, 
      convRule: rule13
  }, {
      start: 5024, 
      length: 85, 
      convRule: rule45
  }, {
      start: 5120, 
      length: 1, 
      convRule: rule7
  }, {
      start: 5121, 
      length: 620, 
      convRule: rule45
  }, {
      start: 5741, 
      length: 2, 
      convRule: rule2
  }, {
      start: 5743, 
      length: 17, 
      convRule: rule45
  }, {
      start: 5760, 
      length: 1, 
      convRule: rule1
  }, {
      start: 5761, 
      length: 26, 
      convRule: rule45
  }, {
      start: 5787, 
      length: 1, 
      convRule: rule4
  }, {
      start: 5788, 
      length: 1, 
      convRule: rule5
  }, {
      start: 5792, 
      length: 75, 
      convRule: rule45
  }, {
      start: 5867, 
      length: 3, 
      convRule: rule2
  }, {
      start: 5870, 
      length: 3, 
      convRule: rule116
  }, {
      start: 5888, 
      length: 13, 
      convRule: rule45
  }, {
      start: 5902, 
      length: 4, 
      convRule: rule45
  }, {
      start: 5906, 
      length: 3, 
      convRule: rule84
  }, {
      start: 5920, 
      length: 18, 
      convRule: rule45
  }, {
      start: 5938, 
      length: 3, 
      convRule: rule84
  }, {
      start: 5941, 
      length: 2, 
      convRule: rule2
  }, {
      start: 5952, 
      length: 18, 
      convRule: rule45
  }, {
      start: 5970, 
      length: 2, 
      convRule: rule84
  }, {
      start: 5984, 
      length: 13, 
      convRule: rule45
  }, {
      start: 5998, 
      length: 3, 
      convRule: rule45
  }, {
      start: 6002, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6016, 
      length: 52, 
      convRule: rule45
  }, {
      start: 6068, 
      length: 2, 
      convRule: rule16
  }, {
      start: 6070, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6071, 
      length: 7, 
      convRule: rule84
  }, {
      start: 6078, 
      length: 8, 
      convRule: rule114
  }, {
      start: 6086, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6087, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6089, 
      length: 11, 
      convRule: rule84
  }, {
      start: 6100, 
      length: 3, 
      convRule: rule2
  }, {
      start: 6103, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6104, 
      length: 3, 
      convRule: rule2
  }, {
      start: 6107, 
      length: 1, 
      convRule: rule3
  }, {
      start: 6108, 
      length: 1, 
      convRule: rule45
  }, {
      start: 6109, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6112, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6128, 
      length: 10, 
      convRule: rule17
  }, {
      start: 6144, 
      length: 6, 
      convRule: rule2
  }, {
      start: 6150, 
      length: 1, 
      convRule: rule7
  }, {
      start: 6151, 
      length: 4, 
      convRule: rule2
  }, {
      start: 6155, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6158, 
      length: 1, 
      convRule: rule1
  }, {
      start: 6160, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6176, 
      length: 35, 
      convRule: rule45
  }, {
      start: 6211, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6212, 
      length: 52, 
      convRule: rule45
  }, {
      start: 6272, 
      length: 41, 
      convRule: rule45
  }, {
      start: 6313, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6314, 
      length: 1, 
      convRule: rule45
  }, {
      start: 6320, 
      length: 70, 
      convRule: rule45
  }, {
      start: 6400, 
      length: 29, 
      convRule: rule45
  }, {
      start: 6432, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6435, 
      length: 4, 
      convRule: rule114
  }, {
      start: 6439, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6441, 
      length: 3, 
      convRule: rule114
  }, {
      start: 6448, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6450, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6451, 
      length: 6, 
      convRule: rule114
  }, {
      start: 6457, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6464, 
      length: 1, 
      convRule: rule13
  }, {
      start: 6468, 
      length: 2, 
      convRule: rule2
  }, {
      start: 6470, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6480, 
      length: 30, 
      convRule: rule45
  }, {
      start: 6512, 
      length: 5, 
      convRule: rule45
  }, {
      start: 6528, 
      length: 44, 
      convRule: rule45
  }, {
      start: 6576, 
      length: 17, 
      convRule: rule114
  }, {
      start: 6593, 
      length: 7, 
      convRule: rule45
  }, {
      start: 6600, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6608, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6618, 
      length: 1, 
      convRule: rule17
  }, {
      start: 6622, 
      length: 34, 
      convRule: rule13
  }, {
      start: 6656, 
      length: 23, 
      convRule: rule45
  }, {
      start: 6679, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6681, 
      length: 3, 
      convRule: rule114
  }, {
      start: 6686, 
      length: 2, 
      convRule: rule2
  }, {
      start: 6688, 
      length: 53, 
      convRule: rule45
  }, {
      start: 6741, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6742, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6743, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6744, 
      length: 7, 
      convRule: rule84
  }, {
      start: 6752, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6753, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6754, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6755, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6757, 
      length: 8, 
      convRule: rule84
  }, {
      start: 6765, 
      length: 6, 
      convRule: rule114
  }, {
      start: 6771, 
      length: 10, 
      convRule: rule84
  }, {
      start: 6783, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6784, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6800, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6816, 
      length: 7, 
      convRule: rule2
  }, {
      start: 6823, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6824, 
      length: 6, 
      convRule: rule2
  }, {
      start: 6912, 
      length: 4, 
      convRule: rule84
  }, {
      start: 6916, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6917, 
      length: 47, 
      convRule: rule45
  }, {
      start: 6964, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6965, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6966, 
      length: 5, 
      convRule: rule84
  }, {
      start: 6971, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6972, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6973, 
      length: 5, 
      convRule: rule114
  }, {
      start: 6978, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6979, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6981, 
      length: 7, 
      convRule: rule45
  }, {
      start: 6992, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7002, 
      length: 7, 
      convRule: rule2
  }, {
      start: 7009, 
      length: 10, 
      convRule: rule13
  }, {
      start: 7019, 
      length: 9, 
      convRule: rule84
  }, {
      start: 7028, 
      length: 9, 
      convRule: rule13
  }, {
      start: 7040, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7042, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7043, 
      length: 30, 
      convRule: rule45
  }, {
      start: 7073, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7074, 
      length: 4, 
      convRule: rule84
  }, {
      start: 7078, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7080, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7082, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7086, 
      length: 2, 
      convRule: rule45
  }, {
      start: 7088, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7104, 
      length: 38, 
      convRule: rule45
  }, {
      start: 7142, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7143, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7144, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7146, 
      length: 3, 
      convRule: rule114
  }, {
      start: 7149, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7150, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7151, 
      length: 3, 
      convRule: rule84
  }, {
      start: 7154, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7164, 
      length: 4, 
      convRule: rule2
  }, {
      start: 7168, 
      length: 36, 
      convRule: rule45
  }, {
      start: 7204, 
      length: 8, 
      convRule: rule114
  }, {
      start: 7212, 
      length: 8, 
      convRule: rule84
  }, {
      start: 7220, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7222, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7227, 
      length: 5, 
      convRule: rule2
  }, {
      start: 7232, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7245, 
      length: 3, 
      convRule: rule45
  }, {
      start: 7248, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7258, 
      length: 30, 
      convRule: rule45
  }, {
      start: 7288, 
      length: 6, 
      convRule: rule83
  }, {
      start: 7294, 
      length: 2, 
      convRule: rule2
  }, {
      start: 7376, 
      length: 3, 
      convRule: rule84
  }, {
      start: 7379, 
      length: 1, 
      convRule: rule2
  }, {
      start: 7380, 
      length: 13, 
      convRule: rule84
  }, {
      start: 7393, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7394, 
      length: 7, 
      convRule: rule84
  }, {
      start: 7401, 
      length: 4, 
      convRule: rule45
  }, {
      start: 7405, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7406, 
      length: 4, 
      convRule: rule45
  }, {
      start: 7410, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7424, 
      length: 44, 
      convRule: rule14
  }, {
      start: 7468, 
      length: 54, 
      convRule: rule83
  }, {
      start: 7522, 
      length: 22, 
      convRule: rule14
  }, {
      start: 7544, 
      length: 1, 
      convRule: rule83
  }, {
      start: 7545, 
      length: 1, 
      convRule: rule117
  }, {
      start: 7546, 
      length: 3, 
      convRule: rule14
  }, {
      start: 7549, 
      length: 1, 
      convRule: rule118
  }, {
      start: 7550, 
      length: 29, 
      convRule: rule14
  }, {
      start: 7579, 
      length: 37, 
      convRule: rule83
  }, {
      start: 7616, 
      length: 39, 
      convRule: rule84
  }, {
      start: 7676, 
      length: 4, 
      convRule: rule84
  }, {
      start: 7680, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7681, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7682, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7683, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7684, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7685, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7686, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7687, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7688, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7689, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7690, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7691, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7692, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7693, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7694, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7695, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7696, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7697, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7698, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7699, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7700, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7701, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7702, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7703, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7704, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7705, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7706, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7707, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7708, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7709, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7710, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7711, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7712, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7713, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7714, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7715, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7716, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7717, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7718, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7719, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7720, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7721, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7722, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7723, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7724, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7725, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7726, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7727, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7728, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7729, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7730, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7731, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7732, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7733, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7734, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7735, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7736, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7737, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7738, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7739, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7740, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7741, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7742, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7743, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7744, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7745, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7746, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7747, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7748, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7749, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7750, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7751, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7752, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7753, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7754, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7755, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7756, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7757, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7758, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7759, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7760, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7761, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7762, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7763, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7764, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7765, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7766, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7767, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7768, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7769, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7770, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7771, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7772, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7773, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7774, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7775, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7776, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7777, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7778, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7779, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7780, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7781, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7782, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7783, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7784, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7785, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7800, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7801, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7830, 
      length: 5, 
      convRule: rule14
  }, {
      start: 7835, 
      length: 1, 
      convRule: rule119
  }, {
      start: 7836, 
      length: 2, 
      convRule: rule14
  }, {
      start: 7838, 
      length: 1, 
      convRule: rule120
  }, {
      start: 7839, 
      length: 1, 
      convRule: rule14
  }, {
      start: 7840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7864, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7865, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7866, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7867, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7868, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7869, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7870, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7871, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7872, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7873, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7874, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7875, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7876, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7877, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7888, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7889, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7890, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7891, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7892, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7893, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7894, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7895, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7898, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7899, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7900, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7901, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7902, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7903, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7904, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7905, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7906, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7907, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7908, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7909, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7910, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7911, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7922, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7923, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7924, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7925, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7926, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7927, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7928, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7929, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7930, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7931, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7932, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7933, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7934, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7935, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7936, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7944, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7952, 
      length: 6, 
      convRule: rule121
  }, {
      start: 7960, 
      length: 6, 
      convRule: rule122
  }, {
      start: 7968, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7976, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7984, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7992, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8000, 
      length: 6, 
      convRule: rule121
  }, {
      start: 8008, 
      length: 6, 
      convRule: rule122
  }, {
      start: 8016, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8017, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8018, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8019, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8020, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8021, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8022, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8023, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8025, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8027, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8029, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8031, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8032, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8040, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8048, 
      length: 2, 
      convRule: rule123
  }, {
      start: 8050, 
      length: 4, 
      convRule: rule124
  }, {
      start: 8054, 
      length: 2, 
      convRule: rule125
  }, {
      start: 8056, 
      length: 2, 
      convRule: rule126
  }, {
      start: 8058, 
      length: 2, 
      convRule: rule127
  }, {
      start: 8060, 
      length: 2, 
      convRule: rule128
  }, {
      start: 8064, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8072, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8080, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8088, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8096, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8104, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8112, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8114, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8115, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8116, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8118, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8120, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8122, 
      length: 2, 
      convRule: rule131
  }, {
      start: 8124, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8125, 
      length: 1, 
      convRule: rule10
  }, {
      start: 8126, 
      length: 1, 
      convRule: rule133
  }, {
      start: 8127, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8130, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8131, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8132, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8134, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8136, 
      length: 4, 
      convRule: rule134
  }, {
      start: 8140, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8141, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8144, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8146, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8150, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8152, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8154, 
      length: 2, 
      convRule: rule135
  }, {
      start: 8157, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8160, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8162, 
      length: 3, 
      convRule: rule14
  }, {
      start: 8165, 
      length: 1, 
      convRule: rule104
  }, {
      start: 8166, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8168, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8170, 
      length: 2, 
      convRule: rule136
  }, {
      start: 8172, 
      length: 1, 
      convRule: rule107
  }, {
      start: 8173, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8178, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8179, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8180, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8182, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8184, 
      length: 2, 
      convRule: rule137
  }, {
      start: 8186, 
      length: 2, 
      convRule: rule138
  }, {
      start: 8188, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8189, 
      length: 2, 
      convRule: rule10
  }, {
      start: 8192, 
      length: 11, 
      convRule: rule1
  }, {
      start: 8203, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8208, 
      length: 6, 
      convRule: rule7
  }, {
      start: 8214, 
      length: 2, 
      convRule: rule2
  }, {
      start: 8216, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8217, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8218, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8219, 
      length: 2, 
      convRule: rule15
  }, {
      start: 8221, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8222, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8223, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8224, 
      length: 8, 
      convRule: rule2
  }, {
      start: 8232, 
      length: 1, 
      convRule: rule139
  }, {
      start: 8233, 
      length: 1, 
      convRule: rule140
  }, {
      start: 8234, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8239, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8240, 
      length: 9, 
      convRule: rule2
  }, {
      start: 8249, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8250, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8251, 
      length: 4, 
      convRule: rule2
  }, {
      start: 8255, 
      length: 2, 
      convRule: rule11
  }, {
      start: 8257, 
      length: 3, 
      convRule: rule2
  }, {
      start: 8260, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8261, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8262, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8263, 
      length: 11, 
      convRule: rule2
  }, {
      start: 8274, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8275, 
      length: 1, 
      convRule: rule2
  }, {
      start: 8276, 
      length: 1, 
      convRule: rule11
  }, {
      start: 8277, 
      length: 10, 
      convRule: rule2
  }, {
      start: 8287, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8288, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8298, 
      length: 6, 
      convRule: rule16
  }, {
      start: 8304, 
      length: 1, 
      convRule: rule17
  }, {
      start: 8305, 
      length: 1, 
      convRule: rule83
  }, {
      start: 8308, 
      length: 6, 
      convRule: rule17
  }, {
      start: 8314, 
      length: 3, 
      convRule: rule6
  }, {
      start: 8317, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8318, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8319, 
      length: 1, 
      convRule: rule83
  }, {
      start: 8320, 
      length: 10, 
      convRule: rule17
  }, {
      start: 8330, 
      length: 3, 
      convRule: rule6
  }, {
      start: 8333, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8334, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8336, 
      length: 13, 
      convRule: rule83
  }, {
      start: 8352, 
      length: 26, 
      convRule: rule3
  }, {
      start: 8400, 
      length: 13, 
      convRule: rule84
  }, {
      start: 8413, 
      length: 4, 
      convRule: rule109
  }, {
      start: 8417, 
      length: 1, 
      convRule: rule84
  }, {
      start: 8418, 
      length: 3, 
      convRule: rule109
  }, {
      start: 8421, 
      length: 12, 
      convRule: rule84
  }, {
      start: 8448, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8450, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8451, 
      length: 4, 
      convRule: rule13
  }, {
      start: 8455, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8456, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8458, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8459, 
      length: 3, 
      convRule: rule98
  }, {
      start: 8462, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8464, 
      length: 3, 
      convRule: rule98
  }, {
      start: 8467, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8468, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8469, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8470, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8472, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8473, 
      length: 5, 
      convRule: rule98
  }, {
      start: 8478, 
      length: 6, 
      convRule: rule13
  }, {
      start: 8484, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8485, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8486, 
      length: 1, 
      convRule: rule141
  }, {
      start: 8487, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8488, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8489, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8490, 
      length: 1, 
      convRule: rule142
  }, {
      start: 8491, 
      length: 1, 
      convRule: rule143
  }, {
      start: 8492, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8494, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8495, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8496, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8498, 
      length: 1, 
      convRule: rule144
  }, {
      start: 8499, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8500, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8501, 
      length: 4, 
      convRule: rule45
  }, {
      start: 8505, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8506, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8508, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8510, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8512, 
      length: 5, 
      convRule: rule6
  }, {
      start: 8517, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8518, 
      length: 4, 
      convRule: rule14
  }, {
      start: 8522, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8523, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8524, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8526, 
      length: 1, 
      convRule: rule145
  }, {
      start: 8527, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8528, 
      length: 16, 
      convRule: rule17
  }, {
      start: 8544, 
      length: 16, 
      convRule: rule146
  }, {
      start: 8560, 
      length: 16, 
      convRule: rule147
  }, {
      start: 8576, 
      length: 3, 
      convRule: rule116
  }, {
      start: 8579, 
      length: 1, 
      convRule: rule21
  }, {
      start: 8580, 
      length: 1, 
      convRule: rule22
  }, {
      start: 8581, 
      length: 4, 
      convRule: rule116
  }, {
      start: 8585, 
      length: 1, 
      convRule: rule17
  }, {
      start: 8592, 
      length: 5, 
      convRule: rule6
  }, {
      start: 8597, 
      length: 5, 
      convRule: rule13
  }, {
      start: 8602, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8604, 
      length: 4, 
      convRule: rule13
  }, {
      start: 8608, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8609, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8611, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8612, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8614, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8615, 
      length: 7, 
      convRule: rule13
  }, {
      start: 8622, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8623, 
      length: 31, 
      convRule: rule13
  }, {
      start: 8654, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8656, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8658, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8659, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8660, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8661, 
      length: 31, 
      convRule: rule13
  }, {
      start: 8692, 
      length: 268, 
      convRule: rule6
  }, {
      start: 8960, 
      length: 8, 
      convRule: rule13
  }, {
      start: 8968, 
      length: 4, 
      convRule: rule6
  }, {
      start: 8972, 
      length: 20, 
      convRule: rule13
  }, {
      start: 8992, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8994, 
      length: 7, 
      convRule: rule13
  }, {
      start: 9001, 
      length: 1, 
      convRule: rule4
  }, {
      start: 9002, 
      length: 1, 
      convRule: rule5
  }, {
      start: 9003, 
      length: 81, 
      convRule: rule13
  }, {
      start: 9084, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9085, 
      length: 30, 
      convRule: rule13
  }, {
      start: 9115, 
      length: 25, 
      convRule: rule6
  }, {
      start: 9140, 
      length: 40, 
      convRule: rule13
  }, {
      start: 9180, 
      length: 6, 
      convRule: rule6
  }, {
      start: 9186, 
      length: 18, 
      convRule: rule13
  }, {
      start: 9216, 
      length: 39, 
      convRule: rule13
  }, {
      start: 9280, 
      length: 11, 
      convRule: rule13
  }, {
      start: 9312, 
      length: 60, 
      convRule: rule17
  }, {
      start: 9372, 
      length: 26, 
      convRule: rule13
  }, {
      start: 9398, 
      length: 26, 
      convRule: rule148
  }, {
      start: 9424, 
      length: 26, 
      convRule: rule149
  }, {
      start: 9450, 
      length: 22, 
      convRule: rule17
  }, {
      start: 9472, 
      length: 183, 
      convRule: rule13
  }, {
      start: 9655, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9656, 
      length: 9, 
      convRule: rule13
  }, {
      start: 9665, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9666, 
      length: 54, 
      convRule: rule13
  }, {
      start: 9720, 
      length: 8, 
      convRule: rule6
  }, {
      start: 9728, 
      length: 111, 
      convRule: rule13
  }, {
      start: 9839, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9840, 
      length: 144, 
      convRule: rule13
  }, {
      start: 9985, 
      length: 103, 
      convRule: rule13
  }, {
      start: 10088, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10089, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10090, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10091, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10092, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10093, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10094, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10095, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10096, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10097, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10098, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10099, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10100, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10101, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10102, 
      length: 30, 
      convRule: rule17
  }, {
      start: 10132, 
      length: 44, 
      convRule: rule13
  }, {
      start: 10176, 
      length: 5, 
      convRule: rule6
  }, {
      start: 10181, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10182, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10183, 
      length: 4, 
      convRule: rule6
  }, {
      start: 10188, 
      length: 1, 
      convRule: rule6
  }, {
      start: 10190, 
      length: 24, 
      convRule: rule6
  }, {
      start: 10214, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10215, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10216, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10217, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10218, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10219, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10220, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10221, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10222, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10223, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10224, 
      length: 16, 
      convRule: rule6
  }, {
      start: 10240, 
      length: 256, 
      convRule: rule13
  }, {
      start: 10496, 
      length: 131, 
      convRule: rule6
  }, {
      start: 10627, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10628, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10629, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10630, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10631, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10632, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10633, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10634, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10635, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10636, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10637, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10638, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10639, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10640, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10641, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10642, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10643, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10644, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10645, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10646, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10647, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10648, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10649, 
      length: 63, 
      convRule: rule6
  }, {
      start: 10712, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10713, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10714, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10715, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10716, 
      length: 32, 
      convRule: rule6
  }, {
      start: 10748, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10749, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10750, 
      length: 258, 
      convRule: rule6
  }, {
      start: 11008, 
      length: 48, 
      convRule: rule13
  }, {
      start: 11056, 
      length: 21, 
      convRule: rule6
  }, {
      start: 11077, 
      length: 2, 
      convRule: rule13
  }, {
      start: 11079, 
      length: 6, 
      convRule: rule6
  }, {
      start: 11088, 
      length: 10, 
      convRule: rule13
  }, {
      start: 11264, 
      length: 47, 
      convRule: rule112
  }, {
      start: 11312, 
      length: 47, 
      convRule: rule113
  }, {
      start: 11360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11362, 
      length: 1, 
      convRule: rule150
  }, {
      start: 11363, 
      length: 1, 
      convRule: rule151
  }, {
      start: 11364, 
      length: 1, 
      convRule: rule152
  }, {
      start: 11365, 
      length: 1, 
      convRule: rule153
  }, {
      start: 11366, 
      length: 1, 
      convRule: rule154
  }, {
      start: 11367, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11368, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11369, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11370, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11371, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11372, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11373, 
      length: 1, 
      convRule: rule155
  }, {
      start: 11374, 
      length: 1, 
      convRule: rule156
  }, {
      start: 11375, 
      length: 1, 
      convRule: rule157
  }, {
      start: 11376, 
      length: 1, 
      convRule: rule158
  }, {
      start: 11377, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11378, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11379, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11380, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11383, 
      length: 6, 
      convRule: rule14
  }, {
      start: 11389, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11390, 
      length: 2, 
      convRule: rule159
  }, {
      start: 11392, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11393, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11394, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11395, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11396, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11397, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11398, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11399, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11400, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11401, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11402, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11403, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11404, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11405, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11406, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11407, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11410, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11411, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11412, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11413, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11414, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11415, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11422, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11423, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11424, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11425, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11426, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11427, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11430, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11431, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11432, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11433, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11434, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11435, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11436, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11437, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11438, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11439, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11442, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11443, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11446, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11447, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11448, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11449, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11450, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11451, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11452, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11453, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11454, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11455, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11456, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11457, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11458, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11459, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11460, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11461, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11462, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11463, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11464, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11465, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11466, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11467, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11468, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11469, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11470, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11471, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11472, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11473, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11474, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11475, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11476, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11477, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11492, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11493, 
      length: 6, 
      convRule: rule13
  }, {
      start: 11499, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11500, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11501, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11502, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11503, 
      length: 3, 
      convRule: rule84
  }, {
      start: 11513, 
      length: 4, 
      convRule: rule2
  }, {
      start: 11517, 
      length: 1, 
      convRule: rule17
  }, {
      start: 11518, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11520, 
      length: 38, 
      convRule: rule160
  }, {
      start: 11568, 
      length: 54, 
      convRule: rule45
  }, {
      start: 11631, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11632, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11647, 
      length: 1, 
      convRule: rule84
  }, {
      start: 11648, 
      length: 23, 
      convRule: rule45
  }, {
      start: 11680, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11688, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11696, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11704, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11712, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11720, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11728, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11736, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11744, 
      length: 32, 
      convRule: rule84
  }, {
      start: 11776, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11778, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11779, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11780, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11781, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11782, 
      length: 3, 
      convRule: rule2
  }, {
      start: 11785, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11786, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11787, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11788, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11789, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11790, 
      length: 9, 
      convRule: rule2
  }, {
      start: 11799, 
      length: 1, 
      convRule: rule7
  }, {
      start: 11800, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11802, 
      length: 1, 
      convRule: rule7
  }, {
      start: 11803, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11804, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11805, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11806, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11808, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11809, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11810, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11811, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11812, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11813, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11814, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11815, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11816, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11817, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11818, 
      length: 5, 
      convRule: rule2
  }, {
      start: 11823, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11824, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11904, 
      length: 26, 
      convRule: rule13
  }, {
      start: 11931, 
      length: 89, 
      convRule: rule13
  }, {
      start: 12032, 
      length: 214, 
      convRule: rule13
  }, {
      start: 12272, 
      length: 12, 
      convRule: rule13
  }, {
      start: 12288, 
      length: 1, 
      convRule: rule1
  }, {
      start: 12289, 
      length: 3, 
      convRule: rule2
  }, {
      start: 12292, 
      length: 1, 
      convRule: rule13
  }, {
      start: 12293, 
      length: 1, 
      convRule: rule83
  }, {
      start: 12294, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12295, 
      length: 1, 
      convRule: rule116
  }, {
      start: 12296, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12297, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12298, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12299, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12300, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12301, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12302, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12303, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12304, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12305, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12306, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12308, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12309, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12310, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12311, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12312, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12313, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12314, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12315, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12316, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12317, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12318, 
      length: 2, 
      convRule: rule5
  }, {
      start: 12320, 
      length: 1, 
      convRule: rule13
  }, {
      start: 12321, 
      length: 9, 
      convRule: rule116
  }, {
      start: 12330, 
      length: 6, 
      convRule: rule84
  }, {
      start: 12336, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12337, 
      length: 5, 
      convRule: rule83
  }, {
      start: 12342, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12344, 
      length: 3, 
      convRule: rule116
  }, {
      start: 12347, 
      length: 1, 
      convRule: rule83
  }, {
      start: 12348, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12349, 
      length: 1, 
      convRule: rule2
  }, {
      start: 12350, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12353, 
      length: 86, 
      convRule: rule45
  }, {
      start: 12441, 
      length: 2, 
      convRule: rule84
  }, {
      start: 12443, 
      length: 2, 
      convRule: rule10
  }, {
      start: 12445, 
      length: 2, 
      convRule: rule83
  }, {
      start: 12447, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12448, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12449, 
      length: 90, 
      convRule: rule45
  }, {
      start: 12539, 
      length: 1, 
      convRule: rule2
  }, {
      start: 12540, 
      length: 3, 
      convRule: rule83
  }, {
      start: 12543, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12549, 
      length: 41, 
      convRule: rule45
  }, {
      start: 12593, 
      length: 94, 
      convRule: rule45
  }, {
      start: 12688, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12690, 
      length: 4, 
      convRule: rule17
  }, {
      start: 12694, 
      length: 10, 
      convRule: rule13
  }, {
      start: 12704, 
      length: 27, 
      convRule: rule45
  }, {
      start: 12736, 
      length: 36, 
      convRule: rule13
  }, {
      start: 12784, 
      length: 16, 
      convRule: rule45
  }, {
      start: 12800, 
      length: 31, 
      convRule: rule13
  }, {
      start: 12832, 
      length: 10, 
      convRule: rule17
  }, {
      start: 12842, 
      length: 39, 
      convRule: rule13
  }, {
      start: 12881, 
      length: 15, 
      convRule: rule17
  }, {
      start: 12896, 
      length: 32, 
      convRule: rule13
  }, {
      start: 12928, 
      length: 10, 
      convRule: rule17
  }, {
      start: 12938, 
      length: 39, 
      convRule: rule13
  }, {
      start: 12977, 
      length: 15, 
      convRule: rule17
  }, {
      start: 12992, 
      length: 63, 
      convRule: rule13
  }, {
      start: 13056, 
      length: 256, 
      convRule: rule13
  }, {
      start: 13312, 
      length: 6582, 
      convRule: rule45
  }, {
      start: 19904, 
      length: 64, 
      convRule: rule13
  }, {
      start: 19968, 
      length: 20940, 
      convRule: rule45
  }, {
      start: 40960, 
      length: 21, 
      convRule: rule45
  }, {
      start: 40981, 
      length: 1, 
      convRule: rule83
  }, {
      start: 40982, 
      length: 1143, 
      convRule: rule45
  }, {
      start: 42128, 
      length: 55, 
      convRule: rule13
  }, {
      start: 42192, 
      length: 40, 
      convRule: rule45
  }, {
      start: 42232, 
      length: 6, 
      convRule: rule83
  }, {
      start: 42238, 
      length: 2, 
      convRule: rule2
  }, {
      start: 42240, 
      length: 268, 
      convRule: rule45
  }, {
      start: 42508, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42509, 
      length: 3, 
      convRule: rule2
  }, {
      start: 42512, 
      length: 16, 
      convRule: rule45
  }, {
      start: 42528, 
      length: 10, 
      convRule: rule8
  }, {
      start: 42538, 
      length: 2, 
      convRule: rule45
  }, {
      start: 42560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42564, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42565, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42566, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42567, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42568, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42569, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42570, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42571, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42572, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42573, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42574, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42575, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42576, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42577, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42578, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42579, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42580, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42581, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42592, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42593, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42594, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42595, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42596, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42597, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42598, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42599, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42600, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42601, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42602, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42603, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42604, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42605, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42606, 
      length: 1, 
      convRule: rule45
  }, {
      start: 42607, 
      length: 1, 
      convRule: rule84
  }, {
      start: 42608, 
      length: 3, 
      convRule: rule109
  }, {
      start: 42611, 
      length: 1, 
      convRule: rule2
  }, {
      start: 42620, 
      length: 2, 
      convRule: rule84
  }, {
      start: 42622, 
      length: 1, 
      convRule: rule2
  }, {
      start: 42623, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42624, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42625, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42626, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42627, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42628, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42629, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42630, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42631, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42632, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42633, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42634, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42635, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42636, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42637, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42638, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42639, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42640, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42641, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42642, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42643, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42644, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42645, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42646, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42647, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42656, 
      length: 70, 
      convRule: rule45
  }, {
      start: 42726, 
      length: 10, 
      convRule: rule116
  }, {
      start: 42736, 
      length: 2, 
      convRule: rule84
  }, {
      start: 42738, 
      length: 6, 
      convRule: rule2
  }, {
      start: 42752, 
      length: 23, 
      convRule: rule10
  }, {
      start: 42775, 
      length: 9, 
      convRule: rule83
  }, {
      start: 42784, 
      length: 2, 
      convRule: rule10
  }, {
      start: 42786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42800, 
      length: 2, 
      convRule: rule14
  }, {
      start: 42802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42830, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42831, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42832, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42833, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42834, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42835, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42836, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42837, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42838, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42839, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42864, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42865, 
      length: 8, 
      convRule: rule14
  }, {
      start: 42873, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42874, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42875, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42876, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42877, 
      length: 1, 
      convRule: rule161
  }, {
      start: 42878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42888, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42889, 
      length: 2, 
      convRule: rule10
  }, {
      start: 42891, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42892, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42893, 
      length: 1, 
      convRule: rule162
  }, {
      start: 42894, 
      length: 1, 
      convRule: rule14
  }, {
      start: 42896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 43002, 
      length: 1, 
      convRule: rule14
  }, {
      start: 43003, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43010, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43011, 
      length: 3, 
      convRule: rule45
  }, {
      start: 43014, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43015, 
      length: 4, 
      convRule: rule45
  }, {
      start: 43019, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43020, 
      length: 23, 
      convRule: rule45
  }, {
      start: 43043, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43045, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43047, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43048, 
      length: 4, 
      convRule: rule13
  }, {
      start: 43056, 
      length: 6, 
      convRule: rule17
  }, {
      start: 43062, 
      length: 2, 
      convRule: rule13
  }, {
      start: 43064, 
      length: 1, 
      convRule: rule3
  }, {
      start: 43065, 
      length: 1, 
      convRule: rule13
  }, {
      start: 43072, 
      length: 52, 
      convRule: rule45
  }, {
      start: 43124, 
      length: 4, 
      convRule: rule2
  }, {
      start: 43136, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43138, 
      length: 50, 
      convRule: rule45
  }, {
      start: 43188, 
      length: 16, 
      convRule: rule114
  }, {
      start: 43204, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43214, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43216, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43232, 
      length: 18, 
      convRule: rule84
  }, {
      start: 43250, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43256, 
      length: 3, 
      convRule: rule2
  }, {
      start: 43259, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43264, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43274, 
      length: 28, 
      convRule: rule45
  }, {
      start: 43302, 
      length: 8, 
      convRule: rule84
  }, {
      start: 43310, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43312, 
      length: 23, 
      convRule: rule45
  }, {
      start: 43335, 
      length: 11, 
      convRule: rule84
  }, {
      start: 43346, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43359, 
      length: 1, 
      convRule: rule2
  }, {
      start: 43360, 
      length: 29, 
      convRule: rule45
  }, {
      start: 43392, 
      length: 3, 
      convRule: rule84
  }, {
      start: 43395, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43396, 
      length: 47, 
      convRule: rule45
  }, {
      start: 43443, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43444, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43446, 
      length: 4, 
      convRule: rule84
  }, {
      start: 43450, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43452, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43453, 
      length: 4, 
      convRule: rule114
  }, {
      start: 43457, 
      length: 13, 
      convRule: rule2
  }, {
      start: 43471, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43472, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43486, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43520, 
      length: 41, 
      convRule: rule45
  }, {
      start: 43561, 
      length: 6, 
      convRule: rule84
  }, {
      start: 43567, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43569, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43571, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43573, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43584, 
      length: 3, 
      convRule: rule45
  }, {
      start: 43587, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43588, 
      length: 8, 
      convRule: rule45
  }, {
      start: 43596, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43597, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43600, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43612, 
      length: 4, 
      convRule: rule2
  }, {
      start: 43616, 
      length: 16, 
      convRule: rule45
  }, {
      start: 43632, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43633, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43639, 
      length: 3, 
      convRule: rule13
  }, {
      start: 43642, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43643, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43648, 
      length: 48, 
      convRule: rule45
  }, {
      start: 43696, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43697, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43698, 
      length: 3, 
      convRule: rule84
  }, {
      start: 43701, 
      length: 2, 
      convRule: rule45
  }, {
      start: 43703, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43705, 
      length: 5, 
      convRule: rule45
  }, {
      start: 43710, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43712, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43713, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43714, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43739, 
      length: 2, 
      convRule: rule45
  }, {
      start: 43741, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43742, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43777, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43785, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43793, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43808, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43816, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43968, 
      length: 35, 
      convRule: rule45
  }, {
      start: 44003, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44005, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44006, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44008, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44009, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44011, 
      length: 1, 
      convRule: rule2
  }, {
      start: 44012, 
      length: 1, 
      convRule: rule114
  }, {
      start: 44013, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44016, 
      length: 10, 
      convRule: rule8
  }, {
      start: 44032, 
      length: 11172, 
      convRule: rule45
  }, {
      start: 55216, 
      length: 23, 
      convRule: rule45
  }, {
      start: 55243, 
      length: 49, 
      convRule: rule45
  }, {
      start: 55296, 
      length: 896, 
      convRule: rule163
  }, {
      start: 56192, 
      length: 128, 
      convRule: rule163
  }, {
      start: 56320, 
      length: 1024, 
      convRule: rule163
  }, {
      start: 57344, 
      length: 6400, 
      convRule: rule164
  }, {
      start: 63744, 
      length: 302, 
      convRule: rule45
  }, {
      start: 64048, 
      length: 62, 
      convRule: rule45
  }, {
      start: 64112, 
      length: 106, 
      convRule: rule45
  }, {
      start: 64256, 
      length: 7, 
      convRule: rule14
  }, {
      start: 64275, 
      length: 5, 
      convRule: rule14
  }, {
      start: 64285, 
      length: 1, 
      convRule: rule45
  }, {
      start: 64286, 
      length: 1, 
      convRule: rule84
  }, {
      start: 64287, 
      length: 10, 
      convRule: rule45
  }, {
      start: 64297, 
      length: 1, 
      convRule: rule6
  }, {
      start: 64298, 
      length: 13, 
      convRule: rule45
  }, {
      start: 64312, 
      length: 5, 
      convRule: rule45
  }, {
      start: 64318, 
      length: 1, 
      convRule: rule45
  }, {
      start: 64320, 
      length: 2, 
      convRule: rule45
  }, {
      start: 64323, 
      length: 2, 
      convRule: rule45
  }, {
      start: 64326, 
      length: 108, 
      convRule: rule45
  }, {
      start: 64434, 
      length: 16, 
      convRule: rule10
  }, {
      start: 64467, 
      length: 363, 
      convRule: rule45
  }, {
      start: 64830, 
      length: 1, 
      convRule: rule4
  }, {
      start: 64831, 
      length: 1, 
      convRule: rule5
  }, {
      start: 64848, 
      length: 64, 
      convRule: rule45
  }, {
      start: 64914, 
      length: 54, 
      convRule: rule45
  }, {
      start: 65008, 
      length: 12, 
      convRule: rule45
  }, {
      start: 65020, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65021, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65024, 
      length: 16, 
      convRule: rule84
  }, {
      start: 65040, 
      length: 7, 
      convRule: rule2
  }, {
      start: 65047, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65048, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65049, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65056, 
      length: 7, 
      convRule: rule84
  }, {
      start: 65072, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65073, 
      length: 2, 
      convRule: rule7
  }, {
      start: 65075, 
      length: 2, 
      convRule: rule11
  }, {
      start: 65077, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65078, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65079, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65080, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65081, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65082, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65083, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65084, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65085, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65086, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65087, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65088, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65089, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65090, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65091, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65092, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65093, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65095, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65096, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65097, 
      length: 4, 
      convRule: rule2
  }, {
      start: 65101, 
      length: 3, 
      convRule: rule11
  }, {
      start: 65104, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65108, 
      length: 4, 
      convRule: rule2
  }, {
      start: 65112, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65113, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65114, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65115, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65116, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65117, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65118, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65119, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65122, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65123, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65124, 
      length: 3, 
      convRule: rule6
  }, {
      start: 65128, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65129, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65130, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65136, 
      length: 5, 
      convRule: rule45
  }, {
      start: 65142, 
      length: 135, 
      convRule: rule45
  }, {
      start: 65279, 
      length: 1, 
      convRule: rule16
  }, {
      start: 65281, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65284, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65285, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65288, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65289, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65290, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65291, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65292, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65293, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65294, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65296, 
      length: 10, 
      convRule: rule8
  }, {
      start: 65306, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65308, 
      length: 3, 
      convRule: rule6
  }, {
      start: 65311, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65313, 
      length: 26, 
      convRule: rule9
  }, {
      start: 65339, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65340, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65341, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65342, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65343, 
      length: 1, 
      convRule: rule11
  }, {
      start: 65344, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65345, 
      length: 26, 
      convRule: rule12
  }, {
      start: 65371, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65372, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65373, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65374, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65375, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65376, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65377, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65378, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65379, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65380, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65382, 
      length: 10, 
      convRule: rule45
  }, {
      start: 65392, 
      length: 1, 
      convRule: rule83
  }, {
      start: 65393, 
      length: 45, 
      convRule: rule45
  }, {
      start: 65438, 
      length: 2, 
      convRule: rule83
  }, {
      start: 65440, 
      length: 31, 
      convRule: rule45
  }, {
      start: 65474, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65482, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65490, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65498, 
      length: 3, 
      convRule: rule45
  }, {
      start: 65504, 
      length: 2, 
      convRule: rule3
  }, {
      start: 65506, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65507, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65508, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65509, 
      length: 2, 
      convRule: rule3
  }, {
      start: 65512, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65513, 
      length: 4, 
      convRule: rule6
  }, {
      start: 65517, 
      length: 2, 
      convRule: rule13
  }, {
      start: 65529, 
      length: 3, 
      convRule: rule16
  }, {
      start: 65532, 
      length: 2, 
      convRule: rule13
  }, {
      start: 65536, 
      length: 12, 
      convRule: rule45
  }, {
      start: 65549, 
      length: 26, 
      convRule: rule45
  }, {
      start: 65576, 
      length: 19, 
      convRule: rule45
  }, {
      start: 65596, 
      length: 2, 
      convRule: rule45
  }, {
      start: 65599, 
      length: 15, 
      convRule: rule45
  }, {
      start: 65616, 
      length: 14, 
      convRule: rule45
  }, {
      start: 65664, 
      length: 123, 
      convRule: rule45
  }, {
      start: 65792, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65794, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65799, 
      length: 45, 
      convRule: rule17
  }, {
      start: 65847, 
      length: 9, 
      convRule: rule13
  }, {
      start: 65856, 
      length: 53, 
      convRule: rule116
  }, {
      start: 65909, 
      length: 4, 
      convRule: rule17
  }, {
      start: 65913, 
      length: 17, 
      convRule: rule13
  }, {
      start: 65930, 
      length: 1, 
      convRule: rule17
  }, {
      start: 65936, 
      length: 12, 
      convRule: rule13
  }, {
      start: 66000, 
      length: 45, 
      convRule: rule13
  }, {
      start: 66045, 
      length: 1, 
      convRule: rule84
  }, {
      start: 66176, 
      length: 29, 
      convRule: rule45
  }, {
      start: 66208, 
      length: 49, 
      convRule: rule45
  }, {
      start: 66304, 
      length: 31, 
      convRule: rule45
  }, {
      start: 66336, 
      length: 4, 
      convRule: rule17
  }, {
      start: 66352, 
      length: 17, 
      convRule: rule45
  }, {
      start: 66369, 
      length: 1, 
      convRule: rule116
  }, {
      start: 66370, 
      length: 8, 
      convRule: rule45
  }, {
      start: 66378, 
      length: 1, 
      convRule: rule116
  }, {
      start: 66432, 
      length: 30, 
      convRule: rule45
  }, {
      start: 66463, 
      length: 1, 
      convRule: rule2
  }, {
      start: 66464, 
      length: 36, 
      convRule: rule45
  }, {
      start: 66504, 
      length: 8, 
      convRule: rule45
  }, {
      start: 66512, 
      length: 1, 
      convRule: rule2
  }, {
      start: 66513, 
      length: 5, 
      convRule: rule116
  }, {
      start: 66560, 
      length: 40, 
      convRule: rule165
  }, {
      start: 66600, 
      length: 40, 
      convRule: rule166
  }, {
      start: 66640, 
      length: 78, 
      convRule: rule45
  }, {
      start: 66720, 
      length: 10, 
      convRule: rule8
  }, {
      start: 67584, 
      length: 6, 
      convRule: rule45
  }, {
      start: 67592, 
      length: 1, 
      convRule: rule45
  }, {
      start: 67594, 
      length: 44, 
      convRule: rule45
  }, {
      start: 67639, 
      length: 2, 
      convRule: rule45
  }, {
      start: 67644, 
      length: 1, 
      convRule: rule45
  }, {
      start: 67647, 
      length: 23, 
      convRule: rule45
  }, {
      start: 67671, 
      length: 1, 
      convRule: rule2
  }, {
      start: 67672, 
      length: 8, 
      convRule: rule17
  }, {
      start: 67840, 
      length: 22, 
      convRule: rule45
  }, {
      start: 67862, 
      length: 6, 
      convRule: rule17
  }, {
      start: 67871, 
      length: 1, 
      convRule: rule2
  }, {
      start: 67872, 
      length: 26, 
      convRule: rule45
  }, {
      start: 67903, 
      length: 1, 
      convRule: rule2
  }, {
      start: 68096, 
      length: 1, 
      convRule: rule45
  }, {
      start: 68097, 
      length: 3, 
      convRule: rule84
  }, {
      start: 68101, 
      length: 2, 
      convRule: rule84
  }, {
      start: 68108, 
      length: 4, 
      convRule: rule84
  }, {
      start: 68112, 
      length: 4, 
      convRule: rule45
  }, {
      start: 68117, 
      length: 3, 
      convRule: rule45
  }, {
      start: 68121, 
      length: 27, 
      convRule: rule45
  }, {
      start: 68152, 
      length: 3, 
      convRule: rule84
  }, {
      start: 68159, 
      length: 1, 
      convRule: rule84
  }, {
      start: 68160, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68176, 
      length: 9, 
      convRule: rule2
  }, {
      start: 68192, 
      length: 29, 
      convRule: rule45
  }, {
      start: 68221, 
      length: 2, 
      convRule: rule17
  }, {
      start: 68223, 
      length: 1, 
      convRule: rule2
  }, {
      start: 68352, 
      length: 54, 
      convRule: rule45
  }, {
      start: 68409, 
      length: 7, 
      convRule: rule2
  }, {
      start: 68416, 
      length: 22, 
      convRule: rule45
  }, {
      start: 68440, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68448, 
      length: 19, 
      convRule: rule45
  }, {
      start: 68472, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68608, 
      length: 73, 
      convRule: rule45
  }, {
      start: 69216, 
      length: 31, 
      convRule: rule17
  }, {
      start: 69632, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69633, 
      length: 1, 
      convRule: rule84
  }, {
      start: 69634, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69635, 
      length: 53, 
      convRule: rule45
  }, {
      start: 69688, 
      length: 15, 
      convRule: rule84
  }, {
      start: 69703, 
      length: 7, 
      convRule: rule2
  }, {
      start: 69714, 
      length: 20, 
      convRule: rule17
  }, {
      start: 69734, 
      length: 10, 
      convRule: rule8
  }, {
      start: 69760, 
      length: 2, 
      convRule: rule84
  }, {
      start: 69762, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69763, 
      length: 45, 
      convRule: rule45
  }, {
      start: 69808, 
      length: 3, 
      convRule: rule114
  }, {
      start: 69811, 
      length: 4, 
      convRule: rule84
  }, {
      start: 69815, 
      length: 2, 
      convRule: rule114
  }, {
      start: 69817, 
      length: 2, 
      convRule: rule84
  }, {
      start: 69819, 
      length: 2, 
      convRule: rule2
  }, {
      start: 69821, 
      length: 1, 
      convRule: rule16
  }, {
      start: 69822, 
      length: 4, 
      convRule: rule2
  }, {
      start: 73728, 
      length: 879, 
      convRule: rule45
  }, {
      start: 74752, 
      length: 99, 
      convRule: rule116
  }, {
      start: 74864, 
      length: 4, 
      convRule: rule2
  }, {
      start: 77824, 
      length: 1071, 
      convRule: rule45
  }, {
      start: 92160, 
      length: 569, 
      convRule: rule45
  }, {
      start: 110592, 
      length: 2, 
      convRule: rule45
  }, {
      start: 118784, 
      length: 246, 
      convRule: rule13
  }, {
      start: 119040, 
      length: 39, 
      convRule: rule13
  }, {
      start: 119081, 
      length: 60, 
      convRule: rule13
  }, {
      start: 119141, 
      length: 2, 
      convRule: rule114
  }, {
      start: 119143, 
      length: 3, 
      convRule: rule84
  }, {
      start: 119146, 
      length: 3, 
      convRule: rule13
  }, {
      start: 119149, 
      length: 6, 
      convRule: rule114
  }, {
      start: 119155, 
      length: 8, 
      convRule: rule16
  }, {
      start: 119163, 
      length: 8, 
      convRule: rule84
  }, {
      start: 119171, 
      length: 2, 
      convRule: rule13
  }, {
      start: 119173, 
      length: 7, 
      convRule: rule84
  }, {
      start: 119180, 
      length: 30, 
      convRule: rule13
  }, {
      start: 119210, 
      length: 4, 
      convRule: rule84
  }, {
      start: 119214, 
      length: 48, 
      convRule: rule13
  }, {
      start: 119296, 
      length: 66, 
      convRule: rule13
  }, {
      start: 119362, 
      length: 3, 
      convRule: rule84
  }, {
      start: 119365, 
      length: 1, 
      convRule: rule13
  }, {
      start: 119552, 
      length: 87, 
      convRule: rule13
  }, {
      start: 119648, 
      length: 18, 
      convRule: rule17
  }, {
      start: 119808, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119834, 
      length: 26, 
      convRule: rule14
  }, {
      start: 119860, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119886, 
      length: 7, 
      convRule: rule14
  }, {
      start: 119894, 
      length: 18, 
      convRule: rule14
  }, {
      start: 119912, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119938, 
      length: 26, 
      convRule: rule14
  }, {
      start: 119964, 
      length: 1, 
      convRule: rule98
  }, {
      start: 119966, 
      length: 2, 
      convRule: rule98
  }, {
      start: 119970, 
      length: 1, 
      convRule: rule98
  }, {
      start: 119973, 
      length: 2, 
      convRule: rule98
  }, {
      start: 119977, 
      length: 4, 
      convRule: rule98
  }, {
      start: 119982, 
      length: 8, 
      convRule: rule98
  }, {
      start: 119990, 
      length: 4, 
      convRule: rule14
  }, {
      start: 119995, 
      length: 1, 
      convRule: rule14
  }, {
      start: 119997, 
      length: 7, 
      convRule: rule14
  }, {
      start: 120005, 
      length: 11, 
      convRule: rule14
  }, {
      start: 120016, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120042, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120068, 
      length: 2, 
      convRule: rule98
  }, {
      start: 120071, 
      length: 4, 
      convRule: rule98
  }, {
      start: 120077, 
      length: 8, 
      convRule: rule98
  }, {
      start: 120086, 
      length: 7, 
      convRule: rule98
  }, {
      start: 120094, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120120, 
      length: 2, 
      convRule: rule98
  }, {
      start: 120123, 
      length: 4, 
      convRule: rule98
  }, {
      start: 120128, 
      length: 5, 
      convRule: rule98
  }, {
      start: 120134, 
      length: 1, 
      convRule: rule98
  }, {
      start: 120138, 
      length: 7, 
      convRule: rule98
  }, {
      start: 120146, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120172, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120198, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120224, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120250, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120276, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120302, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120328, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120354, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120380, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120406, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120432, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120458, 
      length: 28, 
      convRule: rule14
  }, {
      start: 120488, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120513, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120514, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120539, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120540, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120546, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120571, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120572, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120597, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120598, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120604, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120629, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120630, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120655, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120656, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120662, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120687, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120688, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120713, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120714, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120720, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120745, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120746, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120771, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120772, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120778, 
      length: 1, 
      convRule: rule98
  }, {
      start: 120779, 
      length: 1, 
      convRule: rule14
  }, {
      start: 120782, 
      length: 50, 
      convRule: rule8
  }, {
      start: 126976, 
      length: 44, 
      convRule: rule13
  }, {
      start: 127024, 
      length: 100, 
      convRule: rule13
  }, {
      start: 127136, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127153, 
      length: 14, 
      convRule: rule13
  }, {
      start: 127169, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127185, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127232, 
      length: 11, 
      convRule: rule17
  }, {
      start: 127248, 
      length: 31, 
      convRule: rule13
  }, {
      start: 127280, 
      length: 58, 
      convRule: rule13
  }, {
      start: 127344, 
      length: 43, 
      convRule: rule13
  }, {
      start: 127462, 
      length: 29, 
      convRule: rule13
  }, {
      start: 127504, 
      length: 43, 
      convRule: rule13
  }, {
      start: 127552, 
      length: 9, 
      convRule: rule13
  }, {
      start: 127568, 
      length: 2, 
      convRule: rule13
  }, {
      start: 127744, 
      length: 33, 
      convRule: rule13
  }, {
      start: 127792, 
      length: 6, 
      convRule: rule13
  }, {
      start: 127799, 
      length: 70, 
      convRule: rule13
  }, {
      start: 127872, 
      length: 20, 
      convRule: rule13
  }, {
      start: 127904, 
      length: 37, 
      convRule: rule13
  }, {
      start: 127942, 
      length: 5, 
      convRule: rule13
  }, {
      start: 127968, 
      length: 17, 
      convRule: rule13
  }, {
      start: 128000, 
      length: 63, 
      convRule: rule13
  }, {
      start: 128064, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128066, 
      length: 182, 
      convRule: rule13
  }, {
      start: 128249, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128256, 
      length: 62, 
      convRule: rule13
  }, {
      start: 128336, 
      length: 24, 
      convRule: rule13
  }, {
      start: 128507, 
      length: 5, 
      convRule: rule13
  }, {
      start: 128513, 
      length: 16, 
      convRule: rule13
  }, {
      start: 128530, 
      length: 3, 
      convRule: rule13
  }, {
      start: 128534, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128536, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128538, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128540, 
      length: 3, 
      convRule: rule13
  }, {
      start: 128544, 
      length: 6, 
      convRule: rule13
  }, {
      start: 128552, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128557, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128560, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128565, 
      length: 12, 
      convRule: rule13
  }, {
      start: 128581, 
      length: 11, 
      convRule: rule13
  }, {
      start: 128640, 
      length: 70, 
      convRule: rule13
  }, {
      start: 128768, 
      length: 116, 
      convRule: rule13
  }, {
      start: 131072, 
      length: 42711, 
      convRule: rule45
  }, {
      start: 173824, 
      length: 4149, 
      convRule: rule45
  }, {
      start: 177984, 
      length: 222, 
      convRule: rule45
  }, {
      start: 194560, 
      length: 542, 
      convRule: rule45
  }, {
      start: 917505, 
      length: 1, 
      convRule: rule16
  }, {
      start: 917536, 
      length: 96, 
      convRule: rule16
  }, {
      start: 917760, 
      length: 240, 
      convRule: rule84
  }, {
      start: 983040, 
      length: 65534, 
      convRule: rule164
  }, {
      start: 1048576, 
      length: 65534, 
      convRule: rule164
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $24 = $$char < 256;
              if ($24) {
                  return numLat1Blocks;
              };
              if (!$24) {
                  return numBlocks;
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4791, column 23 - line 4791, column 70: " + [ $24.constructor.name ]);
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories);
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4793, column 8 - line 4795, column 72: " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
  var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);                                                                                                                                                                                    
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["NUMCAT_LU"] = NUMCAT_LU;
  exports["NUMCAT_LL"] = NUMCAT_LL;
  exports["NUMCAT_LT"] = NUMCAT_LT;
  exports["NUMCAT_LM"] = NUMCAT_LM;
  exports["NUMCAT_LO"] = NUMCAT_LO;
  exports["NUMCAT_MN"] = NUMCAT_MN;
  exports["NUMCAT_MC"] = NUMCAT_MC;
  exports["NUMCAT_ME"] = NUMCAT_ME;
  exports["NUMCAT_ND"] = NUMCAT_ND;
  exports["NUMCAT_NL"] = NUMCAT_NL;
  exports["NUMCAT_NO"] = NUMCAT_NO;
  exports["NUMCAT_PC"] = NUMCAT_PC;
  exports["NUMCAT_PD"] = NUMCAT_PD;
  exports["NUMCAT_PS"] = NUMCAT_PS;
  exports["NUMCAT_PE"] = NUMCAT_PE;
  exports["NUMCAT_PI"] = NUMCAT_PI;
  exports["NUMCAT_PF"] = NUMCAT_PF;
  exports["NUMCAT_PO"] = NUMCAT_PO;
  exports["NUMCAT_SM"] = NUMCAT_SM;
  exports["NUMCAT_SC"] = NUMCAT_SC;
  exports["NUMCAT_SK"] = NUMCAT_SK;
  exports["NUMCAT_SO"] = NUMCAT_SO;
  exports["NUMCAT_ZS"] = NUMCAT_ZS;
  exports["NUMCAT_ZL"] = NUMCAT_ZL;
  exports["NUMCAT_ZP"] = NUMCAT_ZP;
  exports["NUMCAT_CC"] = NUMCAT_CC;
  exports["NUMCAT_CF"] = NUMCAT_CF;
  exports["NUMCAT_CS"] = NUMCAT_CS;
  exports["NUMCAT_CO"] = NUMCAT_CO;
  exports["NUMCAT_CN"] = NUMCAT_CN;
  exports["allchars"] = allchars;
  exports["blkCmp"] = blkCmp;
  exports["bsearch"] = bsearch;
  exports["caseConv"] = caseConv;
  exports["checkAttr"] = checkAttr;
  exports["checkAttrS"] = checkAttrS;
  exports["convchars"] = convchars;
  exports["gencatCC"] = gencatCC;
  exports["gencatCF"] = gencatCF;
  exports["gencatCO"] = gencatCO;
  exports["gencatCS"] = gencatCS;
  exports["gencatLL"] = gencatLL;
  exports["gencatLM"] = gencatLM;
  exports["gencatLO"] = gencatLO;
  exports["gencatLT"] = gencatLT;
  exports["gencatLU"] = gencatLU;
  exports["gencatMC"] = gencatMC;
  exports["gencatME"] = gencatME;
  exports["gencatMN"] = gencatMN;
  exports["gencatND"] = gencatND;
  exports["gencatNL"] = gencatNL;
  exports["gencatNO"] = gencatNO;
  exports["gencatPC"] = gencatPC;
  exports["gencatPD"] = gencatPD;
  exports["gencatPE"] = gencatPE;
  exports["gencatPF"] = gencatPF;
  exports["gencatPI"] = gencatPI;
  exports["gencatPO"] = gencatPO;
  exports["gencatPS"] = gencatPS;
  exports["gencatSC"] = gencatSC;
  exports["gencatSK"] = gencatSK;
  exports["gencatSM"] = gencatSM;
  exports["gencatSO"] = gencatSO;
  exports["gencatZL"] = gencatZL;
  exports["gencatZP"] = gencatZP;
  exports["gencatZS"] = gencatZS;
  exports["getRule"] = getRule;
  exports["nullrule"] = nullrule;
  exports["numBlocks"] = numBlocks;
  exports["numConvBlocks"] = numConvBlocks;
  exports["numLat1Blocks"] = numLat1Blocks;
  exports["numSpaceBlocks"] = numSpaceBlocks;
  exports["rule0"] = rule0;
  exports["rule1"] = rule1;
  exports["rule10"] = rule10;
  exports["rule100"] = rule100;
  exports["rule101"] = rule101;
  exports["rule102"] = rule102;
  exports["rule103"] = rule103;
  exports["rule104"] = rule104;
  exports["rule105"] = rule105;
  exports["rule106"] = rule106;
  exports["rule107"] = rule107;
  exports["rule108"] = rule108;
  exports["rule109"] = rule109;
  exports["rule11"] = rule11;
  exports["rule110"] = rule110;
  exports["rule111"] = rule111;
  exports["rule112"] = rule112;
  exports["rule113"] = rule113;
  exports["rule114"] = rule114;
  exports["rule115"] = rule115;
  exports["rule116"] = rule116;
  exports["rule117"] = rule117;
  exports["rule118"] = rule118;
  exports["rule119"] = rule119;
  exports["rule12"] = rule12;
  exports["rule120"] = rule120;
  exports["rule121"] = rule121;
  exports["rule122"] = rule122;
  exports["rule123"] = rule123;
  exports["rule124"] = rule124;
  exports["rule125"] = rule125;
  exports["rule126"] = rule126;
  exports["rule127"] = rule127;
  exports["rule128"] = rule128;
  exports["rule129"] = rule129;
  exports["rule13"] = rule13;
  exports["rule130"] = rule130;
  exports["rule131"] = rule131;
  exports["rule132"] = rule132;
  exports["rule133"] = rule133;
  exports["rule134"] = rule134;
  exports["rule135"] = rule135;
  exports["rule136"] = rule136;
  exports["rule137"] = rule137;
  exports["rule138"] = rule138;
  exports["rule139"] = rule139;
  exports["rule14"] = rule14;
  exports["rule140"] = rule140;
  exports["rule141"] = rule141;
  exports["rule142"] = rule142;
  exports["rule143"] = rule143;
  exports["rule144"] = rule144;
  exports["rule145"] = rule145;
  exports["rule146"] = rule146;
  exports["rule147"] = rule147;
  exports["rule148"] = rule148;
  exports["rule149"] = rule149;
  exports["rule15"] = rule15;
  exports["rule150"] = rule150;
  exports["rule151"] = rule151;
  exports["rule152"] = rule152;
  exports["rule153"] = rule153;
  exports["rule154"] = rule154;
  exports["rule155"] = rule155;
  exports["rule156"] = rule156;
  exports["rule157"] = rule157;
  exports["rule158"] = rule158;
  exports["rule159"] = rule159;
  exports["rule16"] = rule16;
  exports["rule160"] = rule160;
  exports["rule161"] = rule161;
  exports["rule162"] = rule162;
  exports["rule163"] = rule163;
  exports["rule164"] = rule164;
  exports["rule165"] = rule165;
  exports["rule166"] = rule166;
  exports["rule17"] = rule17;
  exports["rule18"] = rule18;
  exports["rule19"] = rule19;
  exports["rule2"] = rule2;
  exports["rule20"] = rule20;
  exports["rule21"] = rule21;
  exports["rule22"] = rule22;
  exports["rule23"] = rule23;
  exports["rule24"] = rule24;
  exports["rule25"] = rule25;
  exports["rule26"] = rule26;
  exports["rule27"] = rule27;
  exports["rule28"] = rule28;
  exports["rule29"] = rule29;
  exports["rule3"] = rule3;
  exports["rule30"] = rule30;
  exports["rule31"] = rule31;
  exports["rule32"] = rule32;
  exports["rule33"] = rule33;
  exports["rule34"] = rule34;
  exports["rule35"] = rule35;
  exports["rule36"] = rule36;
  exports["rule37"] = rule37;
  exports["rule38"] = rule38;
  exports["rule39"] = rule39;
  exports["rule4"] = rule4;
  exports["rule40"] = rule40;
  exports["rule41"] = rule41;
  exports["rule42"] = rule42;
  exports["rule43"] = rule43;
  exports["rule44"] = rule44;
  exports["rule45"] = rule45;
  exports["rule46"] = rule46;
  exports["rule47"] = rule47;
  exports["rule48"] = rule48;
  exports["rule49"] = rule49;
  exports["rule5"] = rule5;
  exports["rule50"] = rule50;
  exports["rule51"] = rule51;
  exports["rule52"] = rule52;
  exports["rule53"] = rule53;
  exports["rule54"] = rule54;
  exports["rule55"] = rule55;
  exports["rule56"] = rule56;
  exports["rule57"] = rule57;
  exports["rule58"] = rule58;
  exports["rule59"] = rule59;
  exports["rule6"] = rule6;
  exports["rule60"] = rule60;
  exports["rule61"] = rule61;
  exports["rule62"] = rule62;
  exports["rule63"] = rule63;
  exports["rule64"] = rule64;
  exports["rule65"] = rule65;
  exports["rule66"] = rule66;
  exports["rule67"] = rule67;
  exports["rule68"] = rule68;
  exports["rule69"] = rule69;
  exports["rule7"] = rule7;
  exports["rule70"] = rule70;
  exports["rule71"] = rule71;
  exports["rule72"] = rule72;
  exports["rule73"] = rule73;
  exports["rule74"] = rule74;
  exports["rule75"] = rule75;
  exports["rule76"] = rule76;
  exports["rule77"] = rule77;
  exports["rule78"] = rule78;
  exports["rule79"] = rule79;
  exports["rule8"] = rule8;
  exports["rule80"] = rule80;
  exports["rule81"] = rule81;
  exports["rule82"] = rule82;
  exports["rule83"] = rule83;
  exports["rule84"] = rule84;
  exports["rule85"] = rule85;
  exports["rule86"] = rule86;
  exports["rule87"] = rule87;
  exports["rule88"] = rule88;
  exports["rule89"] = rule89;
  exports["rule9"] = rule9;
  exports["rule90"] = rule90;
  exports["rule91"] = rule91;
  exports["rule92"] = rule92;
  exports["rule93"] = rule93;
  exports["rule94"] = rule94;
  exports["rule95"] = rule95;
  exports["rule96"] = rule96;
  exports["rule97"] = rule97;
  exports["rule98"] = rule98;
  exports["rule99"] = rule99;
  exports["spacechars"] = spacechars;
  exports["uIswalnum"] = uIswalnum;
  exports["uIswalpha"] = uIswalpha;
  exports["uIswspace"] = uIswspace;
  exports["uIswupper"] = uIswupper;
  exports["uTowlower"] = uTowlower;
  exports["uTowupper"] = uTowupper;
})(PS["Data.Char.Unicode.Internal"] = PS["Data.Char.Unicode.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode_Internal = PS["Data.Char.Unicode.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var toUpper = function ($45) {
      return Data_Char.fromCharCode(Data_Char_Unicode_Internal.uTowupper(Data_Char.toCharCode($45)));
  };
  var toLower = function ($47) {
      return Data_Char.fromCharCode(Data_Char_Unicode_Internal.uTowlower(Data_Char.toCharCode($47)));
  }; 
  var isUpper = function ($48) {
      return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($48));
  };
  var isSpace = function (c) {
      var uc = Data_Char.toCharCode(c);
      var $8 = uc <= 823;
      if ($8) {
          return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
      };
      if (!$8) {
          return Data_Function.apply(Data_Char_Unicode_Internal.uIswspace)(Data_Char.toCharCode(c));
      };
      throw new Error("Failed pattern match at Data.Char.Unicode line 336, column 13 - line 338, column 45: " + [ $8.constructor.name ]);
  };
  var isOctDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0");
      return diff <= 7 && diff >= 0;
  };
  var isDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0");
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDigit(c) || ((function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A");
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a");
          return diff <= 5 && diff >= 0;
      })());
  };
  var isAlphaNum = function ($52) {
      return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($52));
  };
  var isAlpha = function ($53) {
      return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($53));
  }; 
  var digitToInt = function (c) {
      var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A");
      var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a");
      var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0");
      var go = function (c1) {
          if (dec <= 9 && dec >= 0) {
              return new Data_Maybe.Just(dec);
          };
          if (hexLower <= 5 && hexLower >= 0) {
              return Data_Function.apply(Data_Maybe.Just.create)(hexLower + 10 | 0);
          };
          if (hexUpper <= 5 && hexUpper >= 0) {
              return Data_Function.apply(Data_Maybe.Just.create)(hexUpper + 10 | 0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode line 533, column 5 - line 536, column 52: " + [ c1.constructor.name ]);
      };
      return go(c);
  };
  exports["digitToInt"] = digitToInt;
  exports["isAlpha"] = isAlpha;
  exports["isAlphaNum"] = isAlphaNum;
  exports["isDigit"] = isDigit;
  exports["isHexDigit"] = isHexDigit;
  exports["isOctDigit"] = isOctDigit;
  exports["isSpace"] = isSpace;
  exports["isUpper"] = isUpper;
  exports["toLower"] = toLower;
  exports["toUpper"] = toUpper;
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExistsR = Unsafe_Coerce.unsafeCoerce;
  var mkExistsR = Unsafe_Coerce.unsafeCoerce;
  exports["mkExistsR"] = mkExistsR;
  exports["runExistsR"] = runExistsR;
})(PS["Data.ExistsR"] = PS["Data.ExistsR"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Field = PS["Data.Field"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (k) {
              return function (tree) {
                  if (tree instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var comp = Data_Ord.compare(dictOrd);
                  var __unused = function (dictPartial1) {
                      return function ($dollar37) {
                          return $dollar37;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (tree instanceof Two) {
                          var $162 = comp(k)(tree.value1);
                          if ($162 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          if ($162 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      if (tree instanceof Three) {
                          var $167 = comp(k)(tree.value1);
                          if ($167 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          var $169 = comp(k)(tree.value4);
                          if ($169 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value5);
                          };
                          if ($167 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          if ($169 instanceof Data_Ordering.GT) {
                              return lookup(dictOrd)(k)(tree.value6);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      throw new Error("Failed pattern match at Data.Map line 133, column 10 - line 147, column 39: " + [ tree.constructor.name ]);
                  })());
              };
          };
      });
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 71, column 3 - line 71, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var tree = __copy_tree;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return tree;
                  };
                  if (v instanceof Data_List.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof TwoRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 224, column 3 - line 229, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 222, column 1 - line 222, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 260, column 5 - line 265, column 104: " + [ v.value0.constructor.name, v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 258, column 3 - line 258, column 54: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var comp = Data_Ord.compare(dictOrd);
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var $290 = comp(k)(v1.value1);
                              if ($290 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if ($290 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var $295 = comp(k)(v1.value1);
                              if ($295 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var $297 = comp(k)(v1.value4);
                              if ($297 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if ($295 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if ($295 instanceof Data_Ordering.GT && $297 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 241, column 3 - line 241, column 52: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["functorMap"] = functorMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Coroutine_Aff = PS["Control.Coroutine.Aff"];
  var Control_Coroutine_Stalling = PS["Control.Coroutine.Stalling"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Free = PS["Control.Monad.Aff.Free"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Maybe = PS["Data.Maybe"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];               
  var runEventSource = function (v) {
      return v;
  };
  exports["runEventSource"] = runEventSource;
})(PS["Halogen.Query.EventSource"] = PS["Halogen.Query.EventSource"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Applicative = PS["Control.Applicative"];        
  var Get = (function () {
      function Get(value0) {
          this.value0 = value0;
      };
      Get.create = function (value0) {
          return new Get(value0);
      };
      return Get;
  })();
  var Modify = (function () {
      function Modify(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Modify.create = function (value0) {
          return function (value1) {
              return new Modify(value0, value1);
          };
      };
      return Modify;
  })();
  var stateN = function (dictMonad) {
      return function (dictMonadState) {
          return function (v) {
              if (v instanceof Get) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Class.get(dictMonadState))(function ($22) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v.value0($22));
                  });
              };
              if (v instanceof Modify) {
                  return Data_Functor.voidLeft(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_State_Class.modify(dictMonadState)(v.value0))(v.value1);
              };
              throw new Error("Failed pattern match at Halogen.Query.StateF line 33, column 1 - line 33, column 40: " + [ v.constructor.name ]);
          };
      };
  };
  var functorStateF = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Get) {
              return new Get(function ($24) {
                  return f(v.value0($24));
              });
          };
          if (v instanceof Modify) {
              return new Modify(v.value0, f(v.value1));
          };
          throw new Error("Failed pattern match at Halogen.Query.StateF line 21, column 3 - line 21, column 32: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  exports["Get"] = Get;
  exports["Modify"] = Modify;
  exports["stateN"] = stateN;
  exports["functorStateF"] = functorStateF;
})(PS["Halogen.Query.StateF"] = PS["Halogen.Query.StateF"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_Aff_Free = PS["Control.Monad.Aff.Free"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_StateF = PS["Halogen.Query.StateF"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Coroutine_Stalling = PS["Control.Coroutine.Stalling"];        
  var Pending = (function () {
      function Pending() {

      };
      Pending.value = new Pending();
      return Pending;
  })();
  var StateHF = (function () {
      function StateHF(value0) {
          this.value0 = value0;
      };
      StateHF.create = function (value0) {
          return new StateHF(value0);
      };
      return StateHF;
  })();
  var SubscribeHF = (function () {
      function SubscribeHF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SubscribeHF.create = function (value0) {
          return function (value1) {
              return new SubscribeHF(value0, value1);
          };
      };
      return SubscribeHF;
  })();
  var QueryHF = (function () {
      function QueryHF(value0) {
          this.value0 = value0;
      };
      QueryHF.create = function (value0) {
          return new QueryHF(value0);
      };
      return QueryHF;
  })();
  var RenderHF = (function () {
      function RenderHF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RenderHF.create = function (value0) {
          return function (value1) {
              return new RenderHF(value0, value1);
          };
      };
      return RenderHF;
  })();
  var RenderPendingHF = (function () {
      function RenderPendingHF(value0) {
          this.value0 = value0;
      };
      RenderPendingHF.create = function (value0) {
          return new RenderPendingHF(value0);
      };
      return RenderPendingHF;
  })();
  var HaltHF = (function () {
      function HaltHF(value0) {
          this.value0 = value0;
      };
      HaltHF.create = function (value0) {
          return new HaltHF(value0);
      };
      return HaltHF;
  })();
  var functorHalogenF = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (h) {
              if (h instanceof StateHF) {
                  return new StateHF(Data_Functor.map(Halogen_Query_StateF.functorStateF)(f)(h.value0));
              };
              if (h instanceof SubscribeHF) {
                  return new SubscribeHF(h.value0, f(h.value1));
              };
              if (h instanceof QueryHF) {
                  return new QueryHF(Data_Functor.map(dictFunctor)(f)(h.value0));
              };
              if (h instanceof RenderHF) {
                  return new RenderHF(h.value0, f(h.value1));
              };
              if (h instanceof RenderPendingHF) {
                  return new RenderPendingHF(Data_Functor.map(Data_Functor.functorFn)(f)(h.value0));
              };
              if (h instanceof HaltHF) {
                  return new HaltHF(h.value0);
              };
              throw new Error("Failed pattern match at Halogen.Query.HalogenF line 37, column 5 - line 43, column 31: " + [ h.constructor.name ]);
          };
      });
  };
  exports["StateHF"] = StateHF;
  exports["SubscribeHF"] = SubscribeHF;
  exports["QueryHF"] = QueryHF;
  exports["RenderHF"] = RenderHF;
  exports["RenderPendingHF"] = RenderPendingHF;
  exports["HaltHF"] = HaltHF;
  exports["Pending"] = Pending;
  exports["functorHalogenF"] = functorHalogenF;
})(PS["Halogen.Query.HalogenF"] = PS["Halogen.Query.HalogenF"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Halogen_Query_HalogenF = PS["Halogen.Query.HalogenF"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var PostRender = (function () {
      function PostRender(value0) {
          this.value0 = value0;
      };
      PostRender.create = function (value0) {
          return new PostRender(value0);
      };
      return PostRender;
  })();
  var Finalized = (function () {
      function Finalized(value0) {
          this.value0 = value0;
      };
      Finalized.create = function (value0) {
          return new Finalized(value0);
      };
      return Finalized;
  })();
  var FinalizedF = (function () {
      function FinalizedF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FinalizedF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FinalizedF(value0, value1, value2);
              };
          };
      };
      return FinalizedF;
  })();
  var runFinalized = function (k) {
      return function (f) {
          var $6 = Unsafe_Coerce.unsafeCoerce(f);
          return k($6.value0)($6.value1)($6.value2);
      };
  };
  var finalized = function (e) {
      return function (s) {
          return function (i) {
              return Unsafe_Coerce.unsafeCoerce(new FinalizedF(e, s, i));
          };
      };
  };
  exports["PostRender"] = PostRender;
  exports["Finalized"] = Finalized;
  exports["finalized"] = finalized;
  exports["runFinalized"] = runFinalized;
})(PS["Halogen.Component.Hook"] = PS["Halogen.Component.Hook"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Halogen.HTML.Events.Handler

  exports.preventDefaultImpl = function (e) {
    return function () {
      e.preventDefault();
    };
  };

  exports.stopPropagationImpl = function (e) {
    return function () {
      e.stopPropagation();
    };
  };

  exports.stopImmediatePropagationImpl = function (e) {
    return function () {
      e.stopImmediatePropagation();
    };
  };
})(PS["Halogen.HTML.Events.Handler"] = PS["Halogen.HTML.Events.Handler"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Halogen.HTML.Events.Handler"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Writer = PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM = PS["DOM"];
  var Halogen_HTML_Events_Types = PS["Halogen.HTML.Events.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var PreventDefault = (function () {
      function PreventDefault() {

      };
      PreventDefault.value = new PreventDefault();
      return PreventDefault;
  })();
  var StopPropagation = (function () {
      function StopPropagation() {

      };
      StopPropagation.value = new StopPropagation();
      return StopPropagation;
  })();
  var StopImmediatePropagation = (function () {
      function StopImmediatePropagation() {

      };
      StopImmediatePropagation.value = new StopImmediatePropagation();
      return StopImmediatePropagation;
  })();
  var EventHandler = function (x) {
      return x;
  };                                                                                                                                                                                                      
  var runEventHandler = function (dictMonad) {
      return function (dictMonadEff) {
          return function (e) {
              return function (v) {
                  var applyUpdate = function (v1) {
                      if (v1 instanceof PreventDefault) {
                          return $foreign.preventDefaultImpl(e);
                      };
                      if (v1 instanceof StopPropagation) {
                          return $foreign.stopPropagationImpl(e);
                      };
                      if (v1 instanceof StopImmediatePropagation) {
                          return $foreign.stopImmediatePropagationImpl(e);
                      };
                      throw new Error("Failed pattern match at Halogen.HTML.Events.Handler line 89, column 3 - line 89, column 63: " + [ v1.constructor.name ]);
                  };
                  var $13 = Control_Monad_Writer.runWriter(v);
                  return Data_Function.apply(Control_Monad_Eff_Class.liftEff(dictMonadEff))(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($13.value1)(applyUpdate))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($13.value0)));
              };
          };
      };
  };                                                                                                                                                                                  
  var functorEventHandler = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v);
      };
  });
  var applyEventHandler = new Control_Apply.Apply(function () {
      return functorEventHandler;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1);
      };
  });
  var applicativeEventHandler = new Control_Applicative.Applicative(function () {
      return applyEventHandler;
  }, function ($23) {
      return EventHandler(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Data_Identity.applicativeIdentity))($23));
  });
  exports["runEventHandler"] = runEventHandler;
  exports["functorEventHandler"] = functorEventHandler;
  exports["applyEventHandler"] = applyEventHandler;
  exports["applicativeEventHandler"] = applicativeEventHandler;
})(PS["Halogen.HTML.Events.Handler"] = PS["Halogen.HTML.Events.Handler"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Exists = PS["Data.Exists"];
  var Data_ExistsR = PS["Data.ExistsR"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Halogen_HTML_Events_Handler = PS["Halogen.HTML.Events.Handler"];
  var Halogen_HTML_Events_Types = PS["Halogen.HTML.Events.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var TagName = function (x) {
      return x;
  };
  var PropName = function (x) {
      return x;
  };
  var EventName = function (x) {
      return x;
  };
  var HandlerF = (function () {
      function HandlerF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HandlerF.create = function (value0) {
          return function (value1) {
              return new HandlerF(value0, value1);
          };
      };
      return HandlerF;
  })();
  var ClassName = function (x) {
      return x;
  };
  var AttrName = function (x) {
      return x;
  };
  var PropF = (function () {
      function PropF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PropF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PropF(value0, value1, value2);
              };
          };
      };
      return PropF;
  })();
  var Prop = (function () {
      function Prop(value0) {
          this.value0 = value0;
      };
      Prop.create = function (value0) {
          return new Prop(value0);
      };
      return Prop;
  })();
  var Attr = (function () {
      function Attr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attr(value0, value1, value2);
              };
          };
      };
      return Attr;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Handler = (function () {
      function Handler(value0) {
          this.value0 = value0;
      };
      Handler.create = function (value0) {
          return new Handler(value0);
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Slot = (function () {
      function Slot(value0) {
          this.value0 = value0;
      };
      Slot.create = function (value0) {
          return new Slot(value0);
      };
      return Slot;
  })();
  var IsProp = function (toPropString) {
      this.toPropString = toPropString;
  };
  var toPropString = function (dict) {
      return dict.toPropString;
  };
  var tagName = TagName;
  var stringIsProp = new IsProp(function (v) {
      return function (v1) {
          return function (s) {
              return s;
          };
      };
  });
  var runTagName = function (v) {
      return v;
  };
  var runPropName = function (v) {
      return v;
  };
  var runNamespace = function (v) {
      return v;
  };
  var runEventName = function (v) {
      return v;
  };
  var runClassName = function (v) {
      return v;
  };
  var runAttrName = function (v) {
      return v;
  };
  var propName = PropName;
  var prop = function (dictIsProp) {
      return function (name) {
          return function (attr) {
              return function (v) {
                  return new Prop(Data_Exists.mkExists(new PropF(name, v, Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(toPropString(dictIsProp)))(attr))));
              };
          };
      };
  }; 
  var handler = function (name) {
      return function (k) {
          return new Handler(Data_ExistsR.mkExistsR(new HandlerF(name, k)));
      };
  };
  var eventName = EventName;
  var element = Element.create(Data_Maybe.Nothing.value);
  var className = ClassName;
  var booleanIsProp = new IsProp(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2) {
                  return runAttrName(v);
              };
              if (!v2) {
                  return "";
              };
              throw new Error("Failed pattern match at Halogen.HTML.Core line 138, column 3 - line 138, column 46: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });                                                                            
  var attrName = AttrName;
  exports["Text"] = Text;
  exports["Element"] = Element;
  exports["Slot"] = Slot;
  exports["HandlerF"] = HandlerF;
  exports["Prop"] = Prop;
  exports["Attr"] = Attr;
  exports["Key"] = Key;
  exports["Handler"] = Handler;
  exports["Ref"] = Ref;
  exports["PropF"] = PropF;
  exports["IsProp"] = IsProp;
  exports["attrName"] = attrName;
  exports["className"] = className;
  exports["element"] = element;
  exports["eventName"] = eventName;
  exports["handler"] = handler;
  exports["prop"] = prop;
  exports["propName"] = propName;
  exports["runAttrName"] = runAttrName;
  exports["runClassName"] = runClassName;
  exports["runEventName"] = runEventName;
  exports["runNamespace"] = runNamespace;
  exports["runPropName"] = runPropName;
  exports["runTagName"] = runTagName;
  exports["tagName"] = tagName;
  exports["toPropString"] = toPropString;
  exports["stringIsProp"] = stringIsProp;
  exports["booleanIsProp"] = booleanIsProp;
})(PS["Halogen.HTML.Core"] = PS["Halogen.HTML.Core"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Category = PS["Control.Category"];        
  var runTree = function (k) {
      return function (t) {
          var $5 = Unsafe_Coerce.unsafeCoerce(t);
          return k($5);
      };
  };
  var mkTree$prime = Unsafe_Coerce.unsafeCoerce;
  exports["mkTree'"] = mkTree$prime;
  exports["runTree"] = runTree;
})(PS["Halogen.Component.Tree"] = PS["Halogen.Component.Tree"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff_Free = PS["Control.Monad.Aff.Free"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenF = PS["Halogen.Query.HalogenF"];
  var Halogen_Query_StateF = PS["Halogen.Query.StateF"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var modify = function (f) {
      return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.StateHF(new Halogen_Query_StateF.Modify(f, Data_Unit.unit)));
  };
  var liftH = function ($1) {
      return Control_Monad_Free.liftF(Halogen_Query_HalogenF.QueryHF.create($1));
  };
  var gets = function ($2) {
      return Control_Monad_Free.liftF(Halogen_Query_HalogenF.StateHF.create(Halogen_Query_StateF.Get.create($2)));
  };
  var get = gets(Control_Category.id(Control_Category.categoryFn));
  var action = function (act) {
      return act(Data_Unit.unit);
  };
  exports["action"] = action;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["liftH"] = liftH;
  exports["modify"] = modify;
})(PS["Halogen.Query"] = PS["Halogen.Query"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Component_Hook = PS["Halogen.Component.Hook"];
  var Halogen_Component_Tree = PS["Halogen.Component.Tree"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenF = PS["Halogen.Query.HalogenF"];
  var Halogen_Query_StateF = PS["Halogen.Query.StateF"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Control_Coroutine_Stalling = PS["Control.Coroutine.Stalling"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var renderComponent = function (v) {
      return v.render;
  };
  var queryComponent = function (v) {
      return v["eval"];
  };
  var lifecycleComponent = function (spec) {
      var renderTree = function (html) {
          return Halogen_Component_Tree["mkTree'"]({
              slot: Data_Unit.unit, 
              html: Data_Lazy.defer(function (v) {
                  return Unsafe_Coerce.unsafeCoerce(html);
              }), 
              eq: function (v) {
                  return function (v1) {
                      return false;
                  };
              }, 
              thunk: false
          });
      };
      return {
          render: function (s) {
              return {
                  state: s, 
                  hooks: [  ], 
                  tree: renderTree(spec.render(s))
              };
          }, 
          "eval": spec["eval"], 
          initializer: spec.initializer, 
          finalizers: function (s) {
              return Data_Maybe.maybe([  ])(function (i) {
                  return [ Halogen_Component_Hook.finalized(spec["eval"])(s)(i) ];
              })(spec.finalizer);
          }
      };
  };
  var initializeComponent = function (v) {
      return v.initializer;
  };
  var component = function (spec) {
      return lifecycleComponent({
          render: spec.render, 
          "eval": spec["eval"], 
          initializer: Data_Maybe.Nothing.value, 
          finalizer: Data_Maybe.Nothing.value
      });
  };
  exports["component"] = component;
  exports["initializeComponent"] = initializeComponent;
  exports["lifecycleComponent"] = lifecycleComponent;
  exports["queryComponent"] = queryComponent;
  exports["renderComponent"] = renderComponent;
})(PS["Halogen.Component"] = PS["Halogen.Component"] || {});
(function(exports) {
  /* global exports, require */
  "use strict";
  var vcreateElement =require("virtual-dom/create-element");
  var vdiff =require("virtual-dom/diff");
  var vpatch =require("virtual-dom/patch");
  var VText =require("virtual-dom/vnode/vtext");
  var VirtualNode =require("virtual-dom/vnode/vnode");
  var SoftSetHook =require("virtual-dom/virtual-hyperscript/hooks/soft-set-hook"); 

  // jshint maxparams: 2
  exports.prop = function (key, value) {
    var props = {};
    props[key] = value;
    return props;
  };

  // jshint maxparams: 2
  exports.attr = function (key, value) {
    var props = { attributes: {} };
    props.attributes[key] = value;
    return props;
  };

  function HandlerHook (key, f) {
    this.key = key;
    this.callback = function (e) {
      f(e)();
    };
  }

  HandlerHook.prototype = {
    hook: function (node) {
      node.addEventListener(this.key, this.callback);
    },
    unhook: function (node) {
      node.removeEventListener(this.key, this.callback);
    }
  };

  // jshint maxparams: 2
  exports.handlerProp = function (key, f) {
    var props = {};
    props["halogen-hook-" + key] = new HandlerHook(key, f);
    return props;
  };

  exports.refPropImpl = function (nothing) {
    return function (just) {

      var ifHookFn = function (init) {
        // jshint maxparams: 3
        return function (node, prop, diff) {
          // jshint validthis: true
          if (typeof diff === "undefined") {
            this.f(init ? just(node) : nothing)();
          }
        };
      };

      // jshint maxparams: 1
      function RefHook (f) {
        this.f = f;
      }

      RefHook.prototype = {
        hook: ifHookFn(true),
        unhook: ifHookFn(false)
      };

      return function (f) {
        return { "halogen-ref": new RefHook(f) };
      };
    };
  };

  // jshint maxparams: 3
  function HalogenWidget (tree, eq, render) {
    this.tree = tree;
    this.eq = eq;
    this.render = render;
    this.vdom = null;
    this.el = null;
  }

  HalogenWidget.prototype = {
    type: "Widget",
    init: function () {
      this.vdom = this.render(this.tree);
      this.el = vcreateElement(this.vdom);
      return this.el;
    },
    update: function (prev, node) {
      if (!prev.tree || !this.eq(prev.tree.slot)(this.tree.slot)) {
        return this.init();
      }
      if (this.tree.thunk) {
        this.vdom = prev.vdom;
        this.el = prev.el;
      } else {
        this.vdom = this.render(this.tree);
        this.el = vpatch(node, vdiff(prev.vdom, this.vdom));
      }
    }
  };

  exports.widget = function (tree) {
    return function (eq) {
      return function (render) {
        return new HalogenWidget(tree, eq, render);
      };
    };
  };

  exports.concatProps = function () {
    // jshint maxparams: 2
    var hOP = Object.prototype.hasOwnProperty;
    var copy = function (props, result) {
      for (var key in props) {
        if (hOP.call(props, key)) {
          if (key === "attributes") {
            var attrs = props[key];
            var resultAttrs = result[key] || (result[key] = {});
            for (var attr in attrs) {
              if (hOP.call(attrs, attr)) {
                resultAttrs[attr] = attrs[attr];
              }
            }
          } else {
            result[key] = props[key];
          }
        }
      }
      return result;
    };
    return function (p1, p2) {
      return copy(p2, copy(p1, {}));
    };
  }();

  exports.emptyProps = {};

  exports.createElement = function (vtree) {
    return vcreateElement(vtree);
  };

  exports.diff = function (vtree1) {
    return function (vtree2) {
      return vdiff(vtree1, vtree2);
    };
  };

  exports.patch = function (p) {
    return function (node) {
      return function () {
        return vpatch(node, p);
      };
    };
  };

  exports.vtext = function (s) {
    return new VText(s);
  };

  exports.vnode = function (namespace) {
    return function (name) {
      return function (key) {
        return function (props) {
          return function (children) {
            if (name === "input" && props.value !== undefined) {
              props.value = new SoftSetHook(props.value);
            }
            return new VirtualNode(name, props, children, key, namespace);
          };
        };
      };
    };
  };
})(PS["Halogen.Internal.VirtualDOM"] = PS["Halogen.Internal.VirtualDOM"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Halogen.Internal.VirtualDOM"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Halogen_Component_Tree = PS["Halogen.Component.Tree"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var semigroupProps = new Data_Semigroup.Semigroup(Data_Function_Uncurried.runFn2($foreign.concatProps));
  var refProp = $foreign.refPropImpl(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var monoidProps = new Data_Monoid.Monoid(function () {
      return semigroupProps;
  }, $foreign.emptyProps);
  exports["refProp"] = refProp;
  exports["semigroupProps"] = semigroupProps;
  exports["monoidProps"] = monoidProps;
  exports["attr"] = $foreign.attr;
  exports["createElement"] = $foreign.createElement;
  exports["diff"] = $foreign.diff;
  exports["handlerProp"] = $foreign.handlerProp;
  exports["patch"] = $foreign.patch;
  exports["prop"] = $foreign.prop;
  exports["vnode"] = $foreign.vnode;
  exports["vtext"] = $foreign.vtext;
  exports["widget"] = $foreign.widget;
})(PS["Halogen.Internal.VirtualDOM"] = PS["Halogen.Internal.VirtualDOM"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Exists = PS["Data.Exists"];
  var Data_ExistsR = PS["Data.ExistsR"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Nullable = PS["Data.Nullable"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Halogen_Component_Tree = PS["Halogen.Component.Tree"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Events_Handler = PS["Halogen.HTML.Events.Handler"];
  var Halogen_Internal_VirtualDOM = PS["Halogen.Internal.VirtualDOM"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Bind = PS["Control.Bind"];        
  var handleAff = function ($40) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($40));
  };
  var renderProp = function (v) {
      return function (v1) {
          if (v1 instanceof Halogen_HTML_Core.Prop) {
              return Data_Exists.runExists(function (v2) {
                  return Halogen_Internal_VirtualDOM.prop(Halogen_HTML_Core.runPropName(v2.value0), v2.value1);
              })(v1.value0);
          };
          if (v1 instanceof Halogen_HTML_Core.Attr) {
              var attrName = Data_Maybe.maybe("")(function (ns$prime) {
                  return Halogen_HTML_Core.runNamespace(ns$prime) + ":";
              })(v1.value0) + Halogen_HTML_Core.runAttrName(v1.value1);
              return Halogen_Internal_VirtualDOM.attr(attrName, v1.value2);
          };
          if (v1 instanceof Halogen_HTML_Core.Handler) {
              return Data_ExistsR.runExistsR(function (v2) {
                  return Halogen_Internal_VirtualDOM.handlerProp(Halogen_HTML_Core.runEventName(v2.value0), function (ev) {
                      return Data_Function.apply(handleAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_HTML_Events_Handler.runEventHandler(Control_Monad_Aff.monadAff)(Control_Monad_Aff.monadEffAff)(ev)(v2.value1(ev)))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(v)));
                  });
              })(v1.value0);
          };
          if (v1 instanceof Halogen_HTML_Core.Ref) {
              return Halogen_Internal_VirtualDOM.refProp(function ($41) {
                  return handleAff(v(v1.value0($41)));
              });
          };
          return Data_Monoid.mempty(Halogen_Internal_VirtualDOM.monoidProps);
      };
  };
  var findKey = function (v) {
      return function (v1) {
          if (v1 instanceof Halogen_HTML_Core.Key) {
              return new Data_Maybe.Just(v1.value0);
          };
          return v;
      };
  };
  var renderTree = function (f) {
      return Halogen_Component_Tree.runTree(function (tree) {
          var go = function (v) {
              if (v instanceof Halogen_HTML_Core.Text) {
                  return Halogen_Internal_VirtualDOM.vtext(v.value0);
              };
              if (v instanceof Halogen_HTML_Core.Slot) {
                  return Halogen_Internal_VirtualDOM.widget(v.value0)(tree.eq)(renderTree(f));
              };
              if (v instanceof Halogen_HTML_Core.Element) {
                  var tag = Halogen_HTML_Core.runTagName(v.value1);
                  var ns$prime = Data_Function.apply(Data_Nullable.toNullable)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_HTML_Core.runNamespace)(v.value0));
                  var key = Data_Function.apply(Data_Nullable.toNullable)(Data_Foldable.foldl(Data_Foldable.foldableArray)(findKey)(Data_Maybe.Nothing.value)(v.value2));
                  return Halogen_Internal_VirtualDOM.vnode(ns$prime)(tag)(key)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Halogen_Internal_VirtualDOM.monoidProps)(renderProp(f))(v.value2))(Data_Functor.map(Data_Functor.functorArray)(go)(v.value3));
              };
              throw new Error("Failed pattern match at Halogen.HTML.Renderer.VirtualDOM line 49, column 5 - line 56, column 28: " + [ v.constructor.name ]);
          };
          return go(Data_Lazy.force(tree.html));
      });
  };
  exports["renderTree"] = renderTree;
})(PS["Halogen.HTML.Renderer.VirtualDOM"] = PS["Halogen.HTML.Renderer.VirtualDOM"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Coroutine_Stalling_1 = PS["Control.Coroutine.Stalling"];
  var Control_Coroutine_Stalling_1 = PS["Control.Coroutine.Stalling"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_Hook = PS["Halogen.Component.Hook"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Halogen_HTML_Renderer_VirtualDOM = PS["Halogen.HTML.Renderer.VirtualDOM"];
  var Halogen_Internal_VirtualDOM = PS["Halogen.Internal.VirtualDOM"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenF = PS["Halogen.Query.HalogenF"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_StateF = PS["Halogen.Query.StateF"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var onInitializers = function (dictFoldable) {
      return function (f) {
          var go = function (v) {
              return function (as) {
                  if (v instanceof Halogen_Component_Hook.PostRender) {
                      return new Data_List.Cons(f(v.value0), as);
                  };
                  return as;
              };
          };
          return Data_Foldable.foldr(dictFoldable)(go)(Data_List.Nil.value);
      };
  };
  var onFinalizers = function (dictFoldable) {
      return function (f) {
          var go = function (v) {
              return function (as) {
                  if (v instanceof Halogen_Component_Hook.Finalized) {
                      return new Data_List.Cons(f(v.value0), as);
                  };
                  return as;
              };
          };
          return Data_Foldable.foldr(dictFoldable)(go)(Data_List.Nil.value);
      };
  };
  var runUI = function (c) {
      return function (s) {
          return function (element) {
              var driver$prime = function (e) {
                  return function (s1) {
                      return function (i) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](s1))(function (v) {
                              return Data_Function.flip(Control_Monad_Free.runFreeM(Halogen_Query_HalogenF.functorHalogenF(Control_Monad_Aff.functorAff))(Control_Monad_Aff.monadRecAff))(e(i))(function (h) {
                                  if (h instanceof Halogen_Query_HalogenF.StateHF) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v1) {
                                          var $29 = Control_Monad_State.runState(Halogen_Query_StateF.stateN(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(h.value0))(v1);
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v)($29.value1))(function () {
                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)($29.value0);
                                          });
                                      });
                                  };
                                  if (h instanceof Halogen_Query_HalogenF.SubscribeHF) {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value1);
                                  };
                                  if (h instanceof Halogen_Query_HalogenF.RenderHF) {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value1);
                                  };
                                  if (h instanceof Halogen_Query_HalogenF.RenderPendingHF) {
                                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(h.value0(Data_Maybe.Nothing.value));
                                  };
                                  if (h instanceof Halogen_Query_HalogenF.QueryHF) {
                                      return h.value0;
                                  };
                                  if (h instanceof Halogen_Query_HalogenF.HaltHF) {
                                      return Data_Function.apply(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff))(Control_Monad_Eff_Exception.error(h.value0));
                                  };
                                  throw new Error("Failed pattern match at Halogen.Driver line 145, column 7 - line 156, column 45: " + [ h.constructor.name ]);
                              });
                          });
                      };
                  };
              };
              var render = function (ref) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v) {
                      if (v.renderPaused) {
                          return Data_Function.apply(Control_Monad_Aff_AVar.putVar(ref))((function () {
                              var $42 = {};
                              for (var $43 in v) {
                                  if (v.hasOwnProperty($43)) {
                                      $42[$43] = v[$43];
                                  };
                              };
                              $42.renderPending = true;
                              return $42;
                          })());
                      };
                      if (!v.renderPaused) {
                          var rc = Halogen_Component.renderComponent(c)(v.state);
                          var vtree$prime = Halogen_HTML_Renderer_VirtualDOM.renderTree(driver(ref))(rc.tree);
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))(Halogen_Internal_VirtualDOM.patch(Halogen_Internal_VirtualDOM.diff(v.vtree)(vtree$prime))(v.node)))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)({
                                  node: v1, 
                                  vtree: vtree$prime, 
                                  state: rc.state, 
                                  renderPending: false, 
                                  renderPaused: true
                              }))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff.forkAll(Data_List.foldableList))(onFinalizers(Data_Foldable.foldableArray)(Halogen_Component_Hook.runFinalized(driver$prime))(rc.hooks)))(function () {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff.forkAll(Data_List.foldableList))(onInitializers(Data_Foldable.foldableArray)(driver(ref))(rc.hooks)))(function () {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.modifyVar(function (v2) {
                                              var $46 = {};
                                              for (var $47 in v2) {
                                                  if (v2.hasOwnProperty($47)) {
                                                      $46[$47] = v2[$47];
                                                  };
                                              };
                                              $46.renderPaused = false;
                                              return $46;
                                          })(ref))(function () {
                                              return flushRender(ref);
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Halogen.Driver line 161, column 5 - line 177, column 24: " + [ v.renderPaused.constructor.name ]);
                  });
              };
              var flushRender = Control_Monad_Rec_Class.tailRecM(Control_Monad_Aff.monadRecAff)(function (ref) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)(v))(function () {
                          var $50 = !v.renderPending;
                          if ($50) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Right(Data_Unit.unit));
                          };
                          if (!$50) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(render(ref))(function () {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Left(ref));
                              });
                          };
                          throw new Error("Failed pattern match at Halogen.Driver line 183, column 5 - line 187, column 24: " + [ $50.constructor.name ]);
                      });
                  });
              });
              var $$eval = function (ref) {
                  return function (rpRef) {
                      return function (h) {
                          if (h instanceof Halogen_Query_HalogenF.StateHF) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v) {
                                  if (h.value0 instanceof Halogen_Query_StateF.Get) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)(v))(function () {
                                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value0.value0(v.state));
                                      });
                                  };
                                  if (h.value0 instanceof Halogen_Query_StateF.Modify) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(rpRef))(function (v1) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff_AVar.putVar(ref))((function () {
                                              var $56 = {};
                                              for (var $57 in v) {
                                                  if (v.hasOwnProperty($57)) {
                                                      $56[$57] = v[$57];
                                                  };
                                              };
                                              $56.state = h.value0.value0(v.state);
                                              return $56;
                                          })()))(function () {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff_AVar.putVar(rpRef))(new Data_Maybe.Just(Halogen_Query_HalogenF.Pending.value)))(function () {
                                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value0.value1);
                                              });
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at Halogen.Driver line 107, column 9 - line 115, column 22: " + [ h.value0.constructor.name ]);
                              });
                          };
                          if (h instanceof Halogen_Query_HalogenF.SubscribeHF) {
                              var producer = Halogen_Query_EventSource.runEventSource(h.value0);
                              var consumer = Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Bind.bindFlipped(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(function ($78) {
                                  return Control_Monad_Trans.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(driver(ref)($78));
                              })(Control_Coroutine["await"](Control_Monad_Aff.monadAff)));
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff.forkAff)(Control_Coroutine_Stalling_1.runStallingProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine_Stalling_1.fuse(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.monadParAff)(producer)(consumer))))(function () {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value1);
                              });
                          };
                          if (h instanceof Halogen_Query_HalogenF.RenderHF) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.modifyVar(Data_Function["const"](h.value0))(rpRef))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Maybe.isNothing(h.value0)))(render(ref)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(h.value1);
                                  });
                              });
                          };
                          if (h instanceof Halogen_Query_HalogenF.RenderPendingHF) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(rpRef))(function (v) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(rpRef)(v))(function () {
                                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(h.value0(v));
                                  });
                              });
                          };
                          if (h instanceof Halogen_Query_HalogenF.QueryHF) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(rpRef))(function (v) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Maybe.isJust(v)))(render(ref)))(function () {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(rpRef)(Data_Maybe.Nothing.value))(function () {
                                          return h.value0;
                                      });
                                  });
                              });
                          };
                          if (h instanceof Halogen_Query_HalogenF.HaltHF) {
                              return Data_Function.apply(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff))(Control_Monad_Eff_Exception.error(h.value0));
                          };
                          throw new Error("Failed pattern match at Halogen.Driver line 104, column 5 - line 134, column 43: " + [ h.constructor.name ]);
                      };
                  };
              };
              var driver = function (ref) {
                  return function (q) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](Data_Maybe.Nothing.value))(function (v) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Free.runFreeM(Halogen_Query_HalogenF.functorHalogenF(Control_Monad_Aff.functorAff))(Control_Monad_Aff.monadRecAff)($$eval(ref)(v))(Halogen_Component.queryComponent(c)(q)))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v2) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Maybe.isJust(v2)))(render(ref)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                                  });
                              });
                          });
                      });
                  };
              };
              return Data_Functor.map(Control_Monad_Aff.functorAff)(function (v) {
                  return v.driver;
              })(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
                  var rc = Halogen_Component.renderComponent(c)(s);
                  var dr = driver(v);
                  var vtree = Halogen_HTML_Renderer_VirtualDOM.renderTree(dr)(rc.tree);
                  var node = Halogen_Internal_VirtualDOM.createElement(vtree);
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v)({
                      node: node, 
                      vtree: vtree, 
                      state: rc.state, 
                      renderPending: false, 
                      renderPaused: true
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))(DOM_Node_Node.appendChild(DOM_HTML_Types.htmlElementToNode(node))(DOM_HTML_Types.htmlElementToNode(element))))(function () {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff.forkAll(Data_List.foldableList))(onInitializers(Data_Foldable.foldableArray)(dr)(rc.hooks)))(function () {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Aff.forkAff)(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(dr)(Halogen_Component.initializeComponent(c))))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.modifyVar(function (v1) {
                                      var $75 = {};
                                      for (var $76 in v1) {
                                          if (v1.hasOwnProperty($76)) {
                                              $75[$76] = v1[$76];
                                          };
                                      };
                                      $75.renderPaused = false;
                                      return $75;
                                  })(v))(function () {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(flushRender(v))(function () {
                                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                                              driver: dr
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              }));
          };
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.Driver"] = PS["Halogen.Driver"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var textarea = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("textarea"))(xs)([  ]);
  };                       
  var select = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("select"))(xs);
  };                             
  var pre = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("pre"))(xs);
  };
  var p = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("p"))(xs);
  };
  var p_ = p([  ]);          
  var option = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("option"))(xs);
  };                 
  var header = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("header"))(xs);
  };
  var header_ = header([  ]);
  var h1 = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("h1"))(xs);
  };
  var h1_ = h1([  ]);
  var div = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("div"))(xs);
  };
  var div_ = div([  ]);
  var button = function (xs) {
      return Halogen_HTML_Core.element(Halogen_HTML_Core.tagName("button"))(xs);
  };
  exports["button"] = button;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["h1"] = h1;
  exports["h1_"] = h1_;
  exports["header"] = header;
  exports["header_"] = header_;
  exports["option"] = option;
  exports["p"] = p;
  exports["p_"] = p_;
  exports["pre"] = pre;
  exports["select"] = select;
  exports["textarea"] = textarea;
})(PS["Halogen.HTML.Elements"] = PS["Halogen.HTML.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Data_Functor = PS["Data.Functor"];        
  var text = Halogen_HTML_Core.Text.create;
  exports["text"] = text;
})(PS["Halogen.HTML"] = PS["Halogen.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var value = Halogen_HTML_Core.prop(Halogen_HTML_Core.stringIsProp)(Halogen_HTML_Core.propName("value"))(Data_Function.apply(Data_Maybe.Just.create)(Halogen_HTML_Core.attrName("value")));
  var spellcheck = Halogen_HTML_Core.prop(Halogen_HTML_Core.booleanIsProp)(Halogen_HTML_Core.propName("spellcheck"))(Data_Function.apply(Data_Maybe.Just.create)(Halogen_HTML_Core.attrName("spellcheck")));
  var class_ = function ($9) {
      return Halogen_HTML_Core.prop(Halogen_HTML_Core.stringIsProp)(Halogen_HTML_Core.propName("className"))(Data_Function.apply(Data_Maybe.Just.create)(Halogen_HTML_Core.attrName("class")))(Halogen_HTML_Core.runClassName($9));
  };
  exports["class_"] = class_;
  exports["spellcheck"] = spellcheck;
  exports["value"] = value;
})(PS["Halogen.HTML.Properties"] = PS["Halogen.HTML.Properties"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties_1 = PS["Halogen.HTML.Properties"];
  var Halogen_HTML_Properties_1 = PS["Halogen.HTML.Properties"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var refine = Unsafe_Coerce.unsafeCoerce;                  
  var spellcheck = refine(Halogen_HTML_Properties_1.spellcheck);
  var value = refine(Halogen_HTML_Properties_1.value);    
  var class_ = refine(Halogen_HTML_Properties_1.class_);
  exports["class_"] = class_;
  exports["spellcheck"] = spellcheck;
  exports["value"] = value;
})(PS["Halogen.HTML.Properties.Indexed"] = PS["Halogen.HTML.Properties.Indexed"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties_Indexed = PS["Halogen.HTML.Properties.Indexed"];
  var Halogen_HTML_Elements_1 = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Elements_1 = PS["Halogen.HTML.Elements"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                              
  var textarea = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.textarea);
  var select = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.select);    
  var pre = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.pre);    
  var p = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.p);          
  var option = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.option);
  var div = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.div);      
  var button = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Elements_1.button);
  exports["button"] = button;
  exports["div"] = div;
  exports["option"] = option;
  exports["p"] = p;
  exports["pre"] = pre;
  exports["select"] = select;
  exports["textarea"] = textarea;
})(PS["Halogen.HTML.Elements.Indexed"] = PS["Halogen.HTML.Elements.Indexed"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_HTML_Events_Handler = PS["Halogen.HTML.Events.Handler"];
  var Halogen_HTML_Events_Types = PS["Halogen.HTML.Events.Types"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];                                      
  var onClick = Halogen_HTML_Core.handler(Halogen_HTML_Core.eventName("click"));
  var input_ = function (f) {
      return function (v) {
          return Data_Function.apply(Control_Applicative.pure(Halogen_HTML_Events_Handler.applicativeEventHandler))(Data_Function.apply(Data_Maybe.Just.create)(Halogen_Query.action(f)));
      };
  };
  var input = function (f) {
      return function (x) {
          return Data_Function.apply(Control_Applicative.pure(Halogen_HTML_Events_Handler.applicativeEventHandler))(Data_Function.apply(Data_Maybe.Just.create)(Halogen_Query.action(f(x))));
      };
  };
  exports["input"] = input;
  exports["input_"] = input_;
  exports["onClick"] = onClick;
})(PS["Halogen.HTML.Events"] = PS["Halogen.HTML.Events"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Events_Handler = PS["Halogen.HTML.Events.Handler"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];        
  var addForeignPropHandler = function (dictIsForeign) {
      return function (key) {
          return function (prop) {
              return function (f) {
                  return Halogen_HTML_Core.handler(Halogen_HTML_Core.eventName(key))(function ($2) {
                      return Data_Either.either(Data_Function.apply(Data_Function["const"])(Control_Applicative.pure(Halogen_HTML_Events_Handler.applicativeEventHandler)(Data_Maybe.Nothing.value)))(f)(Data_Foreign_Class.readProp(dictIsForeign)(Data_Foreign_Index.indexString)(prop)(Data_Foreign.toForeign((function (v) {
                          return v.target;
                      })($2))));
                  });
              };
          };
      };
  };                                                                                                            
  var onValueChange = addForeignPropHandler(Data_Foreign_Class.stringIsForeign)("change")("value");
  exports["onValueChange"] = onValueChange;
})(PS["Halogen.HTML.Events.Forms"] = PS["Halogen.HTML.Events.Forms"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Events_1 = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Events_1 = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Events_Forms = PS["Halogen.HTML.Events.Forms"];
  var Halogen_HTML_Events_Handler = PS["Halogen.HTML.Events.Handler"];
  var Halogen_HTML_Events_Types = PS["Halogen.HTML.Events.Types"];
  var Halogen_HTML_Properties_Indexed = PS["Halogen.HTML.Properties.Indexed"];        
  var refine$prime = Unsafe_Coerce.unsafeCoerce;
  var refine = Unsafe_Coerce.unsafeCoerce;                                
  var onValueChange = refine$prime(Halogen_HTML_Events_Forms.onValueChange);
  var onClick = refine(Halogen_HTML_Events_1.onClick);
  exports["onClick"] = onClick;
  exports["onValueChange"] = onValueChange;
})(PS["Halogen.HTML.Events.Indexed"] = PS["Halogen.HTML.Events.Indexed"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Foreign = PS["Data.Foreign"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var selectElement = function (query) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(function ($8) {
          return DOM_Node_ParentNode.querySelector(query)(DOM_HTML_Types.htmlDocumentToParentNode($8));
      })(DOM_HTML_Window.document))(DOM_HTML.window))))(function (v) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Function.apply(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create))(DOM_HTML_Types.readHTMLElement(Data_Foreign.toForeign(v.value0)));
              };
              throw new Error("Failed pattern match at Halogen.Util line 54, column 3 - line 56, column 76: " + [ v.constructor.name ]);
          })());
      });
  };
  var runHalogenAff = function ($9) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($9));
  };
  var awaitLoad = Control_Monad_Aff.makeAff(function (v) {
      return function (callback) {
          return Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff))(function __do() {
              var $10 = DOM_HTML.window();
              return DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.load)(DOM_Event_EventTarget.eventListener(function (v1) {
                  return callback(Data_Unit.unit);
              }))(false)(DOM_HTML_Types.windowToEventTarget($10))();
          });
      };
  });
  var awaitBody = Control_Bind.bind(Control_Monad_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error("Could not find body")))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)))(selectElement("body"));
  });
  exports["awaitBody"] = awaitBody;
  exports["awaitLoad"] = awaitLoad;
  exports["runHalogenAff"] = runHalogenAff;
  exports["selectElement"] = selectElement;
})(PS["Halogen.Util"] = PS["Halogen.Util"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];        
  var $$Boolean = (function () {
      function Boolean(value0) {
          this.value0 = value0;
      };
      Boolean.create = function (value0) {
          return new Boolean(value0);
      };
      return Boolean;
  })();
  var Int = (function () {
      function Int(value0) {
          this.value0 = value0;
      };
      Int.create = function (value0) {
          return new Int(value0);
      };
      return Int;
  })();
  var $$Number = (function () {
      function Number(value0) {
          this.value0 = value0;
      };
      Number.create = function (value0) {
          return new Number(value0);
      };
      return Number;
  })();
  var $$String = (function () {
      function String(value0) {
          this.value0 = value0;
      };
      String.create = function (value0) {
          return new String(value0);
      };
      return String;
  })();
  var Null = (function () {
      function Null() {

      };
      Null.value = new Null();
      return Null;
  })();
  var Undefined = (function () {
      function Undefined() {

      };
      Undefined.value = new Undefined();
      return Undefined;
  })();
  var Operator = (function () {
      function Operator(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Operator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Operator(value0, value1, value2);
              };
          };
      };
      return Operator;
  })();
  var PostOp = (function () {
      function PostOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PostOp.create = function (value0) {
          return function (value1) {
              return new PostOp(value0, value1);
          };
      };
      return PostOp;
  })();
  var Conditional = (function () {
      function Conditional(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Conditional.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Conditional(value0, value1, value2);
              };
          };
      };
      return Conditional;
  })();
  var Identifier = (function () {
      function Identifier(value0) {
          this.value0 = value0;
      };
      Identifier.create = function (value0) {
          return new Identifier(value0);
      };
      return Identifier;
  })();
  var Call = (function () {
      function Call(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Call.create = function (value0) {
          return function (value1) {
              return new Call(value0, value1);
          };
      };
      return Call;
  })();
  var Dot = (function () {
      function Dot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Dot.create = function (value0) {
          return function (value1) {
              return new Dot(value0, value1);
          };
      };
      return Dot;
  })();
  var Lambda = (function () {
      function Lambda(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lambda.create = function (value0) {
          return function (value1) {
              return new Lambda(value0, value1);
          };
      };
      return Lambda;
  })();
  var Seq = (function () {
      function Seq(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Seq.create = function (value0) {
          return function (value1) {
              return new Seq(value0, value1);
          };
      };
      return Seq;
  })();
  var $$Object = (function () {
      function Object(value0) {
          this.value0 = value0;
      };
      Object.create = function (value0) {
          return new Object(value0);
      };
      return Object;
  })();
  var $$Error = (function () {
      function Error(value0) {
          this.value0 = value0;
      };
      Error.create = function (value0) {
          return new Error(value0);
      };
      return Error;
  })();
  var Assignment = (function () {
      function Assignment(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Assignment.create = function (value0) {
          return function (value1) {
              return new Assignment(value0, value1);
          };
      };
      return Assignment;
  })();
  var Expression = (function () {
      function Expression(value0) {
          this.value0 = value0;
      };
      Expression.create = function (value0) {
          return new Expression(value0);
      };
      return Expression;
  })();
  var Program = (function () {
      function Program(value0) {
          this.value0 = value0;
      };
      Program.create = function (value0) {
          return new Program(value0);
      };
      return Program;
  })();
  var generic_Expression = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Boolean" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$Boolean.create))(Data_Generic.fromSpine(Data_Generic.genericBool)(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Int" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Int.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Number" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$Number.create))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.String" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$String.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Null" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Null.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Undefined" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Undefined.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Operator" && v.value1.length === 3)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Operator.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[2](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.PostOp" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(PostOp.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Conditional" && v.value1.length === 3)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Conditional.create))(Data_Generic.fromSpine(generic_Expression)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[2](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Identifier" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Identifier.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Call" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Call.create))(Data_Generic.fromSpine(generic_Expression)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(generic_Expression))(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Dot" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Dot.create))(Data_Generic.fromSpine(generic_Expression)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Lambda" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Lambda.create))(Data_Generic.fromSpine(Data_List.genericList(Data_Generic.genericString))(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Seq" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Seq.create))(Data_Generic.fromSpine(generic_Expression)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Object" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$Object.create))(Data_Generic.fromSpine(Data_List.genericList(Data_Generic.genericTuple(Data_Generic.genericString)(generic_Expression)))(v.value1[0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Error" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$Error.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("LazyScript.Types.Expression", [ {
          sigConstructor: "LazyScript.Types.Boolean", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Int", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Number", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.String", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Null", 
          sigValues: [  ]
      }, {
          sigConstructor: "LazyScript.Types.Undefined", 
          sigValues: [  ]
      }, {
          sigConstructor: "LazyScript.Types.Operator", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.PostOp", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Conditional", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Identifier", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Call", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_List.genericList(generic_Expression))(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Dot", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Lambda", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_List.genericList(Data_Generic.genericString))(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Seq", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Object", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_List.genericList(Data_Generic.genericTuple(Data_Generic.genericString)(generic_Expression)))(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Error", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      if (v instanceof $$Boolean) {
          return new Data_Generic.SProd("LazyScript.Types.Boolean", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericBool)(v.value0);
          } ]);
      };
      if (v instanceof Int) {
          return new Data_Generic.SProd("LazyScript.Types.Int", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          } ]);
      };
      if (v instanceof $$Number) {
          return new Data_Generic.SProd("LazyScript.Types.Number", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericNumber)(v.value0);
          } ]);
      };
      if (v instanceof $$String) {
          return new Data_Generic.SProd("LazyScript.Types.String", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          } ]);
      };
      if (v instanceof Null) {
          return new Data_Generic.SProd("LazyScript.Types.Null", [  ]);
      };
      if (v instanceof Undefined) {
          return new Data_Generic.SProd("LazyScript.Types.Undefined", [  ]);
      };
      if (v instanceof Operator) {
          return new Data_Generic.SProd("LazyScript.Types.Operator", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value2);
          } ]);
      };
      if (v instanceof PostOp) {
          return new Data_Generic.SProd("LazyScript.Types.PostOp", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          } ]);
      };
      if (v instanceof Conditional) {
          return new Data_Generic.SProd("LazyScript.Types.Conditional", [ function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value2);
          } ]);
      };
      if (v instanceof Identifier) {
          return new Data_Generic.SProd("LazyScript.Types.Identifier", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          } ]);
      };
      if (v instanceof Call) {
          return new Data_Generic.SProd("LazyScript.Types.Call", [ function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(Data_List.genericList(generic_Expression))(v.value1);
          } ]);
      };
      if (v instanceof Dot) {
          return new Data_Generic.SProd("LazyScript.Types.Dot", [ function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value1);
          } ]);
      };
      if (v instanceof Lambda) {
          return new Data_Generic.SProd("LazyScript.Types.Lambda", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_List.genericList(Data_Generic.genericString))(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          } ]);
      };
      if (v instanceof Seq) {
          return new Data_Generic.SProd("LazyScript.Types.Seq", [ function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          } ]);
      };
      if (v instanceof $$Object) {
          return new Data_Generic.SProd("LazyScript.Types.Object", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_List.genericList(Data_Generic.genericTuple(Data_Generic.genericString)(generic_Expression)))(v.value0);
          } ]);
      };
      if (v instanceof $$Error) {
          return new Data_Generic.SProd("LazyScript.Types.Error", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          } ]);
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var generic_Statement = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Assignment" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Assignment.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(generic_Expression)(v.value1[1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Expression" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Expression.create))(Data_Generic.fromSpine(generic_Expression)(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("LazyScript.Types.Statement", [ {
          sigConstructor: "LazyScript.Types.Assignment", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "LazyScript.Types.Expression", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(generic_Expression)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      if (v instanceof Assignment) {
          return new Data_Generic.SProd("LazyScript.Types.Assignment", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value1);
          } ]);
      };
      if (v instanceof Expression) {
          return new Data_Generic.SProd("LazyScript.Types.Expression", [ function ($dollarq) {
              return Data_Generic.toSpine(generic_Expression)(v.value0);
          } ]);
      };
      throw new Error("Failed pattern match at LazyScript.Types line 38, column 1 - line 38, column 55: " + [ v.constructor.name ]);
  });
  var generic_Program = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "LazyScript.Types.Program" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Program.create))(Data_Generic.fromSpine(Data_List.genericList(generic_Statement))(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("LazyScript.Types.Program", [ {
          sigConstructor: "LazyScript.Types.Program", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_List.genericList(generic_Statement))(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("LazyScript.Types.Program", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_List.genericList(generic_Statement))(v.value0);
      } ]);
  });
  var show_Program = new Data_Show.Show(Data_Generic.gShow(generic_Program));    
  var show_Expression = new Data_Show.Show(Data_Generic.gShow(generic_Expression));
  var expressions = function (v) {
      return Data_List.catMaybes(Data_Functor.map(Data_List.functorList)(function (statement) {
          if (statement instanceof Assignment) {
              return Data_Maybe.Nothing.value;
          };
          if (statement instanceof Expression) {
              return new Data_Maybe.Just(statement.value0);
          };
          throw new Error("Failed pattern match at LazyScript.Types line 54, column 66 - line 56, column 45: " + [ statement.constructor.name ]);
      })(v.value0));
  };                                                                 
  var eq_Expression = new Data_Eq.Eq(Data_Generic.gEq(generic_Expression));
  var assignments = function (v) {
      return Data_Function.apply(Data_Map.fromFoldable(Data_Ord.ordString)(Data_List.foldableList))(Data_Function.apply(Data_List.catMaybes)(Data_Functor.map(Data_List.functorList)(function (statement) {
          if (statement instanceof Assignment) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(statement.value0, statement.value1));
          };
          if (statement instanceof Expression) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at LazyScript.Types line 48, column 82 - line 50, column 28: " + [ statement.constructor.name ]);
      })(v.value0)));
  };
  exports["Boolean"] = $$Boolean;
  exports["Int"] = Int;
  exports["Number"] = $$Number;
  exports["String"] = $$String;
  exports["Null"] = Null;
  exports["Undefined"] = Undefined;
  exports["Operator"] = Operator;
  exports["PostOp"] = PostOp;
  exports["Conditional"] = Conditional;
  exports["Identifier"] = Identifier;
  exports["Call"] = Call;
  exports["Dot"] = Dot;
  exports["Lambda"] = Lambda;
  exports["Seq"] = Seq;
  exports["Object"] = $$Object;
  exports["Error"] = $$Error;
  exports["Program"] = Program;
  exports["Assignment"] = Assignment;
  exports["Expression"] = Expression;
  exports["assignments"] = assignments;
  exports["expressions"] = expressions;
  exports["generic_Expression"] = generic_Expression;
  exports["eq_Expression"] = eq_Expression;
  exports["show_Expression"] = show_Expression;
  exports["generic_Statement"] = generic_Statement;
  exports["generic_Program"] = generic_Program;
  exports["show_Program"] = show_Program;
})(PS["LazyScript.Types"] = PS["LazyScript.Types"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var Position = (function () {
      function Position(value0) {
          this.value0 = value0;
      };
      Position.create = function (value0) {
          return new Position(value0);
      };
      return Position;
  })();
  var updatePosString = function (pos) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\n") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\r") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\t") {
                      return new Position({
                          line: v.value0.line, 
                          column: (v.value0.column + 8 | 0) - (v.value0.column - 1) % 8
                      });
                  };
                  return new Position({
                      line: v.value0.line, 
                      column: v.value0.column + 1 | 0
                  });
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos)(Data_String.split("")(str));
      };
  }; 
  var initialPos = new Position({
      line: 1, 
      column: 1
  });
  exports["Position"] = Position;
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var PState = (function () {
      function PState(value0) {
          this.value0 = value0;
      };
      PState.create = function (value0) {
          return new PState(value0);
      };
      return PState;
  })();
  var ParserT = function (x) {
      return x;
  };
  var unParserT = function (v) {
      return v;
  }; 
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p)(s))(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v.result);
              });
          };
      };
  };
  var runParser = function (s) {
      return function ($65) {
          return Data_Identity.runIdentity(runParserT(Data_Identity.monadIdentity)(new PState({
              input: s, 
              position: Text_Parsing_Parser_Pos.initialPos
          }))($65));
      };
  };
  var parseFailed = function (s) {
      return function (pos) {
          return function (message) {
              return {
                  input: s, 
                  consumed: false, 
                  result: new Data_Either.Left(new ParseError({
                      message: message, 
                      position: pos
                  })), 
                  position: pos
              };
          };
      };
  }; 
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Data_Function.apply(ParserT)(function (s) {
          return unParserT(f(Data_Unit.unit))(s);
      });
  });
  var functorParserT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (p) {
              var f$prime = function (o) {
                  return {
                      input: o.input, 
                      result: Data_Functor.map(Data_Either.functorEither)(f)(o.result), 
                      consumed: o.consumed, 
                      position: o.position
                  };
              };
              return Data_Function.apply(ParserT)(function (s) {
                  return Data_Functor.map(dictFunctor)(f$prime)(unParserT(p)(s));
              });
          };
      });
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Data_Function.apply(ParserT)(function (v) {
              return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(parseFailed(v.value0.input)(v.value0.position)(message));
          });
      };
  };
  var monadParserT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return bindParserT(dictMonad);
      });
  };
  var bindParserT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyParserT(dictMonad);
      }, function (p) {
          return function (f) {
              var updateConsumedFlag = function (c) {
                  return function (o) {
                      return {
                          input: o.input, 
                          consumed: c || o.consumed, 
                          result: o.result, 
                          position: o.position
                      };
                  };
              };
              return Data_Function.apply(ParserT)(function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())({
                              input: o.input, 
                              result: new Data_Either.Left(o.result.value0), 
                              consumed: o.consumed, 
                              position: o.position
                          });
                      };
                      if (o.result instanceof Data_Either.Right) {
                          return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(new PState({
                              input: o.input, 
                              position: o.position
                          })));
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser line 79, column 5 - line 81, column 117: " + [ o.result.constructor.name ]);
                  });
              });
          };
      });
  };
  var applyParserT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadParserT(dictMonad)));
  };
  var applicativeParserT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyParserT(dictMonad);
      }, function (a) {
          return Data_Function.apply(ParserT)(function (v) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())({
                  input: v.value0.input, 
                  result: new Data_Either.Right(a), 
                  consumed: false, 
                  position: v.value0.position
              });
          });
      });
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (p1) {
          return function (p2) {
              return Data_Function.apply(ParserT)(function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p1)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left && !o.consumed) {
                          return unParserT(p2)(s);
                      };
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(o);
                  });
              });
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["PState"] = PState;
  exports["ParseError"] = ParseError;
  exports["ParserT"] = ParserT;
  exports["fail"] = fail;
  exports["parseFailed"] = parseFailed;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["unParserT"] = unParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadParserT"] = monadParserT;
  exports["lazyParserT"] = lazyParserT;
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Tuple = PS["Data.Tuple"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];        
  var printExpression = function (v) {
      if (v instanceof LazyScript_Types["Boolean"]) {
          return Data_Show.show(Data_Show.showBoolean)(v.value0);
      };
      if (v instanceof LazyScript_Types.Int) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof LazyScript_Types["Number"]) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof LazyScript_Types["String"]) {
          return Data_Show.show(Data_Show.showString)(v.value0);
      };
      if (v instanceof LazyScript_Types.Null) {
          return "null";
      };
      if (v instanceof LazyScript_Types.Undefined) {
          return "undefined";
      };
      if (v instanceof LazyScript_Types.Operator) {
          return printExpression(v.value1) + (" " + (v.value0 + (" " + printExpression(v.value2))));
      };
      if (v instanceof LazyScript_Types.PostOp) {
          return printExpression(v.value1) + v.value0;
      };
      if (v instanceof LazyScript_Types.Conditional) {
          return printExpression(v.value0) + (" ? " + (printExpression(v.value1) + (" : " + printExpression(v.value2))));
      };
      if (v instanceof LazyScript_Types.Identifier) {
          return v.value0;
      };
      if (v instanceof LazyScript_Types.Call && v.value0 instanceof LazyScript_Types.Lambda) {
          return "(" + (printExpression(new LazyScript_Types.Lambda(v.value0.value0, v.value0.value1)) + (")(" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List.functorList)(printExpression)(v.value1)) + ")")));
      };
      if (v instanceof LazyScript_Types.Call) {
          return printExpression(v.value0) + ("(" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List.functorList)(printExpression)(v.value1)) + ")"));
      };
      if (v instanceof LazyScript_Types.Dot) {
          return printExpression(v.value0) + ("." + v.value1);
      };
      if (v instanceof LazyScript_Types.Lambda) {
          return "(" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(v.value0) + (") => " + printExpression(v.value1)));
      };
      if (v instanceof LazyScript_Types.Seq) {
          return printExpression(v.value0) + (" $ " + printExpression(v.value1));
      };
      if (v instanceof LazyScript_Types["Object"]) {
          return "{" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List.functorList)(function (v1) {
              return v1.value0 + (": " + printExpression(v1.value1));
          })(v.value0)) + "}");
      };
      if (v instanceof LazyScript_Types["Error"]) {
          return "<<ERROR>>" + v.value0;
      };
      throw new Error("Failed pattern match at LazyScript.Printer line 9, column 1 - line 9, column 37: " + [ v.constructor.name ]);
  };
  exports["printExpression"] = printExpression;
})(PS["LazyScript.Printer"] = PS["LazyScript.Printer"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];        
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var $$try = function (dictFunctor) {
      return function (p) {
          var try$prime = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v2.result instanceof Data_Either.Left) {
                          return {
                              input: v, 
                              result: v2.result, 
                              consumed: false, 
                              position: v1
                          };
                      };
                      return v2;
                  };
              };
          };
          return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
              return Data_Functor.map(dictFunctor)(try$prime(v.value0.input)(v.value0.position))(Text_Parsing_Parser.unParserT(p)(new Text_Parsing_Parser.PState({
                  input: v.value0.input, 
                  position: v.value0.position
              })));
          });
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Function.apply(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
                      return p;
                  })))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List.Cons(v, v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.Nil.value));
          };
      };
  };
  var optional = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function () {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
          }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var notFollowedBy = function (dictMonad) {
      return function (p) {
          return Data_Function.apply($$try(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(open)(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(close)(function () {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                          });
                      });
                  });
              };
          };
      };
  };
  var asErrorMessage = function (dictMonad) {
      return Data_Function.flip(withErrorMessage(dictMonad));
  };
  exports["asErrorMessage"] = asErrorMessage;
  exports["between"] = between;
  exports["choice"] = choice;
  exports["notFollowedBy"] = notFollowedBy;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["skipMany"] = skipMany;
  exports["skipMany1"] = skipMany1;
  exports["try"] = $$try;
  exports["withErrorMessage"] = withErrorMessage;
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var AssocNone = (function () {
      function AssocNone() {

      };
      AssocNone.value = new AssocNone();
      return AssocNone;
  })();
  var AssocLeft = (function () {
      function AssocLeft() {

      };
      AssocLeft.value = new AssocLeft();
      return AssocLeft;
  })();
  var AssocRight = (function () {
      function AssocRight() {

      };
      AssocRight.value = new AssocRight();
      return AssocRight;
  })();
  var Infix = (function () {
      function Infix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Infix.create = function (value0) {
          return function (value1) {
              return new Infix(value0, value1);
          };
      };
      return Infix;
  })();
  var Prefix = (function () {
      function Prefix(value0) {
          this.value0 = value0;
      };
      Prefix.create = function (value0) {
          return new Prefix(value0);
      };
      return Prefix;
  })();
  var Postfix = (function () {
      function Postfix(value0) {
          this.value0 = value0;
      };
      Postfix.create = function (value0) {
          return new Postfix(value0);
      };
      return Postfix;
  })();
  var termP = function (dictMonad) {
      return function (prefixP) {
          return function (term) {
              return function (postfixP) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function (v1) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function (v2) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v2(v(v1)));
                          });
                      });
                  });
              };
          };
      };
  };
  var splitOp = function (v) {
      return function (accum) {
          if (v instanceof Infix && v.value1 instanceof AssocNone) {
              var $25 = {};
              for (var $26 in accum) {
                  if (accum.hasOwnProperty($26)) {
                      $25[$26] = accum[$26];
                  };
              };
              $25.nassoc = new Data_List.Cons(v.value0, accum.nassoc);
              return $25;
          };
          if (v instanceof Infix && v.value1 instanceof AssocLeft) {
              var $30 = {};
              for (var $31 in accum) {
                  if (accum.hasOwnProperty($31)) {
                      $30[$31] = accum[$31];
                  };
              };
              $30.lassoc = new Data_List.Cons(v.value0, accum.lassoc);
              return $30;
          };
          if (v instanceof Infix && v.value1 instanceof AssocRight) {
              var $35 = {};
              for (var $36 in accum) {
                  if (accum.hasOwnProperty($36)) {
                      $35[$36] = accum[$36];
                  };
              };
              $35.rassoc = new Data_List.Cons(v.value0, accum.rassoc);
              return $35;
          };
          if (v instanceof Prefix) {
              var $40 = {};
              for (var $41 in accum) {
                  if (accum.hasOwnProperty($41)) {
                      $40[$41] = accum[$41];
                  };
              };
              $40.prefix = new Data_List.Cons(v.value0, accum.prefix);
              return $40;
          };
          if (v instanceof Postfix) {
              var $44 = {};
              for (var $45 in accum) {
                  if (accum.hasOwnProperty($45)) {
                      $44[$45] = accum[$45];
                  };
              };
              $44.postfix = new Data_List.Cons(v.value0, accum.postfix);
              return $44;
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Expr line 70, column 1 - line 70, column 76: " + [ v.constructor.name, accum.constructor.name ]);
      };
  };
  var rassocP1 = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var rassocP = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return rassocP1(dictMonad)(v1)(rassocOp)(prefixP)(term)(postfixP);
                              }))(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var nassocP = function (dictMonad) {
      return function (x) {
          return function (nassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var lassocP1 = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var lassocP = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return lassocP1(dictMonad)(v(x)(v1))(lassocOp)(prefixP)(term)(postfixP);
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var makeParser = function (dictMonad) {
      return function (term) {
          return function (ops) {
              var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                  rassoc: Data_List.Nil.value, 
                  lassoc: Data_List.Nil.value, 
                  nassoc: Data_List.Nil.value, 
                  prefix: Data_List.Nil.value, 
                  postfix: Data_List.Nil.value
              })(ops);
              var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.lassoc);
              var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.nassoc);
              var postfixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.postfix))("");
              var postfixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.id(Control_Category.categoryFn)));
              var prefixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.prefix))("");
              var prefixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.id(Control_Category.categoryFn)));
              var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.rassoc);
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v) {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(v)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(v)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(v)(nassocOp)(prefixP)(term)(postfixP)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v)))("operator");
              });
          };
      };
  };
  var buildExprParser = function (dictMonad) {
      return function (operators) {
          return function (simpleExpr) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
          };
      };
  };
  exports["AssocNone"] = AssocNone;
  exports["AssocLeft"] = AssocLeft;
  exports["AssocRight"] = AssocRight;
  exports["Infix"] = Infix;
  exports["Prefix"] = Prefix;
  exports["Postfix"] = Postfix;
  exports["buildExprParser"] = buildExprParser;
})(PS["Text.Parsing.Parser.Expr"] = PS["Text.Parsing.Parser.Expr"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var string = function (dictMonad) {
      return function (str) {
          return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
              return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
                  var $16 = Data_String.indexOf(str)(v.value0.input);
                  if ($16 instanceof Data_Maybe.Just && $16.value0 === 0) {
                      return {
                          consumed: true, 
                          input: Data_String.drop(Data_String.length(str))(v.value0.input), 
                          result: new Data_Either.Right(str), 
                          position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(str)
                      };
                  };
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected " + str);
              })());
          });
      };
  };
  var eof = function (dictMonad) {
      return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
              if (v.value0.input === "") {
                  return {
                      consumed: false, 
                      input: v.value0.input, 
                      result: new Data_Either.Right(Data_Unit.unit), 
                      position: v.value0.position
                  };
              };
              return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected EOF");
          })());
      });
  };
  var anyChar = function (dictMonad) {
      return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
              var $27 = Data_String.charAt(0)(v.value0.input);
              if ($27 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Unexpected EOF");
              };
              if ($27 instanceof Data_Maybe.Just) {
                  return {
                      consumed: true, 
                      input: Data_String.drop(1)(v.value0.input), 
                      result: new Data_Either.Right($27.value0), 
                      position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(Data_String.singleton($27.value0))
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 33, column 3 - line 35, column 113: " + [ $27.constructor.name ]);
          })());
      });
  };
  var satisfy = function (dictMonad) {
      return function (f) {
          return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (v) {
              var $33 = f(v);
              if ($33) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
              };
              if (!$33) {
                  return Data_Function.apply(Text_Parsing_Parser.fail(dictMonad))("Character '" + (Data_String.singleton(v) + "' did not satisfy predicate"));
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 41, column 3 - line 44, column 1: " + [ $33.constructor.name ]);
          }));
      };
  };
  var $$char = function (dictMonad) {
      return function (c) {
          return satisfy(dictMonad)(function (v) {
              return v === c;
          });
      };
  };
  var noneOf = function (dictMonad) {
      return function (ss) {
          return satisfy(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss));
      };
  };
  var oneOf = function (dictMonad) {
      return function (ss) {
          return satisfy(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss));
      };
  };
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["eof"] = eof;
  exports["noneOf"] = noneOf;
  exports["oneOf"] = oneOf;
  exports["satisfy"] = satisfy;
  exports["string"] = string;
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode_1 = PS["Data.Char.Unicode"];
  var Data_Char_Unicode_1 = PS["Data.Char.Unicode"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_1 = PS["Data.List"];
  var Data_List_1 = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Alt = PS["Control.Alt"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Category = PS["Control.Category"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var upper = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isUpper))("uppercase letter");
  };
  var theReservedNames = function (dictMonad) {
      return function (v) {
          if (v.caseSensitive) {
              return Data_Array.sort(Data_Ord.ordString)(v.reservedNames);
          };
          if (Data_Boolean.otherwise) {
              return Data_Function.apply(Data_Array.sort(Data_Ord.ordString))(Data_Functor.map(Data_Functor.functorArray)(Data_String.toLower)(v.reservedNames));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 716, column 1 - line 718, column 85: " + [ v.constructor.name ]);
      };
  };
  var space = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isSpace))("space");
  };
  var simpleSpace = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isSpace));
  };
  var oneLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Text_Parsing_Parser_String.string(dictMonad)(v.commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(function (v1) {
              return v1 !== "\n";
          })));
      };
  };
  var octDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isOctDigit))("oct digit");
  };
  var letter = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isAlpha))("letter");
  };
  var isReserved = function (__copy_names) {
      return function (__copy_name) {
          var names = __copy_names;
          var name = __copy_name;
          tco: while (true) {
              var $75 = Data_Array.uncons(names);
              if ($75 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              if ($75 instanceof Data_Maybe.Just) {
                  var $76 = Data_Ord.compare(Data_Ord.ordString)($75.value0.head)(name);
                  if ($76 instanceof Data_Ordering.LT) {
                      var __tco_name = name;
                      names = $75.value0.tail;
                      name = __tco_name;
                      continue tco;
                  };
                  if ($76 instanceof Data_Ordering.EQ) {
                      return true;
                  };
                  if ($76 instanceof Data_Ordering.GT) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 710, column 39 - line 713, column 53: " + [ $76.constructor.name ]);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 708, column 5 - line 713, column 53: " + [ $75.constructor.name ]);
          };
      };
  };
  var isReservedName = function (dictMonad) {
      return function (v) {
          return function (name) {
              var caseName = (function () {
                  if (v.caseSensitive) {
                      return name;
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_String.toLower(name);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 703, column 5 - line 704, column 57: " + [  ]);
              })();
              return isReserved(theReservedNames(dictMonad)(v))(caseName);
          };
      };
  };
  var inCommentSingle = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String.toCharArray(v.commentEnd))(Data_String.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Function.apply(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Text_Parsing_Parser_String.string(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var multiLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Text_Parsing_Parser_String.string(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
      };
  };
  var inCommentMulti = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String.toCharArray(v.commentEnd))(Data_String.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Function.apply(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Text_Parsing_Parser_String.string(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var inComment = function (dictMonad) {
      return function (v) {
          if (v.nestedComments) {
              return inCommentMulti(dictMonad)(v);
          };
          if (!v.nestedComments) {
              return inCommentSingle(dictMonad)(v);
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 748, column 5 - line 748, column 91: " + [ v.nestedComments.constructor.name ]);
      };
  };
  var whiteSpace$prime = function (dictMonad) {
      return function (v) {
          if (Data_String["null"](v.commentLine) && Data_String["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
          };
          if (Data_String["null"](v.commentLine)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
          };
          if (Data_String["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
          };
          if (Data_Boolean.otherwise) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 725, column 1 - line 733, column 94: " + [ v.constructor.name ]);
      };
  };
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isHexDigit))("hex digit");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isDigit))("digit");
  };
  var makeTokenParser = function (dictMonad) {
      return function (v) {
          var stringLetter = Text_Parsing_Parser_String.satisfy(dictMonad)(function (c) {
              return c !== "\"" && (c !== "\\" && c > "\x1a");
          });
          var sign = function (dictRing) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Text_Parsing_Parser_String["char"](dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Text_Parsing_Parser_String["char"](dictMonad)("+"))(Control_Category.id(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.id(Control_Category.categoryFn)));
          };
          var oper = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(function (v2) {
                      return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_String.singleton(v1) + Data_String.fromCharArray(v2));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
          })();
          var number = function (base) {
              return function (baseDigit) {
                  var folder = function (v1) {
                      return function (v2) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                                  return (base * v1.value0 | 0) + v3 | 0;
                              })(Data_Char_Unicode_1.digitToInt(v2));
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 594, column 9 - line 594, column 35: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(function (v1) {
                      return Data_Function.apply(Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(v1));
                  });
              };
          };
          var octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)([ "o", "O" ]))(number(8)(octDigit(dictMonad)));
          var lexeme = function (p) {
              return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
          };
          var reservedOp = function (name) {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(dictMonad)(name))(function () {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))("end of " + name);
              });
              return Data_Function.apply(lexeme)(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(go));
          };
          var symbol = function (name) {
              return lexeme(Text_Parsing_Parser_String.string(dictMonad)(name));
          };
          var parens = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
          };
          var semi = symbol(";");
          var semiSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
          };
          var semiSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
          };
          var isReservedOp = function (name) {
              return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
          };
          var operator = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(function (v1) {
                  var $96 = isReservedOp(v1);
                  if ($96) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved operator " + v1);
                  };
                  if (!$96) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 615, column 13 - line 617, column 31: " + [ $96.constructor.name ]);
              });
              return Data_Function.apply(lexeme)(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(go));
          })();
          var ident = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(function (v2) {
                      return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_String.singleton(v1) + Data_String.fromCharArray(v2));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identitfier");
          })();
          var identifier = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(function (v1) {
                  var $100 = isReservedName(dictMonad)(v)(v1);
                  if ($100) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved word " + Data_Show.show(Data_Show.showString)(v1));
                  };
                  if (!$100) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 665, column 13 - line 667, column 30: " + [ $100.constructor.name ]);
              });
              return Data_Function.apply(lexeme)(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(go));
          })();
          var hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)([ "x", "X" ]))(number(16)(hexDigit(dictMonad)));
          var fraction = (function () {
              var op = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Char_Unicode_1.digitToInt(v1))(function (v3) {
                              return Data_Function.apply(Control_Applicative.pure(Data_Maybe.applicativeMaybe))((v2.value0 + Data_Int.toNumber(v3)) / 10.0);
                          });
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 544, column 9 - line 544, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("."))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(function (v1) {
                      return Data_Function.apply(Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(v1));
                  });
              }));
          })();
          var escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](dictMonad)("\\")))("end of string gap");
          var escapeEmpty = Text_Parsing_Parser_String["char"](dictMonad)("&");
          var escMap = Data_Array.zip([ "a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'" ])([ "\x07", "\b", "\f", "\n", "\r", "\t", "\v", "\\", "\"", "'" ]);
          var dot = symbol(".");
          var decimal = number(10)(digit(dictMonad));
          var exponent$prime = (function () {
              var power = function (e) {
                  if (e < 0) {
                      return 1.0 / power(-e);
                  };
                  if (Data_Boolean.otherwise) {
                      return $$Math.pow(10.0)(Data_Int.toNumber(e));
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 557, column 9 - line 558, column 53: " + [ e.constructor.name ]);
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)([ "e", "E" ]))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(function (v2) {
                          return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(power(v1(v2)));
                      });
                  });
              }));
          })();
          var fractExponent = function (n) {
              var justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(function (v1) {
                  return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Int.toNumber(n) * v1);
              });
              var fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(function (v2) {
                      return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))((Data_Int.toNumber(n) + v1) * v2);
                  });
              });
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
          };
          var fractFloat = function (n) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Either.Right.create)(fractExponent(n));
          };
          var decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(function (v1) {
              return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(v1))(fractFloat(v1));
          });
          var zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
          var natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("0"))(zeroNumFloat))(decimalFloat);
          var naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
          var floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
          var $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
          var zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
          var nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
          var $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(function (v2) {
                  return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(v1(v2));
              });
          });
          var integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
          var natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
          var comma = symbol(",");
          var commaSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
          };
          var commaSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
          };
          var colon = symbol(":");
          var charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(function (v1) {
              var $116 = v1 > 1114111;
              if ($116) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
              };
              if (!$116) {
                  return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Char.fromCharCode(v1));
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 441, column 9 - line 443, column 41: " + [ $116.constructor.name ]);
          });
          var charLetter = Text_Parsing_Parser_String.satisfy(dictMonad)(function (c) {
              return c !== "'" && (c !== "\\" && c > "\x1a");
          });
          var charEsc = (function () {
              var parseEsc = function (v1) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Text_Parsing_Parser_String["char"](dictMonad)(v1.value0))(v1.value1);
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
          })();
          var charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("^"))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(function (v1) {
                  return Data_Function.apply(function ($134) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Char.fromCharCode($134));
                  })((Data_Char.toCharCode(v1) - Data_Char.toCharCode("A")) + 1 | 0);
              });
          });
          var caseString = function (name) {
              if (v.caseSensitive) {
                  return Text_Parsing_Parser_String.string(dictMonad)(name);
              };
              if (Data_Boolean.otherwise) {
                  var msg = Data_Show.show(Data_Show.showString)(name);
                  var caseChar = function (c) {
                      if (Data_Char_Unicode_1.isAlpha(c)) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)(Data_Char_Unicode_1.toLower(c)))(Text_Parsing_Parser_String["char"](dictMonad)(Data_Char_Unicode_1.toUpper(c)));
                      };
                      if (Data_Boolean.otherwise) {
                          return Text_Parsing_Parser_String["char"](dictMonad)(c);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 652, column 9 - line 653, column 40: " + [ c.constructor.name ]);
                  };
                  var walk = function (name$prime) {
                      var $123 = Data_String.uncons(name$prime);
                      if ($123 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                      };
                      if ($123 instanceof Data_Maybe.Just) {
                          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar($123.value0.head))(msg))(walk($123.value0.tail));
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 647, column 22 - line 649, column 86: " + [ $123.constructor.name ]);
                  };
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(walk(name))(name);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 643, column 5 - line 656, column 24: " + [ name.constructor.name ]);
          };
          var reserved = function (name) {
              var go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))("end of " + name));
              return Data_Function.apply(lexeme)(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(go));
          };
          var brackets = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
          };
          var braces = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
          };
          var ascii3codes = [ "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL" ];
          var ascii3 = [ "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f" ];
          var ascii2codes = [ "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP" ];
          var ascii2 = [ "\b", "\t", "\n", "\v", "\f", "\r", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " " ];
          var asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
          var charAscii = (function () {
              var parseAscii = function (v1) {
                  return Data_Function.apply(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Text_Parsing_Parser_String.string(dictMonad)(v1.value0))(v1.value1));
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
          })();
          var escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
          var charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("\\"))(escapeCode);
          var characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
          var charLiteral = (function () {
              var go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](dictMonad)("'"))("end of character"))(characterChar);
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
          })();
          var stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](dictMonad)("\\"))(function () {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.Just.create)(escapeCode));
          });
          var stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
          var stringLiteral = (function () {
              var folder = function (v1) {
                  return function (chars) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return chars;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_List_1.Cons(v1.value0, chars);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token line 402, column 9 - line 402, column 37: " + [ v1.constructor.name, chars.constructor.name ]);
                  };
              };
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](dictMonad)("\""))("end of string"))(Data_List_1.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(function (v1) {
                  return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Function.apply(Data_String.fromCharArray)(Data_Function.apply(Data_List_1.toUnfoldable(Data_Unfoldable.unfoldableArray))(Data_Foldable.foldr(Data_List_1.foldableList)(folder)(Data_List_1.Nil.value)(v1))));
              });
              return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
          })();
          var angles = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
          };
          return {
              identifier: identifier, 
              reserved: reserved, 
              operator: operator, 
              reservedOp: reservedOp, 
              charLiteral: charLiteral, 
              stringLiteral: stringLiteral, 
              natural: natural, 
              integer: integer, 
              "float": $$float, 
              naturalOrFloat: naturalOrFloat, 
              decimal: decimal, 
              hexadecimal: hexadecimal, 
              octal: octal, 
              symbol: symbol, 
              lexeme: lexeme, 
              whiteSpace: whiteSpace$prime(dictMonad)(v), 
              parens: parens, 
              braces: braces, 
              angles: angles, 
              brackets: brackets, 
              semi: semi, 
              comma: comma, 
              colon: colon, 
              dot: dot, 
              semiSep: semiSep, 
              semiSep1: semiSep1, 
              commaSep: commaSep, 
              commaSep1: commaSep1
          };
      };
  };
  var alphaNum = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(dictMonad)(Data_Char_Unicode_1.isAlphaNum))("letter or digit");
  };
  exports["alphaNum"] = alphaNum;
  exports["digit"] = digit;
  exports["hexDigit"] = hexDigit;
  exports["letter"] = letter;
  exports["makeTokenParser"] = makeTokenParser;
  exports["octDigit"] = octDigit;
  exports["space"] = space;
  exports["upper"] = upper;
})(PS["Text.Parsing.Parser.Token"] = PS["Text.Parsing.Parser.Token"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foldable = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Expr = PS["Text.Parsing.Parser.Expr"];
  var Text_Parsing_Parser_Token = PS["Text.Parsing.Parser.Token"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var program = (function () {
      var lexer = (function () {
          var op = Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
          return Data_Function.apply(Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity))({
              commentStart: "/*", 
              commentEnd: "*/", 
              commentLine: "//", 
              nestedComments: false, 
              identStart: Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity), 
              identLetter: Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity), 
              opStart: op, 
              opLetter: op, 
              reservedNames: [ "function", "return", "null" ], 
              reservedOpNames: [ "?", ":", "=", "++" ], 
              caseSensitive: true
          });
      })();
      var nullLiteral = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(LazyScript_Types.Null.value))(lexer.reserved("null"));
      var numberLiteral = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("-"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(Data_Ring.negate(Data_Ring.ringInt), Data_Ring.negate(Data_Ring.ringNumber)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("+"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(Control_Category.id(Control_Category.categoryFn), Control_Category.id(Control_Category.categoryFn))))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(Control_Category.id(Control_Category.categoryFn), Control_Category.id(Control_Category.categoryFn)))))("sign"))(function (v) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.either(function ($10) {
              return LazyScript_Types.Int.create(v.value0($10));
          })(function ($11) {
              return (LazyScript_Types["Number"]).create(v.value1($11));
          }))(lexer.naturalOrFloat))("number literal");
      });
      var stringLiteral = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((LazyScript_Types["String"]).create)(lexer.stringLiteral))("string literal");
      var identifier = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Identifier.create)(lexer.identifier))("identifier");
      var dot = function (cond) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Dot.create(cond))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.dot)(lexer.identifier)))("dot expression");
      };
      var booleanLiteral = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((LazyScript_Types["Boolean"]).create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reserved("true"))(true))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reserved("false"))(false)));
      var post = function (expression1) {
          return function (cond) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(call(cond)(expression1))(dot(cond)))(function (v) {
                  return post(expression1)(v);
              }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(cond));
          };
      };
      var pair = function (expression1) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create)(lexer.identifier))(lexer.colon))(combinationExpressions))("key-value pair");
      };
      var objectLiteral = function (expression1) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((LazyScript_Types["Object"]).create)(Data_Function.apply(lexer.braces)(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(pair(expression1))(lexer.comma))))("object");
      };
      var literal = function (expression1) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(lexer.parens(expression1)))(numberLiteral))(stringLiteral))(booleanLiteral))(nullLiteral))(objectLiteral(expression1)))(identifier))("literal");
      };
      var lambda = function (expression1) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Lambda.create)(lexer.parens(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(lexer.identifier)(lexer.comma))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.symbol("=>"))(combinationExpressions)))("lambda expression");
      };
      var expression = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (expression$prime) {
          return Text_Parsing_Parser_Expr.buildExprParser(Data_Identity.monadIdentity)([ [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("*"))(LazyScript_Types.Operator.create("*")), Text_Parsing_Parser_Expr.AssocLeft.value), new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("/"))(LazyScript_Types.Operator.create("/")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("-"))(LazyScript_Types.Operator.create("-")), Text_Parsing_Parser_Expr.AssocLeft.value), new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("+"))(LazyScript_Types.Operator.create("+")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("<"))(LazyScript_Types.Operator.create("<")), Text_Parsing_Parser_Expr.AssocNone.value), new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp(">"))(LazyScript_Types.Operator.create(">")), Text_Parsing_Parser_Expr.AssocNone.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(lexer.reservedOp("$"))(LazyScript_Types.Seq.create), Text_Parsing_Parser_Expr.AssocRight.value) ] ])(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(literal(combinationExpressions))(function (v) {
              return post(expression$prime)(v);
          }));
      });
      var conditional = function (cond) {
          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Conditional.create(cond))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.symbol("?"))(expression)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.colon)(combinationExpressions));
      };
      var combinationExpressions = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (combinationExpressions$prime) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(lambda(combinationExpressions$prime)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expression)(function (v) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(conditional(v))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v));
          })));
      });
      var call = function (cond) {
          return function (expression1) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Call.create(cond))(lexer.parens(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(combinationExpressions)(lexer.comma))))("call expression");
          };
      };
      var expressionStatement = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Expression.create)(combinationExpressions);
      var assignmentStatement = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Assignment.create)(lexer.identifier))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.symbol("="))(combinationExpressions));
      var statement = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(assignmentStatement))(expressionStatement))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(lexer.semi));
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(LazyScript_Types.Program.create)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lexer.whiteSpace)(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(statement)))(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity)));
  })();
  exports["program"] = program;
})(PS["LazyScript.Parser"] = PS["LazyScript.Parser"] || {});
(function(exports) {exports.invokeForeignFunction = function(callee){
      return function(prop){
          return function(params){
              return function(){
                  var global = (new Function("return this"))();
                  var obj = global[callee];
                  return obj[prop].apply(obj, params);
              }
          }
      }
  };
})(PS["LazyScript.Foreign"] = PS["LazyScript.Foreign"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["LazyScript.Foreign"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Foreign = PS["Data.Foreign"];
  exports["invokeForeignFunction"] = $foreign.invokeForeignFunction;
})(PS["LazyScript.Foreign"] = PS["LazyScript.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Either = PS["Data.Either"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var LazyScript_Printer = PS["LazyScript.Printer"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var LazyScript_Parser = PS["LazyScript.Parser"];
  var LazyScript_Foreign = PS["LazyScript.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Show = PS["Data.Show"];        
  var ring = function (dictEuclideanRing) {
      return function (v) {
          if (v === "+") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.add(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
          };
          if (v === "*") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.mul(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
          };
          if (v === "/") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_EuclideanRing.div(dictEuclideanRing));
          };
          if (v === "-") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Ring.sub((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]()));
          };
          return Control_Monad_Eff_Exception["throw"]("Operator not found: " + v);
      };
  };
  var replace = function (arg) {
      return function (param) {
          return function (v) {
              if (v instanceof LazyScript_Types.Identifier) {
                  if (arg === v.value0) {
                      return param;
                  };
                  if (Data_Boolean.otherwise) {
                      return new LazyScript_Types.Identifier(v.value0);
                  };
              };
              if (v instanceof LazyScript_Types.Conditional) {
                  return new LazyScript_Types.Conditional(replace(arg)(param)(v.value0), replace(arg)(param)(v.value1), replace(arg)(param)(v.value2));
              };
              if (v instanceof LazyScript_Types.Operator) {
                  return new LazyScript_Types.Operator(v.value0, replace(arg)(param)(v.value1), replace(arg)(param)(v.value2));
              };
              if (v instanceof LazyScript_Types.PostOp) {
                  return new LazyScript_Types.PostOp(v.value0, replace(arg)(param)(v.value1));
              };
              if (v instanceof LazyScript_Types.Call) {
                  return new LazyScript_Types.Call(replace(arg)(param)(v.value0), Data_Functor.map(Data_List.functorList)(replace(arg)(param))(v.value1));
              };
              if (v instanceof LazyScript_Types.Lambda) {
                  if (Data_Foldable.notElem(Data_List.foldableList)(Data_Eq.eqString)(arg)(v.value0)) {
                      return new LazyScript_Types.Lambda(v.value0, replace(arg)(param)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new LazyScript_Types.Lambda(v.value0, v.value1);
                  };
              };
              if (v instanceof LazyScript_Types.Conditional) {
                  return new LazyScript_Types.Conditional(replace(arg)(param)(v.value0), replace(arg)(param)(v.value1), replace(arg)(param)(v.value2));
              };
              if (v instanceof LazyScript_Types.Seq) {
                  return new LazyScript_Types.Seq(replace(arg)(param)(v.value0), replace(arg)(param)(v.value1));
              };
              if (v instanceof LazyScript_Types["Object"]) {
                  return new LazyScript_Types["Object"](Data_Functor.map(Data_List.functorList)(function (v1) {
                      return new Data_Tuple.Tuple(v1.value0, replace(arg)(param)(v1.value1));
                  })(v.value0));
              };
              if (v instanceof LazyScript_Types.Dot) {
                  return new LazyScript_Types.Dot(replace(arg)(param)(v.value0), v.value1);
              };
              if (v instanceof LazyScript_Types.Null) {
                  return LazyScript_Types.Null.value;
              };
              if (v instanceof LazyScript_Types.Undefined) {
                  return LazyScript_Types.Undefined.value;
              };
              if (v instanceof LazyScript_Types["Boolean"]) {
                  return new LazyScript_Types["Boolean"](v.value0);
              };
              if (v instanceof LazyScript_Types.Int) {
                  return new LazyScript_Types.Int(v.value0);
              };
              if (v instanceof LazyScript_Types["Number"]) {
                  return new LazyScript_Types["Number"](v.value0);
              };
              if (v instanceof LazyScript_Types["String"]) {
                  return new LazyScript_Types["String"](v.value0);
              };
              if (v instanceof LazyScript_Types["Error"]) {
                  return new LazyScript_Types["Error"](v.value0);
              };
              throw new Error("Failed pattern match at LazyScript.Interpreter line 104, column 1 - line 105, column 62: " + [ arg.constructor.name, param.constructor.name, v.constructor.name ]);
          };
      };
  };
  var isAtomic = function (v) {
      if (v instanceof LazyScript_Types["Number"]) {
          return true;
      };
      if (v instanceof LazyScript_Types.Int) {
          return true;
      };
      if (v instanceof LazyScript_Types["Boolean"]) {
          return true;
      };
      if (v instanceof LazyScript_Types["String"]) {
          return true;
      };
      if (v instanceof LazyScript_Types.Lambda) {
          return true;
      };
      if (v instanceof LazyScript_Types["Error"]) {
          return true;
      };
      if (v instanceof LazyScript_Types.Null) {
          return true;
      };
      if (v instanceof LazyScript_Types.Undefined) {
          return true;
      };
      return false;
  };
  var expressionToForeign = function (expression) {
      if (expression instanceof LazyScript_Types["Number"]) {
          return Data_Foreign.toForeign(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Int) {
          return Data_Foreign.toForeign(expression.value0);
      };
      if (expression instanceof LazyScript_Types["String"]) {
          return Data_Foreign.toForeign(expression.value0);
      };
      if (expression instanceof LazyScript_Types["Boolean"]) {
          return Data_Foreign.toForeign(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Null) {
          return Data_Foreign_Null.writeNull;
      };
      return Data_Foreign_Undefined.writeUndefined;
  };
  var step = function (v) {
      return function (v1) {
          var expr = v1;
          if (isAtomic(expr)) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(expr);
          };
          if (v1 instanceof LazyScript_Types.Seq) {
              if (isAtomic(v1.value0)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(function (lhs$prime) {
                      return new LazyScript_Types.Seq(lhs$prime, v1.value1);
                  })(step(v)(v1.value0));
              };
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === "<" && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types.Int))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 < v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === "<" && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types["Number"]))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 < v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === "<" && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types["Number"]))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](Data_Int.toNumber(v1.value1.value0) > v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === "<" && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types.Int))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 > Data_Int.toNumber(v1.value2.value0)));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === ">" && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types.Int))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 > v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === ">" && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types["Number"]))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 > v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === ">" && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types["Number"]))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](Data_Int.toNumber(v1.value1.value0) < v1.value2.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value0 === ">" && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types.Int))) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](v1.value1.value0 < Data_Int.toNumber(v1.value2.value0)));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types.Int)) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(function (op1) {
                  return new LazyScript_Types.Int(op1(v1.value1.value0)(v1.value2.value0));
              })(ring(Data_EuclideanRing.euclideanRingInt)(v1.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types["Number"])) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(function (op1) {
                  return new LazyScript_Types["Number"](op1(v1.value1.value0)(v1.value2.value0));
              })(ring(Data_EuclideanRing.euclideanRingNumber)(v1.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value1 instanceof LazyScript_Types.Int && v1.value2 instanceof LazyScript_Types["Number"])) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(function (op1) {
                  return new LazyScript_Types["Number"](op1(Data_Int.toNumber(v1.value1.value0))(v1.value2.value0));
              })(ring(Data_EuclideanRing.euclideanRingNumber)(v1.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && (v1.value1 instanceof LazyScript_Types["Number"] && v1.value2 instanceof LazyScript_Types.Int)) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(function (op1) {
                  return new LazyScript_Types["Number"](op1(v1.value1.value0)(Data_Int.toNumber(v1.value2.value0)));
              })(ring(Data_EuclideanRing.euclideanRingNumber)(v1.value0));
          };
          if (v1 instanceof LazyScript_Types.Operator && v1.value1 instanceof LazyScript_Types.Int) {
              return function __do() {
                  var v2 = step(v)(v1.value2)();
                  return new LazyScript_Types.Operator(v1.value0, new LazyScript_Types.Int(v1.value1.value0), v2);
              };
          };
          if (v1 instanceof LazyScript_Types.Operator && v1.value1 instanceof LazyScript_Types["Number"]) {
              return function __do() {
                  var v2 = step(v)(v1.value2)();
                  return new LazyScript_Types.Operator(v1.value0, new LazyScript_Types["Number"](v1.value1.value0), v2);
              };
          };
          if (v1 instanceof LazyScript_Types.Operator) {
              return function __do() {
                  var v2 = step(v)(v1.value1)();
                  return new LazyScript_Types.Operator(v1.value0, v2, v1.value2);
              };
          };
          if (v1 instanceof LazyScript_Types.Conditional && v1.value0 instanceof LazyScript_Types["Boolean"]) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                  if (v1.value0.value0) {
                      return v1.value1;
                  };
                  if (!v1.value0.value0) {
                      return v1.value2;
                  };
                  throw new Error("Failed pattern match at LazyScript.Interpreter line 66, column 47 - line 66, column 73: " + [ v1.value0.value0.constructor.name ]);
              })());
          };
          if (v1 instanceof LazyScript_Types.Conditional) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(function (expr$prime) {
                  return new LazyScript_Types.Conditional(expr$prime, v1.value1, v1.value2);
              })(step(v)(v1.value0));
          };
          if (v1 instanceof LazyScript_Types.Call && (v1.value0 instanceof LazyScript_Types.Dot && (v1.value0.value0 instanceof LazyScript_Types.Identifier && (v1.value1 instanceof Data_List.Cons && v1.value1.value1 instanceof Data_List.Nil)))) {
              if (isAtomic(v1.value1.value0)) {
                  return function __do() {
                      var v2 = LazyScript_Foreign.invokeForeignFunction(v1.value0.value0.value0)(v1.value0.value1)([ expressionToForeign(v1.value1.value0) ])();
                      var $148 = Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(LazyScript_Types.Int.create)(Data_Foreign.readInt(v2)))(Data_Functor.map(Data_Either.functorEither)((LazyScript_Types["Number"]).create)(Data_Foreign.readNumber(v2))))(Data_Functor.map(Data_Either.functorEither)((LazyScript_Types["String"]).create)(Data_Foreign.readString(v2)));
                      if ($148 instanceof Data_Either.Left) {
                          return LazyScript_Types.Undefined.value;
                      };
                      if ($148 instanceof Data_Either.Right) {
                          return $148.value0;
                      };
                      throw new Error("Failed pattern match at LazyScript.Interpreter line 71, column 65 - line 73, column 87: " + [ $148.constructor.name ]);
                  };
              };
              if (Data_Boolean.otherwise) {
                  return function __do() {
                      var v2 = step(v)(v1.value1.value0)();
                      return new LazyScript_Types.Call(new LazyScript_Types.Dot(new LazyScript_Types.Identifier(v1.value0.value0.value0), v1.value0.value1), new Data_List.Cons(v2, Data_List.Nil.value));
                  };
              };
          };
          if (v1 instanceof LazyScript_Types.Call && v1.value0 instanceof LazyScript_Types.Identifier) {
              var $159 = Data_Map.lookup(Data_Ord.ordString)(v1.value0.value0)(v);
              if ($159 instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Eff_Exception["throw"]("No value");
              };
              if ($159 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new LazyScript_Types.Call($159.value0, v1.value1));
              };
              throw new Error("Failed pattern match at LazyScript.Interpreter line 78, column 43 - line 80, column 41: " + [ $159.constructor.name ]);
          };
          if (v1 instanceof LazyScript_Types.Call && (v1.value0 instanceof LazyScript_Types.Lambda && Data_List.length(v1.value1) === Data_List.length(v1.value0.value0))) {
              var e = Data_Foldable.foldl(Data_List.foldableList)(function (expr) {
                  return function (v2) {
                      return replace(v2.value0)(v2.value1)(expr);
                  };
              })(v1.value0.value1)(Data_List.zip(v1.value0.value0)(v1.value1));
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(e);
          };
          if (v1 instanceof LazyScript_Types.Call) {
              if (isAtomic(v1.value0)) {
                  return Data_Function.apply(Control_Monad_Eff_Exception["throw"])("Callee \"" + (LazyScript_Printer.printExpression(v1.value0) + "\" is not a function."));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(function (callee$prime) {
                      return new LazyScript_Types.Call(callee$prime, v1.value1);
                  })(step(v)(v1.value0));
              };
          };
          if (v1 instanceof LazyScript_Types.Identifier) {
              var $173 = Data_Map.lookup(Data_Ord.ordString)(v1.value0)(v);
              if ($173 instanceof Data_Maybe.Nothing) {
                  return Data_Function.apply(Control_Monad_Eff_Exception["throw"])("Can't find variable \"" + (v1.value0 + "\""));
              };
              if ($173 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($173.value0);
              };
              throw new Error("Failed pattern match at LazyScript.Interpreter line 89, column 29 - line 91, column 29: " + [ $173.constructor.name ]);
          };
          if (v1 instanceof LazyScript_Types.Dot && v1.value0 instanceof LazyScript_Types["Object"]) {
              var $176 = Data_Tuple.lookup(Data_List.foldableList)(Data_Eq.eqString)(v1.value1)(v1.value0.value0);
              if ($176 instanceof Data_Maybe.Nothing) {
                  return Data_Function.apply(Control_Monad_Eff_Exception["throw"])("No props");
              };
              if ($176 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($176.value0);
              };
              throw new Error("Failed pattern match at LazyScript.Interpreter line 93, column 40 - line 95, column 29: " + [ $176.constructor.name ]);
          };
          if (v1 instanceof LazyScript_Types.Dot) {
              if (isAtomic(v1.value0)) {
                  return Control_Monad_Eff_Exception["throw"]("target is not an object");
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(function (obj$prime) {
                      return new LazyScript_Types.Dot(obj$prime, v1.value1);
                  })(step(v)(v1.value0));
              };
          };
          return Data_Function.apply(Control_Monad_Eff_Exception["throw"])("Can't reduce: " + LazyScript_Printer.printExpression(v1));
      };
  };
  exports["expressionToForeign"] = expressionToForeign;
  exports["isAtomic"] = isAtomic;
  exports["replace"] = replace;
  exports["ring"] = ring;
  exports["step"] = step;
})(PS["LazyScript.Interpreter"] = PS["LazyScript.Interpreter"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_String = PS["Data.String"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var LazyScript_Interpreter = PS["LazyScript.Interpreter"];
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];        
  var wrap = function (dictShow) {
      return function (s) {
          return "function(){return " + (Data_Show.show(dictShow)(s) + "}");
      };
  };
  var calculate = function (v) {
      if (v instanceof LazyScript_Types["Boolean"]) {
          return Data_Show.show(Data_Show.showBoolean)(v.value0);
      };
      if (v instanceof LazyScript_Types.Int) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof LazyScript_Types["Number"]) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof LazyScript_Types["String"]) {
          return Data_Show.show(Data_Show.showString)(v.value0);
      };
      if (v instanceof LazyScript_Types.Identifier) {
          return "(" + (v.value0 + ")()");
      };
      return "@@@@@@@@@@@@@@@@@@@@@";
  };
  var thunk = function (v) {
      if (v instanceof LazyScript_Types.Identifier) {
          return v.value0;
      };
      if (v instanceof LazyScript_Types.Operator && (v.value1 instanceof LazyScript_Types.Int && v.value2 instanceof LazyScript_Types.Int)) {
          return "function(){return " + (Data_Show.show(Data_Show.showInt)(v.value1.value0) + (v.value0 + (Data_Show.show(Data_Show.showInt)(v.value2.value0) + "}")));
      };
      if (LazyScript_Interpreter.isAtomic(v)) {
          return "function(){return " + (Data_Show.show(LazyScript_Types.show_Expression)(v) + "}");
      };
      if (Data_Boolean.otherwise) {
          return "\n(function(){\n    var f = function(){\n        var v = " + (calculate(v) + ";\n        f = function(){ return v }\n        return v;\n    }\n    return f;\n})()\n");
      };
      throw new Error("Failed pattern match at LazyScript.Compiler line 58, column 1 - line 58, column 27: " + [ v.constructor.name ]);
  };
  var compileExpression = function (expression) {
      if (expression instanceof LazyScript_Types["Boolean"]) {
          return wrap(Data_Show.showBoolean)(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Int) {
          return wrap(Data_Show.showInt)(expression.value0);
      };
      if (expression instanceof LazyScript_Types["Number"]) {
          return wrap(Data_Show.showNumber)(expression.value0);
      };
      if (expression instanceof LazyScript_Types["String"]) {
          return wrap(Data_Show.showString)(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Identifier) {
          return expression.value0;
      };
      if (expression instanceof LazyScript_Types.Lambda) {
          return "function(){return(" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(",")(expression.value0) + (")=>" + (compileExpression(expression.value1) + "}")));
      };
      if (expression instanceof LazyScript_Types.Operator && (expression.value1 instanceof LazyScript_Types.Int && expression.value2 instanceof LazyScript_Types.Int)) {
          return "function(){return " + (Data_Show.show(Data_Show.showInt)(expression.value1.value0) + (expression.value0 + (Data_Show.show(Data_Show.showInt)(expression.value2.value0) + "}")));
      };
      if (expression instanceof LazyScript_Types.Call) {
          return "(" + (calculate(expression.value0) + (")(" + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(",")(Data_Functor.map(Data_List.functorList)(thunk)(expression.value1)) + ")")));
      };
      return "************************";
  };
  var compileStatement = function (statement) {
      if (statement instanceof LazyScript_Types.Assignment) {
          if (LazyScript_Interpreter.isAtomic(statement.value1)) {
              return "var " + (statement.value0 + (" = " + (compileExpression(statement.value1) + ";")));
          };
          if (Data_Boolean.otherwise) {
              return "\nvar " + (statement.value0 + (" = (function(){\n    var f = function(){\n        var v = " + (compileExpression(statement.value1) + ";\n        f = function(){ return v }\n        return v;\n    }\n    return f;\n})();\n        ")));
          };
      };
      if (statement instanceof LazyScript_Types.Expression) {
          if (LazyScript_Interpreter.isAtomic(statement.value0)) {
              return Data_Show.show(LazyScript_Types.show_Expression)(statement.value0);
          };
          if (Data_Boolean.otherwise) {
              return "(" + (compileExpression(statement.value0) + ")();");
          };
      };
      throw new Error("Failed pattern match at LazyScript.Compiler line 20, column 30 - line 35, column 1: " + [ statement.constructor.name ]);
  };
  var compile = function (v) {
      return Data_Function.apply(Data_String.joinWith("\n"))(Data_Function.apply(Data_Array.fromFoldable(Data_List.foldableList))(Data_Functor.map(Data_List.functorList)(compileStatement)(v.value0)));
  };
  exports["calculate"] = calculate;
  exports["compile"] = compile;
  exports["compileExpression"] = compileExpression;
  exports["compileStatement"] = compileStatement;
  exports["thunk"] = thunk;
  exports["wrap"] = wrap;
})(PS["LazyScript.Compiler"] = PS["LazyScript.Compiler"] || {});
(function(exports) {
    "use strict";
  var LazyScript_Foreign = PS["LazyScript.Foreign"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_Trampoline = PS["Control.Monad.Trampoline"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var LazyScript_Parser = PS["LazyScript.Parser"];
  var LazyScript_Printer = PS["LazyScript.Printer"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];        
  var BooleanRef = (function () {
      function BooleanRef(value0) {
          this.value0 = value0;
      };
      BooleanRef.create = function (value0) {
          return new BooleanRef(value0);
      };
      return BooleanRef;
  })();
  var IntRef = (function () {
      function IntRef(value0) {
          this.value0 = value0;
      };
      IntRef.create = function (value0) {
          return new IntRef(value0);
      };
      return IntRef;
  })();
  var NumberRef = (function () {
      function NumberRef(value0) {
          this.value0 = value0;
      };
      NumberRef.create = function (value0) {
          return new NumberRef(value0);
      };
      return NumberRef;
  })();
  var StringRef = (function () {
      function StringRef(value0) {
          this.value0 = value0;
      };
      StringRef.create = function (value0) {
          return new StringRef(value0);
      };
      return StringRef;
  })();
  var NullRef = (function () {
      function NullRef() {

      };
      NullRef.value = new NullRef();
      return NullRef;
  })();
  var UndefinedRef = (function () {
      function UndefinedRef() {

      };
      UndefinedRef.value = new UndefinedRef();
      return UndefinedRef;
  })();
  var LambdaRef = (function () {
      function LambdaRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LambdaRef.create = function (value0) {
          return function (value1) {
              return new LambdaRef(value0, value1);
          };
      };
      return LambdaRef;
  })();
  var ErrorRef = (function () {
      function ErrorRef(value0) {
          this.value0 = value0;
      };
      ErrorRef.create = function (value0) {
          return new ErrorRef(value0);
      };
      return ErrorRef;
  })();
  var OperatorRef = (function () {
      function OperatorRef(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OperatorRef.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OperatorRef(value0, value1, value2);
              };
          };
      };
      return OperatorRef;
  })();
  var IdentifierRef = (function () {
      function IdentifierRef(value0) {
          this.value0 = value0;
      };
      IdentifierRef.create = function (value0) {
          return new IdentifierRef(value0);
      };
      return IdentifierRef;
  })();
  var CallRef = (function () {
      function CallRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CallRef.create = function (value0) {
          return function (value1) {
              return new CallRef(value0, value1);
          };
      };
      return CallRef;
  })();
  var Memo = (function () {
      function Memo(value0) {
          this.value0 = value0;
      };
      Memo.create = function (value0) {
          return new Memo(value0);
      };
      return Memo;
  })();
  var ring = function (dictEuclideanRing) {
      return function (v) {
          if (v === "+") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.add(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
          };
          if (v === "*") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Semiring.mul(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
          };
          if (v === "/") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_EuclideanRing.div(dictEuclideanRing));
          };
          if (v === "-") {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Ring.sub((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]()));
          };
          return Control_Monad_Eff_Exception["throw"]("Operator not found: " + v);
      };
  };
  var replace = function (arg) {
      return function (param) {
          return function (value) {
              if (value instanceof OperatorRef) {
                  return Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(OperatorRef.create(value.value0))(replace(arg)(param)(value.value1)))(replace(arg)(param)(value.value2));
              };
              if (value instanceof IdentifierRef && arg === value.value0) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(param);
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(value);
          };
      };
  };
  var isAtomic = function (v) {
      if (v instanceof NumberRef) {
          return true;
      };
      if (v instanceof IntRef) {
          return true;
      };
      if (v instanceof BooleanRef) {
          return true;
      };
      if (v instanceof StringRef) {
          return true;
      };
      if (v instanceof LambdaRef) {
          return true;
      };
      if (v instanceof ErrorRef) {
          return true;
      };
      if (v instanceof NullRef) {
          return true;
      };
      if (v instanceof UndefinedRef) {
          return true;
      };
      return false;
  };
  var step = function (table) {
      return function (ref) {
          if (ref instanceof IdentifierRef) {
              var $29 = Data_Map.lookup(Data_Ord.ordString)(ref.value0)(table);
              if ($29 instanceof Data_Maybe.Nothing) {
                  return Data_Function.apply(Control_Monad_Eff_Exception["throw"])("Can't find variable \"" + (ref.value0 + "\""));
              };
              if ($29 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($29.value0);
              };
              throw new Error("Failed pattern match at LazyScript.InterpreterGraph line 82, column 30 - line 84, column 37: " + [ $29.constructor.name ]);
          };
          if (ref instanceof OperatorRef && ref.value1 instanceof Memo) {
              return function __do() {
                  var v = Control_Monad_ST.readSTRef(ref.value1.value0)();
                  var $33 = isAtomic(v);
                  if ($33) {
                      return step(table)(new OperatorRef(ref.value0, v, ref.value2))();
                  };
                  if (!$33) {
                      var v1 = step(table)(new Memo(ref.value1.value0))();
                      return new OperatorRef(ref.value0, new Memo(ref.value1.value0), ref.value2);
                  };
                  throw new Error("Failed pattern match at LazyScript.InterpreterGraph line 88, column 13 - line 93, column 61: " + [ $33.constructor.name ]);
              };
          };
          if (ref instanceof OperatorRef && ref.value2 instanceof Memo) {
              return function __do() {
                  var v = Control_Monad_ST.readSTRef(ref.value2.value0)();
                  var $40 = isAtomic(v);
                  if ($40) {
                      return step(table)(new OperatorRef(ref.value0, ref.value1, v))();
                  };
                  if (!$40) {
                      var v1 = step(table)(new Memo(ref.value2.value0))();
                      return new OperatorRef(ref.value0, ref.value1, new Memo(ref.value2.value0));
                  };
                  throw new Error("Failed pattern match at LazyScript.InterpreterGraph line 97, column 13 - line 102, column 61: " + [ $40.constructor.name ]);
              };
          };
          if (ref instanceof OperatorRef && (ref.value1 instanceof IntRef && ref.value2 instanceof IntRef)) {
              return function __do() {
                  var v = ring(Data_EuclideanRing.euclideanRingInt)(ref.value0)();
                  return new IntRef(v(ref.value1.value0)(ref.value2.value0));
              };
          };
          if (ref instanceof CallRef && (ref.value0 instanceof LambdaRef && Data_List.length(ref.value1) === Data_List.length(ref.value0.value0))) {
              return Data_List.foldM(Control_Monad_Eff.monadEff)(function (expr) {
                  return function (v) {
                      return function __do() {
                          var v1 = Control_Monad_ST.newSTRef(v.value1)();
                          return replace(v.value0)(new Memo(v1))(expr)();
                      };
                  };
              })(ref.value0.value1)(Data_List.zip(ref.value0.value0)(ref.value1));
          };
          if (ref instanceof CallRef) {
              return function __do() {
                  var v = step(table)(ref.value0)();
                  return new CallRef(v, ref.value1);
              };
          };
          if (ref instanceof Memo) {
              return function __do() {
                  var v = Control_Monad_ST.readSTRef(ref.value0)();
                  var v2 = step(table)(v)();
                  Control_Monad_ST.writeSTRef(ref.value0)(v2)();
                  return new Memo(ref.value0);
              };
          };
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(ref);
      };
  };
  var encode = function (expression) {
      if (expression instanceof LazyScript_Types["Boolean"]) {
          return new BooleanRef(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Int) {
          return new IntRef(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Identifier) {
          return new IdentifierRef(expression.value0);
      };
      if (expression instanceof LazyScript_Types.Operator) {
          return new OperatorRef(expression.value0, encode(expression.value1), encode(expression.value2));
      };
      if (expression instanceof LazyScript_Types.Call) {
          return new CallRef(encode(expression.value0), Data_Functor.map(Data_List.functorList)(encode)(expression.value1));
      };
      if (expression instanceof LazyScript_Types.Lambda) {
          return new LambdaRef(expression.value0, encode(expression.value1));
      };
      return UndefinedRef.value;
  };
  var decode = function (ref) {
      if (ref instanceof BooleanRef) {
          return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types["Boolean"](ref.value0));
      };
      if (ref instanceof IntRef) {
          return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types.Int(ref.value0));
      };
      if (ref instanceof IdentifierRef) {
          return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new LazyScript_Types.Identifier(ref.value0));
      };
      if (ref instanceof OperatorRef) {
          return Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(LazyScript_Types.Operator.create(ref.value0))(decode(ref.value1)))(decode(ref.value2));
      };
      if (ref instanceof CallRef) {
          return Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(LazyScript_Types.Call.create)(decode(ref.value0)))(Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(ref.value1)(decode));
      };
      if (ref instanceof LambdaRef) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(LazyScript_Types.Lambda.create(ref.value0))(decode(ref.value1));
      };
      if (ref instanceof Memo) {
          return function __do() {
              var v = Control_Monad_ST.readSTRef(ref.value0)();
              return decode(v)();
          };
      };
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(LazyScript_Types.Undefined.value);
  };
  exports["BooleanRef"] = BooleanRef;
  exports["IntRef"] = IntRef;
  exports["NumberRef"] = NumberRef;
  exports["StringRef"] = StringRef;
  exports["NullRef"] = NullRef;
  exports["UndefinedRef"] = UndefinedRef;
  exports["LambdaRef"] = LambdaRef;
  exports["ErrorRef"] = ErrorRef;
  exports["OperatorRef"] = OperatorRef;
  exports["IdentifierRef"] = IdentifierRef;
  exports["CallRef"] = CallRef;
  exports["Memo"] = Memo;
  exports["decode"] = decode;
  exports["encode"] = encode;
  exports["isAtomic"] = isAtomic;
  exports["replace"] = replace;
  exports["ring"] = ring;
  exports["step"] = step;
})(PS["LazyScript.InterpreterGraph"] = PS["LazyScript.InterpreterGraph"] || {});
(function(exports) {exports.requestAnimationFrame = function(callback){
      return function(){
          window.requestAnimationFrame(callback);
      }
  }
})(PS["LazyScript.Playground.Main"] = PS["LazyScript.Playground.Main"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Halogen = PS["Halogen"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var LazyScript_Types = PS["LazyScript.Types"];        
  var Initial = (function () {
      function Initial() {

      };
      Initial.value = new Initial();
      return Initial;
  })();
  var RuntimeError = (function () {
      function RuntimeError(value0) {
          this.value0 = value0;
      };
      RuntimeError.create = function (value0) {
          return new RuntimeError(value0);
      };
      return RuntimeError;
  })();
  var Parsed = (function () {
      function Parsed(value0) {
          this.value0 = value0;
      };
      Parsed.create = function (value0) {
          return new Parsed(value0);
      };
      return Parsed;
  })();
  var Evaluated = (function () {
      function Evaluated(value0) {
          this.value0 = value0;
      };
      Evaluated.create = function (value0) {
          return new Evaluated(value0);
      };
      return Evaluated;
  })();
  var Compiled = (function () {
      function Compiled(value0) {
          this.value0 = value0;
      };
      Compiled.create = function (value0) {
          return new Compiled(value0);
      };
      return Compiled;
  })();
  var Evaluate = (function () {
      function Evaluate(value0) {
          this.value0 = value0;
      };
      Evaluate.create = function (value0) {
          return new Evaluate(value0);
      };
      return Evaluate;
  })();
  var Compile = (function () {
      function Compile(value0) {
          this.value0 = value0;
      };
      Compile.create = function (value0) {
          return new Compile(value0);
      };
      return Compile;
  })();
  var Change = (function () {
      function Change(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Change.create = function (value0) {
          return function (value1) {
              return new Change(value0, value1);
          };
      };
      return Change;
  })();
  var Example = (function () {
      function Example(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Example.create = function (value0) {
          return function (value1) {
              return new Example(value0, value1);
          };
      };
      return Example;
  })();
  exports["Evaluate"] = Evaluate;
  exports["Compile"] = Compile;
  exports["Change"] = Change;
  exports["Example"] = Example;
  exports["Initial"] = Initial;
  exports["RuntimeError"] = RuntimeError;
  exports["Parsed"] = Parsed;
  exports["Evaluated"] = Evaluated;
  exports["Compiled"] = Compiled;
})(PS["LazyScript.Playground.Types"] = PS["LazyScript.Playground.Types"] || {});
(function(exports) {
    "use strict";
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];        
  var initialSample = Data_String.trim("\ncst = (x, y) => y\ncst(p, 20 + 22)\n");
  var samples = [ new Data_Tuple.Tuple("constant function", initialSample), new Data_Tuple.Tuple("add", "\nx = 1 + 1\ny = x + x\ny\n"), new Data_Tuple.Tuple("square", "\nsquare = (x) => x * x\nsquare (4 + 2)\n"), new Data_Tuple.Tuple("object", "\naddVector = (p, q) => { x: p.x + q.x, y: p.y + q.y }\nv = addVector({ x: 10, y: 20 }, { x: 30, y: 40 })\nv.x\n"), new Data_Tuple.Tuple("infinite list", "\nxs = { head: 42, tail: xs }\nxs.tail.tail.tail.head\n"), new Data_Tuple.Tuple("sequencial evaluation", "\n1 + 2 $ 3 + 4 $ 5 + 6\n"), new Data_Tuple.Tuple("curried function", "\nf = (x) => (y) => x + y\nf(10)(20)\n"), new Data_Tuple.Tuple("Tarai Function", "\ntarai = (x, y, z) => y < x ? tarai(tarai(x-1, y, z), tarai(y-1, z, x), tarai(z-1, x, y)) : y\ntarai(2, 1, 0)\n"), new Data_Tuple.Tuple("iterate", "\niterate = (n, f) => { head: n, tail: iterate(f(n), f) }\nnat = iterate(0, (x)=>x+1)\nnat.tail.tail.tail.tail.head\n"), new Data_Tuple.Tuple("for loop", "\nfor = (i, n, f) => i < n ? f(i) $ for(i + 1, n, f) : null\nfor(0, 10, console.log)\n") ];
  exports["initialSample"] = initialSample;
  exports["samples"] = samples;
})(PS["LazyScript.Playground.Samples"] = PS["LazyScript.Playground.Samples"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_String = PS["Data.String"];
  var Halogen = PS["Halogen"];
  var Halogen_HTML_Events_Indexed = PS["Halogen.HTML.Events.Indexed"];
  var Halogen_HTML_Properties_Indexed = PS["Halogen.HTML.Properties.Indexed"];
  var Halogen_HTML_Indexed = PS["Halogen.HTML.Indexed"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var LazyScript_Printer = PS["LazyScript.Printer"];
  var LazyScript_Playground_Types = PS["LazyScript.Playground.Types"];
  var LazyScript_Playground_Samples = PS["LazyScript.Playground.Samples"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Elements_Indexed = PS["Halogen.HTML.Elements.Indexed"];
  var Data_Function = PS["Data.Function"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var LazyScript_Types = PS["LazyScript.Types"];        
  var render = function (state) {
      return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.header_([ Halogen_HTML_Elements.h1_([ Halogen_HTML.text("LazyScript Evaluater") ]) ]), Halogen_HTML_Elements_Indexed.p([ Data_Function.apply(Halogen_HTML_Properties_Indexed.class_)(Halogen_HTML_Core.className("content")) ])([ Halogen_HTML_Elements_Indexed.div([ Data_Function.apply(Halogen_HTML_Properties_Indexed.class_)(Halogen_HTML_Core.className("buttons")) ])([ Halogen_HTML_Elements_Indexed.button([ Halogen_HTML_Events_Indexed.onClick(Halogen_HTML_Events.input_(LazyScript_Playground_Types.Evaluate.create)) ])([ Halogen_HTML.text("Evaluate") ]), Halogen_HTML_Elements_Indexed.select([ Halogen_HTML_Events_Indexed.onValueChange(Halogen_HTML_Events.input(LazyScript_Playground_Types.Example.create)) ])(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return Halogen_HTML_Elements_Indexed.option([  ])([ Halogen_HTML.text(v.value0) ]);
      })(LazyScript_Playground_Samples.samples)) ]), Halogen_HTML_Elements_Indexed.textarea([ Data_Function.apply(Halogen_HTML_Properties_Indexed.class_)(Halogen_HTML_Core.className("source")), Halogen_HTML_Properties_Indexed.value(state.source), Halogen_HTML_Events_Indexed.onValueChange(Halogen_HTML_Events.input(LazyScript_Playground_Types.Change.create)), Halogen_HTML_Properties_Indexed.spellcheck(false) ]), Halogen_HTML_Elements_Indexed.p([ Data_Function.apply(Halogen_HTML_Properties_Indexed.class_)(Halogen_HTML_Core.className("errors")) ])((function () {
          if (state.parseError instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (state.parseError instanceof Data_Maybe.Just) {
              return [ Data_Function.apply(Halogen_HTML.text)("[line:" + (Data_Show.show(Data_Show.showInt)(state.parseError.value0.value0.position.value0.line) + (", column:" + (Data_Show.show(Data_Show.showInt)(state.parseError.value0.value0.position.value0.column) + ("] Parse Error: " + state.parseError.value0.value0.message))))) ];
          };
          throw new Error("Failed pattern match at LazyScript.Playground.Render line 40, column 9 - line 42, column 194: " + [ state.parseError.constructor.name ]);
      })()), Halogen_HTML_Elements.p_((function () {
          if (state.result instanceof LazyScript_Playground_Types.Initial) {
              return [  ];
          };
          if (state.result instanceof LazyScript_Playground_Types.Parsed) {
              return [ Halogen_HTML.text(Data_Show.show(LazyScript_Types.show_Program)(state.result.value0)) ];
          };
          if (state.result instanceof LazyScript_Playground_Types.Evaluated) {
              return [ Halogen_HTML_Elements_Indexed.pre([  ])([ Data_Function.apply(Halogen_HTML.text)(Data_Function.apply(Data_String.joinWith("\n\n"))(Data_Function.apply(Data_Array.fromFoldable(Data_List.foldableList))(Data_Functor.map(Data_List.functorList)(function (ys) {
                  return "   " + Data_String.joinWith("\n = ")(Data_Function.apply(Data_Array.fromFoldable(Data_List.foldableList))(Data_Functor.map(Data_List.functorList)(LazyScript_Printer.printExpression)(Data_List.reverse(ys))));
              })(state.result.value0)))) ]) ];
          };
          if (state.result instanceof LazyScript_Playground_Types.RuntimeError) {
              return [ Halogen_HTML.text(state.result.value0) ];
          };
          if (state.result instanceof LazyScript_Playground_Types.Compiled) {
              return [ Halogen_HTML_Elements_Indexed.pre([  ])([ Halogen_HTML.text(state.result.value0) ]) ];
          };
          throw new Error("Failed pattern match at LazyScript.Playground.Render line 43, column 9 - line 49, column 58: " + [ state.result.constructor.name ]);
      })()) ]) ]);
  };
  exports["render"] = render;
})(PS["LazyScript.Playground.Render"] = PS["LazyScript.Playground.Render"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["LazyScript.Playground.Main"];
  var Prelude = PS["Prelude"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_List = PS["Data.List"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Halogen = PS["Halogen"];
  var Halogen_Util = PS["Halogen.Util"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var LazyScript_Types = PS["LazyScript.Types"];
  var LazyScript_Interpreter = PS["LazyScript.Interpreter"];
  var LazyScript_InterpreterGraph = PS["LazyScript.InterpreterGraph"];
  var LazyScript_Parser = PS["LazyScript.Parser"];
  var LazyScript_Playground_Types = PS["LazyScript.Playground.Types"];
  var LazyScript_Playground_Render = PS["LazyScript.Playground.Render"];
  var LazyScript_Playground_Samples = PS["LazyScript.Playground.Samples"];
  var LazyScript_Compiler = PS["LazyScript.Compiler"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Bind = PS["Control.Bind"];
  var Halogen_Query = PS["Halogen.Query"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Map = PS["Data.Map"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Driver = PS["Halogen.Driver"];        
  var ui = (function () {
      var $$eval = function (v) {
          if (v instanceof LazyScript_Playground_Types.Change) {
              return Data_Functor.voidRight(Control_Monad_Free.freeFunctor)(v.value1)(Control_Bind.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v1) {
                  return Halogen_Query.modify(function (v2) {
                      var $23 = {};
                      for (var $24 in v2) {
                          if (v2.hasOwnProperty($24)) {
                              $23[$24] = v2[$24];
                          };
                      };
                      $23.source = v.value0;
                      $23.parseError = (function () {
                          var $20 = Text_Parsing_Parser.runParser(v.value0)(LazyScript_Parser.program);
                          if ($20 instanceof Data_Either.Left) {
                              return new Data_Maybe.Just($20.value0);
                          };
                          if ($20 instanceof Data_Either.Right) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at LazyScript.Playground.Main line 45, column 26 - line 47, column 34: " + [ $20.constructor.name ]);
                      })();
                      return $23;
                  });
              }));
          };
          if (v instanceof LazyScript_Playground_Types.Example) {
              return Data_Functor.voidRight(Control_Monad_Free.freeFunctor)(v.value1)((function () {
                  var $28 = Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v.value0)(LazyScript_Playground_Samples.samples);
                  if ($28 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v.value1);
                  };
                  if ($28 instanceof Data_Maybe.Just) {
                      return $$eval(new LazyScript_Playground_Types.Change(Data_String.trim($28.value0), v.value1));
                  };
                  throw new Error("Failed pattern match at LazyScript.Playground.Main line 51, column 9 - line 53, column 58: " + [ $28.constructor.name ]);
              })());
          };
          if (v instanceof LazyScript_Playground_Types.Evaluate) {
              return Data_Functor.voidRight(Control_Monad_Free.freeFunctor)(v.value0)(Control_Bind.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v1) {
                  var $33 = Text_Parsing_Parser.runParser(v1.source)(LazyScript_Parser.program);
                  if ($33 instanceof Data_Either.Left) {
                      return Halogen_Query.modify(function (v2) {
                          var $34 = {};
                          for (var $35 in v2) {
                              if (v2.hasOwnProperty($35)) {
                                  $34[$35] = v2[$35];
                              };
                          };
                          $34.parseError = new Data_Maybe.Just($33.value0);
                          return $34;
                      });
                  };
                  if ($33 instanceof Data_Either.Right) {
                      var table = LazyScript_Types.assignments($33.value0);
                      var body = LazyScript_Types.expressions($33.value0);
                      var $38 = Data_List["null"](body);
                      if ($38) {
                          return Halogen_Query.modify(function (v2) {
                              var $39 = {};
                              for (var $40 in v2) {
                                  if (v2.hasOwnProperty($40)) {
                                      $39[$40] = v2[$40];
                                  };
                              };
                              $39.result = new LazyScript_Playground_Types.RuntimeError("No expressions to evaluate");
                              return $39;
                          });
                      };
                      if (!$38) {
                          return Data_Functor["void"](Control_Monad_Free.freeFunctor)(Control_Bind.bind(Control_Monad_Free.freeBind)(Data_Traversable["for"](Control_Monad_Free.freeApplicative)(Data_List.traversableList)(body)(function (expression) {
                              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free.freeMonadRec)(function (v2) {
                                  var $43 = LazyScript_Interpreter.isAtomic(v2.value0);
                                  if ($43) {
                                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Free.freeApplicative))(new Data_Either.Right(v2.value1));
                                  };
                                  if (!$43) {
                                      return Control_Bind.bind(Control_Monad_Free.freeBind)(Data_Function.apply(Halogen_Query.liftH)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))(Data_Function.apply(Control_Monad_Eff_Exception["try"])(LazyScript_Interpreter.step(table)(v2.value0)))))(function (v3) {
                                          if (v3 instanceof Data_Either.Left) {
                                              return Control_Bind.bind(Control_Monad_Free.freeBind)(Halogen_Query.modify(function (state1) {
                                                  var $46 = {};
                                                  for (var $47 in state1) {
                                                      if (state1.hasOwnProperty($47)) {
                                                          $46[$47] = state1[$47];
                                                      };
                                                  };
                                                  $46.result = new LazyScript_Playground_Types.RuntimeError(Data_Show.show(Control_Monad_Eff_Exception.showError)(v3.value0));
                                                  return $46;
                                              }))(function () {
                                                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Free.freeApplicative))(new Data_Either.Right(v2.value1));
                                              });
                                          };
                                          if (v3 instanceof Data_Either.Right && Data_Eq.eq(LazyScript_Types.eq_Expression)(v2.value0)(v3.value0)) {
                                              return Control_Bind.bind(Control_Monad_Free.freeBind)(Halogen_Query.modify(function (state1) {
                                                  var $50 = {};
                                                  for (var $51 in state1) {
                                                      if (state1.hasOwnProperty($51)) {
                                                          $50[$51] = state1[$51];
                                                      };
                                                  };
                                                  $50.result = new LazyScript_Playground_Types.RuntimeError("Can't reduce");
                                                  return $50;
                                              }))(function () {
                                                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Free.freeApplicative))(new Data_Either.Right(v2.value1));
                                              });
                                          };
                                          if (v3 instanceof Data_Either.Right && Data_Boolean.otherwise) {
                                              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Free.freeApplicative))(Data_Function.apply(Data_Either.Left.create)(new Data_Tuple.Tuple(v3.value0, new Data_List.Cons(v3.value0, v2.value1))));
                                          };
                                          throw new Error("Failed pattern match at LazyScript.Playground.Main line 71, column 33 - line 79, column 93: " + [ v3.constructor.name ]);
                                      });
                                  };
                                  throw new Error("Failed pattern match at LazyScript.Playground.Main line 67, column 100 - line 79, column 93: " + [ $43.constructor.name ]);
                              })(new Data_Tuple.Tuple(expression, Data_List.singleton(expression)));
                          }))(function (v2) {
                              return Control_Bind.bind(Control_Monad_Free.freeBind)(Data_Function.apply(Halogen_Query.liftH)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))((function () {
                                  var table$prime = Data_Functor.map(Data_Map.functorMap)(LazyScript_InterpreterGraph.encode)(table);
                                  return Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(body)(function (expression) {
                                      var ref = LazyScript_InterpreterGraph.encode(expression);
                                      return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff)(function (v3) {
                                          return function __do() {
                                              var v4 = LazyScript_InterpreterGraph.decode(v3.value0)();
                                              var v5 = LazyScript_InterpreterGraph.step(table$prime)(v3.value0)();
                                              var v6 = LazyScript_InterpreterGraph.decode(v5)();
                                              var $62 = Data_Eq.eq(LazyScript_Types.eq_Expression)(v4)(v6);
                                              if ($62) {
                                                  return new Data_Either.Right(v3.value1);
                                              };
                                              if (!$62) {
                                                  return new Data_Either.Left(new Data_Tuple.Tuple(v5, new Data_List.Cons(v6, v3.value1)));
                                              };
                                              throw new Error("Failed pattern match at LazyScript.Playground.Main line 90, column 37 - line 94, column 75: " + [ $62.constructor.name ]);
                                          };
                                      })(new Data_Tuple.Tuple(ref, Data_List.singleton(expression)));
                                  });
                              })())))(function (v3) {
                                  return Halogen_Query.modify(function (state1) {
                                      var $66 = {};
                                      for (var $67 in state1) {
                                          if (state1.hasOwnProperty($67)) {
                                              $66[$67] = state1[$67];
                                          };
                                      };
                                      $66.result = new LazyScript_Playground_Types.Evaluated(v3);
                                      return $66;
                                  });
                              });
                          }));
                      };
                      throw new Error("Failed pattern match at LazyScript.Playground.Main line 62, column 17 - line 99, column 86: " + [ $38.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at LazyScript.Playground.Main line 57, column 9 - line 99, column 86: " + [ $33.constructor.name ]);
              }));
          };
          if (v instanceof LazyScript_Playground_Types.Compile) {
              return Data_Functor.voidRight(Control_Monad_Free.freeFunctor)(v.value0)(Control_Bind.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v1) {
                  var $72 = Text_Parsing_Parser.runParser(v1.source)(LazyScript_Parser.program);
                  if ($72 instanceof Data_Either.Left) {
                      return Halogen_Query.modify(function (v2) {
                          var $73 = {};
                          for (var $74 in v2) {
                              if (v2.hasOwnProperty($74)) {
                                  $73[$74] = v2[$74];
                              };
                          };
                          $73.parseError = new Data_Maybe.Just($72.value0);
                          return $73;
                      });
                  };
                  if ($72 instanceof Data_Either.Right) {
                      return Halogen_Query.modify(function (v2) {
                          var $77 = {};
                          for (var $78 in v2) {
                              if (v2.hasOwnProperty($78)) {
                                  $77[$78] = v2[$78];
                              };
                          };
                          $77.result = new LazyScript_Playground_Types.Compiled(LazyScript_Compiler.compile($72.value0));
                          return $77;
                      });
                  };
                  throw new Error("Failed pattern match at LazyScript.Playground.Main line 103, column 9 - line 106, column 69: " + [ $72.constructor.name ]);
              }));
          };
          throw new Error("Failed pattern match at LazyScript.Playground.Main line 41, column 5 - line 48, column 11: " + [ v.constructor.name ]);
      };
      return Halogen_Component.component({
          render: LazyScript_Playground_Render.render, 
          "eval": $$eval
      });
  })();
  var initialState = {
      source: LazyScript_Playground_Samples.initialSample, 
      parseError: Data_Maybe.Nothing.value, 
      result: LazyScript_Playground_Types.Initial.value
  };
  var main = Halogen_Util.runHalogenAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Util.awaitBody)(function (v) {
      return Halogen_Driver.runUI(ui)(initialState)(v);
  }));
  exports["initialState"] = initialState;
  exports["main"] = main;
  exports["ui"] = ui;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS["LazyScript.Playground.Main"] = PS["LazyScript.Playground.Main"] || {});
PS["LazyScript.Playground.Main"].main();

},{"virtual-dom/create-element":3,"virtual-dom/diff":4,"virtual-dom/patch":8,"virtual-dom/virtual-hyperscript/hooks/soft-set-hook":15,"virtual-dom/vnode/vnode":23,"virtual-dom/vnode/vtext":25}],3:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":10}],4:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":27}],5:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":1}],6:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],7:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],8:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":13}],9:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":18,"is-object":6}],10:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":16,"../vnode/is-vnode.js":19,"../vnode/is-vtext.js":20,"../vnode/is-widget.js":21,"./apply-properties":9,"global/document":5}],11:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],12:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = renderOptions.render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = renderOptions.render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":21,"../vnode/vpatch.js":24,"./apply-properties":9,"./update-widget":14}],13:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var render = require("./create-element")
var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches, renderOptions) {
    renderOptions = renderOptions || {}
    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch
        ? renderOptions.patch
        : patchRecursive
    renderOptions.render = renderOptions.render || render

    return renderOptions.patch(rootNode, patches, renderOptions)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions.document && ownerDocument !== document) {
        renderOptions.document = ownerDocument
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./create-element":10,"./dom-index":11,"./patch-op":12,"global/document":5,"x-is-array":7}],14:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":21}],15:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],16:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":17,"./is-vnode":19,"./is-vtext":20,"./is-widget":21}],17:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],18:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],19:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":22}],20:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":22}],21:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],22:[function(require,module,exports){
module.exports = "2"

},{}],23:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":17,"./is-vhook":18,"./is-vnode":19,"./is-widget":21,"./version":22}],24:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":22}],25:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":22}],26:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":18,"is-object":6}],27:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free      // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":16,"../vnode/is-thunk":17,"../vnode/is-vnode":19,"../vnode/is-vtext":20,"../vnode/is-widget":21,"../vnode/vpatch":24,"./diff-props":26,"x-is-array":7}]},{},[2]);
