// Generated by psc-bundle 0.9.3
var PS = {};
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  // module Data.Show

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      try {
        return cb(function(e) {
          return function() {
            error(e);
          };
        })(function(v) {
          return function() {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      success(v);
      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      try {
        return aff(function(v) {
          try {
            var v2 = f(v);
          } catch (err) {
            error(err)
          }
          success(v2);
        }, error);
      } catch (err) {
        error(err);
      }
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        successT(v)();
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  }
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                         
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["maybe"] = maybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];                                           
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($164) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($164));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });                                        
  var cancel = function (v) {
      return v;
  };
  var launchAff = (function () {
      var lowerEx = Data_Functor.map(Control_Monad_Eff.functorEff)(function ($34) {
          return Canceler(Data_Functor.map(Data_Functor.functorFn)($foreign._unsafeInterleaveAff)(cancel($34)));
      });
      return function ($35) {
          return lowerEx(runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($foreign._unsafeInterleaveAff($35)));
      };
  })();
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["Canceler"] = Canceler;
  exports["cancel"] = cancel;
  exports["launchAff"] = launchAff;
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Ref

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  // jshint maxparams: 1

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };                         

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pi"] = $foreign.pi;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["toForeign"] = $foreign.toForeign;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 456, column 3 - line 458, column 40: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a, as);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(Data_Function.apply(as)(singleton(a)), sequences(v));
              };
          };
      };
      return function ($385) {
          return mergeAll(sequences($385));
      };
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();                                      
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 138, column 1 - line 142, column 68: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $209 = start > end;
                  if ($209) {
                      return 1;
                  };
                  if (!$209) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 139, column 45 - line 139, column 74: " + [ $209.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 138, column 1 - line 142, column 68: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });   
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Control_Applicative.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match at Data.List line 750, column 3 - line 750, column 26: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Control_Applicative.pure(dictApplicative)(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 748, column 3 - line 748, column 28: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 369, column 1 - line 374, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["filter"] = filter;
  exports["fromFoldable"] = fromFoldable;
  exports["range"] = range;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["sortBy"] = sortBy;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];                                        
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };                 

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var toList = function ($39) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)($39));
  };
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };                                                                                                 
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };                                                          
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["thawST"] = thawST;
  exports["toList"] = toList;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {exports.initializeApp = function(config){
      return function(){
          //var firebase = require('firebase');
          return firebase.initializeApp(config);
      }
  }

  exports.database = function(firebase){
      return function(){
          return firebase.database();
      }
  }


  exports.ref = function(path){
      return function(database){
          return function(){
              return database.ref(path);
          }
      }
  }


  exports.child = function(path){
      return function(reference){
          return function(){
              return reference.child(path);
          }
      }
  }

  exports.set = function(value){
      return function(reference){
          return function(){
              reference.set(value);
          }
      }
  }

  exports.onValue = function(callback){
      return function(reference){
          return function(){
              reference.on("value", function(snapshot){
                  callback(snapshot)();
              });
          }
      }
  }

  exports.off = function(reference){
      return function(){
          reference.off();
      }
  }

  exports.val = function(snapshot){
      return snapshot.val();
  }


  exports.auth = function(firebase){
      return function(){
          return firebase.auth();
      }
  }

  exports.signInAnonymously = function(auth){
      return function(){
          auth.signInAnonymously()
      }
  }

  exports.signOut = function(auth){
      return function(){
          auth.signOut()
      }
  }

  exports._onAuthStateChanged = function(callback){
      return function(auth){
          return function(){
              auth.onAuthStateChanged(function(user){
                  callback(user)();
              });
          }
      }
  }



  exports.uid = function(user){
      return user.uid;
  }





  exports.onDisconnect = function(reference){
      return function(){
          return reference.onDisconnect();
      }
  }
})(PS["Web.Firebase"] = PS["Web.Firebase"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Web.Firebase"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var onAuthStateChanged = function (callback) {
      return $foreign._onAuthStateChanged(function ($0) {
          return callback(Data_Nullable.toMaybe($0));
      });
  };
  exports["onAuthStateChanged"] = onAuthStateChanged;
  exports["auth"] = $foreign.auth;
  exports["child"] = $foreign.child;
  exports["database"] = $foreign.database;
  exports["initializeApp"] = $foreign.initializeApp;
  exports["off"] = $foreign.off;
  exports["onDisconnect"] = $foreign.onDisconnect;
  exports["onValue"] = $foreign.onValue;
  exports["ref"] = $foreign.ref;
  exports["set"] = $foreign.set;
  exports["signInAnonymously"] = $foreign.signInAnonymously;
  exports["signOut"] = $foreign.signOut;
  exports["uid"] = $foreign.uid;
  exports["val"] = $foreign.val;
})(PS["Web.Firebase"] = PS["Web.Firebase"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Int = PS["Data.Int"];
  var Web_Firebase = PS["Web.Firebase"];
  var Data_Semiring = PS["Data.Semiring"];
  var screenWidth = 1280;
  var screenHeight = 720;
  var screenBounds = {
      x: 0.0, 
      y: 0.0, 
      w: Data_Int.toNumber(screenWidth), 
      h: Data_Int.toNumber(screenHeight)
  };
  var firebaseAPIKey = {
      apiKey: "AIzaSyBFkn9lkakKFellziTNu3gGRNgqRvemlR0", 
      authDomain: "zombie-c5857.firebaseapp.com", 
      databaseURL: "https://zombie-c5857.firebaseio.com/", 
      storageBucket: "zombie-c5857.appspot.com", 
      messagingSenderId: "135964071397"
  };
  var defaultScaleFactor = 7.0;
  var defaultRotation = $$Math.pi * 0.25;
  var chunkSize = 16;
  exports["chunkSize"] = chunkSize;
  exports["defaultRotation"] = defaultRotation;
  exports["defaultScaleFactor"] = defaultScaleFactor;
  exports["firebaseAPIKey"] = firebaseAPIKey;
  exports["screenBounds"] = screenBounds;
  exports["screenHeight"] = screenHeight;
  exports["screenWidth"] = screenWidth;
})(PS["Game.Zombie.Constants"] = PS["Game.Zombie.Constants"] || {});
(function(exports) {var count = 0;
  var keyTable = {};

  exports.gameloop = function(callback){
      return function(){
          function next(){
              callback();
              count += 1;
              window.requestAnimationFrame(next);
          }
          window.addEventListener("keydown", function(e){
              if( ! keyTable.hasOwnProperty(e.keyCode)){
                  keyTable[e.keyCode] = count;
              }
          });
          window.addEventListener("keyup", function(e){
              delete keyTable[e.keyCode];
          });
          next();
      };
  };

  exports._getKey = function(keyCode){
      return function(){
          return keyTable.hasOwnProperty(keyCode) ? count - keyTable[keyCode] : null;
      };
  };

  exports.now = function(){
      return count;
  };

  var tempImageTable = {};

  exports.drawImageWithBrightness = function(context){
      return function(image){
          return function(x){
              return function(y){
                  return function(brightness){
                      return function(){
                          var key = image.width + "," + image.height
                          var temp = tempImageTable[key];
                          if( ! temp){
                              tempImageTable[key] = temp = document.createElement("canvas");
                              temp.setAttribute("width", image.width);
                              temp.setAttribute("height", image.height);
                          }
                          var g = temp.getContext("2d");
                          var b = (1 - Math.max(0, Math.min(1, brightness)));
                          g.fillStyle = "black";
                          g.fillRect(0, 0, temp.width, temp.height);
                          g.globalCompositeOperation = "destination-atop";
                          g.drawImage(image, 0, 0);
                          context.drawImage(image, x, y);
                          context.save();
                          context.globalAlpha = b;
                          context.drawImage(temp, x, y);
                          context.restore();
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Toyger"] = PS["Graphics.Toyger"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.withImage = function (src) {
    return function(f) {
          return function () {
              var img = new Image();
              img.src = src;
              img.addEventListener("load", function() {
                  f(img)();
              }, false);

              return {};
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImageScale = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function(dWidth) {
                      return function(dHeight) {
                          return function() {
                              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                              return ctx;
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return v;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["drawImage"] = $foreign.drawImage;
  exports["drawImageScale"] = $foreign.drawImageScale;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["rotate"] = $foreign.rotate;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
  exports["withImage"] = $foreign.withImage;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Graphics.Toyger"];
  var Prelude = PS["Prelude"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];        
  var loadImage = function (path) {
      return Control_Monad_Aff.makeAff(function (v) {
          return function (resolve) {
              return Graphics_Canvas.withImage(path)(resolve);
          };
      });
  };
  var getKey = function (key) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._getKey(key));
  };
  var getCanvas = function (id) {
      return Control_Monad_Aff.makeAff(function (reject) {
          return function (resolve) {
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Canvas.getCanvasElementById(id))(Data_Maybe.maybe(Data_Function.apply(reject)(Control_Monad_Eff_Exception.error("canvas not found")))(resolve));
          };
      });
  };
  exports["getCanvas"] = getCanvas;
  exports["getKey"] = getKey;
  exports["loadImage"] = loadImage;
  exports["drawImageWithBrightness"] = $foreign.drawImageWithBrightness;
  exports["gameloop"] = $foreign.gameloop;
  exports["now"] = $foreign.now;
})(PS["Graphics.Toyger"] = PS["Graphics.Toyger"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Either = PS["Data.Either"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var zeroVector = {
      x: 0.0, 
      y: 0.0
  };
  var vector = function (x) {
      return function (y) {
          return {
              x: x, 
              y: y
          };
      };
  };
  var translationMatrix = function (v) {
      return {
          m11: 1.0, 
          m12: 0.0, 
          m21: 0.0, 
          m22: 1.0, 
          m31: v.x, 
          m32: v.y
      };
  };
  var subv = function (v) {
      return function (v1) {
          return {
              x: v.x - v1.x, 
              y: v.y - v1.y
          };
      };
  };
  var semiring_Matrix = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return {
              m11: v.m11 + v1.m11, 
              m12: v.m12 + v1.m12, 
              m21: v.m21 + v1.m21, 
              m22: v.m22 + v1.m22, 
              m31: v.m31 + v1.m31, 
              m32: v.m32 + v1.m32
          };
      };
  }, function (v) {
      return function (v1) {
          return {
              m11: v.m11 * v1.m11 + v.m21 * v1.m12, 
              m12: v.m12 * v1.m11 + v.m22 * v1.m12, 
              m21: v.m11 * v1.m21 + v.m21 * v1.m22, 
              m22: v.m12 * v1.m21 + v.m22 * v1.m22, 
              m31: v.m11 * v1.m31 + v.m21 * v1.m32 + v.m31, 
              m32: v.m12 * v1.m31 + v.m22 * v1.m32 + v.m32
          };
      };
  }, {
      m11: 1.0, 
      m12: 0.0, 
      m21: 0.0, 
      m22: 1.0, 
      m31: 0.0, 
      m32: 0.0
  }, {
      m11: 0.0, 
      m12: 0.0, 
      m21: 0.0, 
      m22: 0.0, 
      m31: 0.0, 
      m32: 0.0
  });
  var scalev = function (t) {
      return function (v) {
          return {
              x: v.x * t, 
              y: v.y * t
          };
      };
  };
  var scaleMatrix = function (v) {
      return {
          m11: v.x, 
          m12: 0.0, 
          m21: 0.0, 
          m22: v.y, 
          m31: 0.0, 
          m32: 0.0
      };
  };
  var runVector = function (v) {
      return v;
  };
  var runMatrix = function (v) {
      return v;
  };
  var rotationMatrix = function (t) {
      return {
          m11: $$Math.cos(t), 
          m12: $$Math.sin(t), 
          m21: -$$Math.sin(t), 
          m22: $$Math.cos(t), 
          m31: 0.0, 
          m32: 0.0
      };
  };
  var mulv = function (v) {
      return function (v1) {
          return {
              x: v.m11 * v1.x + v.m21 * v1.y + v.m31, 
              y: v.m12 * v1.x + v.m22 * v1.y + v.m32
          };
      };
  };
  var applyv = function (f) {
      return function (v) {
          return f(v.x)(v.y);
      };
  };
  var addv = function (v) {
      return function (v1) {
          return {
              x: v.x + v1.x, 
              y: v.y + v1.y
          };
      };
  };
  var absv = function (v) {
      return $$Math.sqrt(v.x * v.x + v.y * v.y);
  };
  var normalize = function (v) {
      if (v.x === 0.0 && v.y === 0.0) {
          return v;
      };
      if (Data_Boolean.otherwise) {
          var t = 1.0 / absv(v);
          return {
              x: v.x * t, 
              y: v.y * t
          };
      };
      throw new Error("Failed pattern match at Graphics.Toyger.Matrix line 57, column 1 - line 58, column 102: " + [ v.constructor.name ]);
  };
  exports["absv"] = absv;
  exports["addv"] = addv;
  exports["applyv"] = applyv;
  exports["mulv"] = mulv;
  exports["normalize"] = normalize;
  exports["rotationMatrix"] = rotationMatrix;
  exports["runMatrix"] = runMatrix;
  exports["runVector"] = runVector;
  exports["scaleMatrix"] = scaleMatrix;
  exports["scalev"] = scalev;
  exports["subv"] = subv;
  exports["translationMatrix"] = translationMatrix;
  exports["vector"] = vector;
  exports["zeroVector"] = zeroVector;
  exports["semiring_Matrix"] = semiring_Matrix;
})(PS["Graphics.Toyger.Matrix"] = PS["Graphics.Toyger.Matrix"] || {});
(function(exports) {exports._onceAff = function(reject){
      return function(resolve){
          return function(reference){
              return function(){
                  reference.once("value", function(snapshot){
                      resolve(snapshot)();
                  }).catch(function(err){
                      reject(err)();
                  });
              }
          }
      }
  }
})(PS["Web.Firebase.Aff"] = PS["Web.Firebase.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Web.Firebase.Aff"];
  var Web_Firebase = PS["Web.Firebase"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];        
  var onceAff = function (reference) {
      return Control_Monad_Aff.makeAff(function (reject) {
          return function (resolve) {
              return $foreign._onceAff(reject)(resolve)(reference);
          };
      });
  };
  exports["onceAff"] = onceAff;
})(PS["Web.Firebase.Aff"] = PS["Web.Firebase.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_StrMap = PS["Data.StrMap"];
  var DOM = PS["DOM"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Toyger_Matrix = PS["Graphics.Toyger.Matrix"];
  var Web_Firebase = PS["Web.Firebase"];        
  var Title = (function () {
      function Title() {

      };
      Title.value = new Title();
      return Title;
  })();
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Playing = (function () {
      function Playing(value0) {
          this.value0 = value0;
      };
      Playing.create = function (value0) {
          return new Playing(value0);
      };
      return Playing;
  })();
  exports["Title"] = Title;
  exports["Loading"] = Loading;
  exports["Playing"] = Playing;
})(PS["Game.Zombie.Types"] = PS["Game.Zombie.Types"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Int = PS["Data.Int"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Graphics_Toyger = PS["Graphics.Toyger"];
  var Graphics_Toyger_Matrix = PS["Graphics.Toyger.Matrix"];
  var Game_Zombie_Constants = PS["Game.Zombie.Constants"];
  var Game_Zombie_Types = PS["Game.Zombie.Types"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var initializeRenderer = Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("grass.png"))(function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("cray.png"))(function (v1) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("shadow.png"))(function (v2) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("figure_stand_front.png"))(function (v3) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("stand1_front05_man.png"))(function (v4) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("fantasy_zombie.png"))(function (v5) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("tree_simple2.png"))(function (v6) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("wall.png"))(function (v7) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.loadImage("title.png"))(function (v8) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Toyger.getCanvas("canvas"))(function (v9) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Function.apply(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff))(Graphics_Canvas.getContext2D(v9)))(function (v10) {
                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(function (scene) {
                                                  return function (count) {
                                                      if (scene instanceof Game_Zombie_Types.Title) {
                                                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.drawImage(v10)(v8)(0.0)(0.0));
                                                      };
                                                      if (scene instanceof Game_Zombie_Types.Loading) {
                                                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                              Graphics_Canvas.setFillStyle("black")(v10)();
                                                              Graphics_Canvas.fillRect(v10)(Game_Zombie_Constants.screenBounds)();
                                                              Graphics_Canvas.setFont("20px serif")(v10)();
                                                              Graphics_Canvas.setFillStyle("white")(v10)();
                                                              Graphics_Canvas.fillText(v10)("Now loading...")(30.0)(30.0)();
                                                              return Graphics_Canvas.withContext(v10)(function __do() {
                                                                  Graphics_Canvas.translate({
                                                                      translateX: 100.0, 
                                                                      translateY: 100.0
                                                                  })(v10)();
                                                                  Graphics_Canvas.rotate(Data_Int.toNumber(count) * 1.0e-2)(v10)();
                                                                  return Graphics_Canvas.drawImage(v10)(v5)(-20.0)(-20.0)();
                                                              })();
                                                          });
                                                      };
                                                      if (scene instanceof Game_Zombie_Types.Playing) {
                                                          return Data_Function.apply(Graphics_Canvas.withContext(v10))(Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                              Graphics_Canvas.setFillStyle("black")(v10)();
                                                              Graphics_Canvas.fillRect(v10)(Game_Zombie_Constants.screenBounds)();
                                                              Graphics_Canvas.translate({
                                                                  translateX: Game_Zombie_Constants.screenBounds.w * 0.5, 
                                                                  translateY: Game_Zombie_Constants.screenBounds.h * 0.5
                                                              })(v10)();
                                                              var scale = Game_Zombie_Constants.defaultScaleFactor * Game_Zombie_Constants.defaultScaleFactor;
                                                              var s = Graphics_Toyger_Matrix.scaleMatrix(Graphics_Toyger_Matrix.vector(scale)(scale * scene.value0.pitch));
                                                              var r = Graphics_Toyger_Matrix.rotationMatrix(scene.value0.rotation);
                                                              var t = Graphics_Toyger_Matrix.translationMatrix(Graphics_Toyger_Matrix.scalev(-1.0)(scene.value0.player.position));
                                                              var m = Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(s)(r))(t);
                                                              var targetObjects = Data_Function.apply(Data_List.filter(function (v11) {
                                                                  return v11.value1.status === "active";
                                                              }))(Data_Function.apply(Data_StrMap.toList)(Data_StrMap.insert(scene.value0.userID)(scene.value0.player)(scene.value0.objects)));
                                                              var withPosition = Data_Functor.map(Data_List.functorList)(function (v11) {
                                                                  return new Data_Tuple.Tuple(Graphics_Toyger_Matrix.mulv(m)(v11.value1.position), new Data_Tuple.Tuple(v11.value0, v11.value1));
                                                              })(targetObjects);
                                                              var sorted = Data_List.sortBy(function (v11) {
                                                                  return function (v12) {
                                                                      return Data_Ord.compare(Data_Ord.ordNumber)((Graphics_Toyger_Matrix.runVector(v11.value0)).y)((Graphics_Toyger_Matrix.runVector(v12.value0)).y);
                                                                  };
                                                              })(withPosition);
                                                              Graphics_Canvas.withContext(v10)(function __do() {
                                                                  Graphics_Canvas.transform(Graphics_Toyger_Matrix.runMatrix(m))(v10)();
                                                                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(Data_List.range(0)(Game_Zombie_Constants.chunkSize - 1))(function (y) {
                                                                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(Data_List.range(0)(Game_Zombie_Constants.chunkSize - 1))(function (x) {
                                                                          var $49 = Data_StrMap.lookup(Data_Show.show(Data_Show.showInt)((Game_Zombie_Constants.chunkSize * y | 0) + x | 0))(scene.value0.geometry);
                                                                          if ($49 instanceof Data_Maybe.Nothing) {
                                                                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                                          };
                                                                          if ($49 instanceof Data_Maybe.Just) {
                                                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                                                                  var center = Graphics_Toyger_Matrix.vector(Data_Int.toNumber(x) + 0.5)(Data_Int.toNumber(y) + 0.5);
                                                                                  var range = Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(center)(scene.value0.player.position));
                                                                                  var alpha = Data_Function.apply($$Math.min(1.0))(Data_Function.apply($$Math.max(0.0))(1.0 - range / 10.0));
                                                                                  var img = (function () {
                                                                                      if ($49.value0.type === "grass") {
                                                                                          return v;
                                                                                      };
                                                                                      if ($49.value0.type === "cray") {
                                                                                          return v1;
                                                                                      };
                                                                                      return v;
                                                                                  })();
                                                                                  return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(alpha !== 0.0)(function __do() {
                                                                                      Graphics_Canvas.setGlobalAlpha(v10)(alpha)();
                                                                                      Graphics_Canvas.drawImageScale(v10)(img)(Data_Int.toNumber(x))(Data_Int.toNumber(y))(1.0)(1.0)();
                                                                                      return Data_Unit.unit;
                                                                                  });
                                                                              })());
                                                                          };
                                                                          throw new Error("Failed pattern match at Game.Zombie.Render line 84, column 29 - line 98, column 50: " + [ $49.constructor.name ]);
                                                                      });
                                                                  })();
                                                                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(targetObjects)(function (v11) {
                                                                      return Graphics_Toyger_Matrix.applyv(Graphics_Canvas.drawImageScale(v10)(v2))(Graphics_Toyger_Matrix.subv(v11.value1.position)(Graphics_Toyger_Matrix.vector(0.5)(0.5)))(1.0)(1.0);
                                                                  })();
                                                              })();
                                                              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(sorted)(function (v11) {
                                                                  var range = Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(v11.value1.value1.position)(scene.value0.player.position));
                                                                  var alpha = Data_Function.apply($$Math.min(1.0))(Data_Function.apply($$Math.max(0.0))(1.0 - range / 10.0));
                                                                  return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(alpha !== 0.0)(Graphics_Canvas.withContext(v10)((function () {
                                                                      if (v11.value1.value1.type === "zombie") {
                                                                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                                              Graphics_Canvas.translate(Graphics_Toyger_Matrix.applyv(function (v12) {
                                                                                  return function (v13) {
                                                                                      return {
                                                                                          translateX: v12, 
                                                                                          translateY: v13
                                                                                      };
                                                                                  };
                                                                              })(v11.value0))(v10)();
                                                                              return Graphics_Toyger.drawImageWithBrightness(v10)(v5)(-25.0)(-64.0)(alpha)();
                                                                          });
                                                                      };
                                                                      if (v11.value1.value1.type === "player") {
                                                                          if (v11.value1.value0 === scene.value0.userID) {
                                                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                                                  Graphics_Canvas.translate(Graphics_Toyger_Matrix.applyv(function (v12) {
                                                                                      return function (v13) {
                                                                                          return {
                                                                                              translateX: v12, 
                                                                                              translateY: v13
                                                                                          };
                                                                                      };
                                                                                  })(Graphics_Toyger_Matrix.mulv(m)(scene.value0.player.position)))(v10)();
                                                                                  return Graphics_Canvas.drawImage(v10)(v3)(-18.0)(-64.0)();
                                                                              });
                                                                          };
                                                                          if (Data_Boolean.otherwise) {
                                                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                                                  Graphics_Canvas.translate(Graphics_Toyger_Matrix.applyv(function (v12) {
                                                                                      return function (v13) {
                                                                                          return {
                                                                                              translateX: v12, 
                                                                                              translateY: v13
                                                                                          };
                                                                                      };
                                                                                  })(v11.value0))(v10)();
                                                                                  return Graphics_Toyger.drawImageWithBrightness(v10)(v4)(-15.0)(-64.0)(alpha)();
                                                                              });
                                                                          };
                                                                      };
                                                                      if (v11.value1.value1.type === "tree") {
                                                                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                                              Graphics_Canvas.translate(Graphics_Toyger_Matrix.applyv(function (v12) {
                                                                                  return function (v13) {
                                                                                      return {
                                                                                          translateX: v12, 
                                                                                          translateY: v13
                                                                                      };
                                                                                  };
                                                                              })(v11.value0))(v10)();
                                                                              return Graphics_Toyger.drawImageWithBrightness(v10)(v6)(-25.0)(-80.0)(alpha)();
                                                                          });
                                                                      };
                                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                                  })()));
                                                              })();
                                                          }));
                                                      };
                                                      throw new Error("Failed pattern match at Game.Zombie.Render line 40, column 26 - line 126, column 39: " + [ scene.constructor.name ]);
                                                  };
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  exports["initializeRenderer"] = initializeRenderer;
})(PS["Game.Zombie.Render"] = PS["Game.Zombie.Render"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_StrMap = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var $$Math = PS["Math"];
  var Graphics_Toyger = PS["Graphics.Toyger"];
  var Graphics_Toyger_Matrix = PS["Graphics.Toyger.Matrix"];
  var Web_Firebase = PS["Web.Firebase"];
  var Web_Firebase_Aff = PS["Web.Firebase.Aff"];
  var Game_Zombie_Constants = PS["Game.Zombie.Constants"];
  var Game_Zombie_Types = PS["Game.Zombie.Types"];
  var Game_Zombie_Render = PS["Game.Zombie.Render"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];        
  var update = function (firebase) {
      return function (stateRef) {
          var read = Control_Monad_Eff_Ref.readRef(stateRef);
          var write = function (v) {
              return function __do() {
                  Control_Monad_Eff_Ref.writeRef(stateRef)(v)();
                  return Data_Unit.unit;
              };
          };
          return function __do() {
              var v = read();
              if (v instanceof Game_Zombie_Types.Title) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v1 = Graphics_Toyger.getKey(90)();
                      return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(v1)(new Data_Maybe.Just(0)))(function __do() {
                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.auth(firebase))(Web_Firebase.signInAnonymously)();
                          return write(Game_Zombie_Types.Loading.value)();
                      })();
                  })();
              };
              if (v instanceof Game_Zombie_Types.Loading) {
                  return Data_Unit.unit;
              };
              if (v instanceof Game_Zombie_Types.Playing) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v1 = Graphics_Toyger.getKey(90)();
                      if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.database(firebase))(Web_Firebase.ref("objects")))(Web_Firebase.child(v.value0.userID)))(Web_Firebase.child("status")))(Web_Firebase.onDisconnect))(Web_Firebase.set(Data_Foreign.toForeign("offline")))();
                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.auth(firebase))(Web_Firebase.signOut)();
                          return write(Game_Zombie_Types.Title.value)();
                      };
                      var zeroOrOne = function (key) {
                          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.maybe(0.0)(Data_Function["const"](1.0)))(Graphics_Toyger.getKey(key));
                      };
                      var v2 = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Ring.sub(Data_Ring.ringNumber))(zeroOrOne(68)))(zeroOrOne(65))();
                      var v3 = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Ring.sub(Data_Ring.ringNumber))(zeroOrOne(83)))(zeroOrOne(87))();
                      var v4 = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Ring.sub(Data_Ring.ringNumber))(zeroOrOne(39)))(zeroOrOne(37))();
                      var v5 = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Ring.sub(Data_Ring.ringNumber))(zeroOrOne(40)))(zeroOrOne(38))();
                      var rotation = v.value0.rotation + v2 * 2.0e-2;
                      var move = Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationMatrix(-rotation))(Graphics_Toyger_Matrix.scalev(4.0e-2)(Graphics_Toyger_Matrix.normalize(Graphics_Toyger_Matrix.vector(v4)(v5))));
                      var state = (function () {
                          var $34 = {};
                          for (var $35 in v.value0) {
                              if (v.value0.hasOwnProperty($35)) {
                                  $34[$35] = v.value0[$35];
                              };
                          };
                          $34.rotation = rotation;
                          $34.pitch = Data_Function.apply($$Math.max(0.3))(Data_Function.apply($$Math.min(0.9))(v.value0.pitch - v3 * 1.0e-2));
                          $34.player = (function () {
                              var $31 = {};
                              for (var $32 in v.value0.player) {
                                  if (v.value0.player.hasOwnProperty($32)) {
                                      $31[$32] = v.value0.player[$32];
                                  };
                              };
                              $31.position = Graphics_Toyger_Matrix.addv(v.value0.player.position)(move);
                              return $31;
                          })();
                          return $34;
                      })();
                      var v6 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(Data_StrMap.toList(state.objects))(function (v6) {
                          if (v6.value1.type === "zombie") {
                              var delta = Graphics_Toyger_Matrix.subv(state.player.position)(v6.value1.position);
                              var $39 = 0.5 < Graphics_Toyger_Matrix.absv(delta) && Graphics_Toyger_Matrix.absv(delta) < 3.0;
                              if ($39) {
                                  var p = Graphics_Toyger_Matrix.addv(v6.value1.position)(Graphics_Toyger_Matrix.scalev(4.0e-3)(Graphics_Toyger_Matrix.normalize(delta)));
                                  return function __do() {
                                      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.database(firebase))(Web_Firebase.ref("/objects")))(Web_Firebase.child(v6.value0)))(Web_Firebase.child("position")))(Web_Firebase.set(Data_Foreign.toForeign(p)))();
                                      return new Data_Tuple.Tuple(v6.value0, (function () {
                                          var $40 = {};
                                          for (var $41 in v6.value1) {
                                              if (v6.value1.hasOwnProperty($41)) {
                                                  $40[$41] = v6.value1[$41];
                                              };
                                          };
                                          $40.position = p;
                                          return $40;
                                      })());
                                  };
                              };
                              if (!$39) {
                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple(v6.value0, v6.value1));
                              };
                              throw new Error("Failed pattern match at Game.Zombie.Main line 75, column 29 - line 80, column 58: " + [ $39.constructor.name ]);
                          };
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Data_Tuple.Tuple(v6.value0, v6.value1));
                      })();
                      Data_Function.apply(write)(new Game_Zombie_Types.Playing((function () {
                          var $46 = {};
                          for (var $47 in state) {
                              if (state.hasOwnProperty($47)) {
                                  $46[$47] = state[$47];
                              };
                          };
                          $46.objects = Data_StrMap.fromFoldable(Data_List.foldableList)(v6);
                          return $46;
                      })()))();
                      return Data_Function.apply(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v4 !== 0.0 || v5 !== 0.0))(Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.database(firebase))(Web_Firebase.ref("/objects")))(Web_Firebase.child(state.userID)))(Web_Firebase.set(Data_Foreign.toForeign(state.player)))))();
                  })();
              };
              throw new Error("Failed pattern match at Game.Zombie.Main line 34, column 5 - line 91, column 117: " + [ v.constructor.name ]);
          };
      };
  };
  var zombie = Data_Function.apply(Data_Functor["void"](Control_Monad_Eff.functorEff))(Control_Monad_Aff.launchAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Zombie_Render.initializeRenderer)(function (v) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
          var v1 = Web_Firebase.initializeApp(Game_Zombie_Constants.firebaseAPIKey)();
          var v2 = Control_Monad_Eff_Ref.newRef(Game_Zombie_Types.Loading.value)();
          Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.auth(v1))(Web_Firebase.onAuthStateChanged(function (scene) {
              return function __do() {
                  var v3 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.database(v1))(Web_Firebase.ref("/geometry"))();
                  var v4 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.database(v1))(Web_Firebase.ref("/objects"))();
                  var getUserRef = function (name) {
                      return Data_Function.applyFlipped(v4)(Web_Firebase.child(name));
                  };
                  var read = Control_Monad_Eff_Ref.readRef(v2);
                  var write = Control_Monad_Eff_Ref.writeRef(v2);
                  if (scene instanceof Data_Maybe.Nothing) {
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                          write(Game_Zombie_Types.Title.value)();
                          Data_Function.applyFlipped(v4)(Web_Firebase.off)();
                          return Data_Function.applyFlipped(v3)(Web_Firebase.off)();
                      })();
                  };
                  if (scene instanceof Data_Maybe.Just) {
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                          Control_Monad_Eff_Console.log("signed-in anonymously to firebase, your user id is " + Web_Firebase.uid(scene.value0))();
                          var v5 = getUserRef(Web_Firebase.uid(scene.value0))();
                          return Control_Monad_Aff.runAff(Control_Monad_Eff_Console.logShow(Control_Monad_Eff_Exception.showError))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Control_Bind.bind(Control_Monad_Aff.bindAff)(Web_Firebase_Aff.onceAff(v3))(function (v6) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Web_Firebase_Aff.onceAff(v4))(function (v7) {
                                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)((function () {
                                      var objects = Data_Function.apply(Data_Foreign.unsafeFromForeign)(Web_Firebase.val(v7));
                                      return function __do() {
                                          var v8 = (function () {
                                              var $59 = Data_StrMap.lookup(Web_Firebase.uid(scene.value0))(objects);
                                              if ($59 instanceof Data_Maybe.Nothing) {
                                                  var p = {
                                                      type: "player", 
                                                      position: Graphics_Toyger_Matrix.zeroVector, 
                                                      status: "active"
                                                  };
                                                  return function __do() {
                                                      Web_Firebase.set(Data_Foreign.toForeign(p))(v5)();
                                                      return p;
                                                  };
                                              };
                                              if ($59 instanceof Data_Maybe.Just) {
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                                                      var $60 = {};
                                                      for (var $61 in $59.value0) {
                                                          if ($59.value0.hasOwnProperty($61)) {
                                                              $60[$61] = $59.value0[$61];
                                                          };
                                                      };
                                                      $60.status = "active";
                                                      return $60;
                                                  })());
                                              };
                                              throw new Error("Failed pattern match at Game.Zombie.Main line 129, column 39 - line 134, column 71: " + [ $59.constructor.name ]);
                                          })()();
                                          Data_Function.apply(write)(new Game_Zombie_Types.Playing({
                                              userID: Web_Firebase.uid(scene.value0), 
                                              rotation: Game_Zombie_Constants.defaultRotation, 
                                              pitch: 0.6, 
                                              player: v8, 
                                              geometry: Data_Function.apply(Data_Foreign.unsafeFromForeign)(Web_Firebase.val(v6)), 
                                              objects: Data_Function.apply(Data_Foreign.unsafeFromForeign)(Web_Firebase.val(v7))
                                          }))();
                                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Web_Firebase.child("status")(v5))(Web_Firebase.onDisconnect))(Web_Firebase.set(Data_Foreign.toForeign("offline")))();
                                          var onValueTo = function (path) {
                                              return function (f) {
                                                  return Data_Function.applyFlipped(path)(Web_Firebase.onValue(function (snap) {
                                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                          var v9 = read();
                                                          if (v9 instanceof Game_Zombie_Types.Playing) {
                                                              return Data_Function.apply(Data_Functor["void"](Control_Monad_Eff.functorEff))(Data_Function.apply(write)(Data_Function.apply(Game_Zombie_Types.Playing.create)(f(Web_Firebase.val(snap))(v9.value0))))();
                                                          };
                                                          return Data_Unit.unit;
                                                      });
                                                  }));
                                              };
                                          };
                                          onValueTo(v3)(function (v9) {
                                              return function (v10) {
                                                  var $67 = {};
                                                  for (var $68 in v10) {
                                                      if (v10.hasOwnProperty($68)) {
                                                          $67[$68] = v10[$68];
                                                      };
                                                  };
                                                  $67.geometry = Data_Foreign.unsafeFromForeign(v9);
                                                  return $67;
                                              };
                                          })();
                                          onValueTo(v4)(function (v9) {
                                              return function (v10) {
                                                  var $70 = {};
                                                  for (var $71 in v10) {
                                                      if (v10.hasOwnProperty($71)) {
                                                          $70[$71] = v10[$71];
                                                      };
                                                  };
                                                  $70.objects = Data_Foreign.unsafeFromForeign(v9);
                                                  return $70;
                                              };
                                          })();
                                          return Data_Unit.unit;
                                      };
                                  })());
                              });
                          }))();
                      })();
                  };
                  throw new Error("Failed pattern match at Game.Zombie.Main line 111, column 13 - line 155, column 38: " + [ scene.constructor.name ]);
              };
          }))();
          return Graphics_Toyger.gameloop(function __do() {
              update(v1)(v2)();
              var v3 = Graphics_Toyger.now();
              var v4 = Control_Monad_Eff_Ref.readRef(v2)();
              return v(v4)(v3)();
          })();
      });
  })));
  exports["zombie"] = zombie;
})(PS["Game.Zombie.Main"] = PS["Game.Zombie.Main"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Game_Zombie_Main = PS["Game.Zombie.Main"];
  var Game_Zombie_Types = PS["Game.Zombie.Types"];        
  var main = Game_Zombie_Main.zombie;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
