// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                     
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["fromJust"] = fromJust;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };                         

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["pi"] = $foreign.pi;
  exports["remainder"] = $foreign.remainder;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 68, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();                                                                                                 
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($143) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($143));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 68, column 3 - line 71, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 64, column 3 - line 67, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 335, column 1 - line 338, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["length"] = length;
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List_Types.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Inject = PS["Data.Inject"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var $21 = Data_CatList.uncons(v.value1);
              if ($21 instanceof Data_Maybe.Nothing) {
                  return new Return(Unsafe_Coerce.unsafeCoerce(v.value0.value0));
              };
              if ($21 instanceof Data_Maybe.Just) {
                  var __tco_v = Unsafe_Coerce.unsafeCoerce(concatF(runExpF($21.value0.value0)(v.value0.value0))($21.value0.value1));
                  v = __tco_v;
                  continue tco;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 173, column 7 - line 177, column 64: " + [ $21.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              return new Bind(v.value0.value0, function (a) {
                  return Unsafe_Coerce.unsafeCoerce(concatF(v.value0.value1(a))(v.value1));
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 171, column 3 - line 179, column 56: " + [ v.value0.constructor.name ]);
      };
  };
  var runFree = function (dictFunctor) {
      return function (k) {
          var go = function (__copy_f) {
              var f = __copy_f;
              tco: while (true) {
                  var $34 = toView(f);
                  if ($34 instanceof Return) {
                      return $34.value0;
                  };
                  if ($34 instanceof Bind) {
                      var __tco_f = k(Data_Functor.map(dictFunctor)($34.value1)($34.value0));
                      f = __tco_f;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 134, column 10 - line 136, column 33: " + [ $34.constructor.name ]);
              };
          };
          return go;
      };
  };
  var fromView = function (f) {
      return new Free(Unsafe_Coerce.unsafeCoerce(f), Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($57) {
              return Control_Applicative.pure(freeApplicative)(k($57));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(Unsafe_Coerce.unsafeCoerce(k)));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($58) {
      return fromView(Return.create($58));
  });
  exports["runFree"] = runFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Field = PS["Data.Field"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Lazy = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];               
  var runTrampoline = Control_Monad_Free.runFree(Data_Lazy.functorLazy)(Data_Lazy.force);
  exports["runTrampoline"] = runTrampoline;
})(PS["Control.Monad.Trampoline"] = PS["Control.Monad.Trampoline"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  }; 
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  var arr = function (dictCategory) {
      return function (dictProfunctor) {
          return function (f) {
              return rmap(dictProfunctor)(f)(Control_Category.id(dictCategory));
          };
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["arr"] = arr;
  exports["dimap"] = dimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_List_Types = PS["Data.List.Types"];        
  var MealyT = function (x) {
      return x;
  };
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var Halt = (function () {
      function Halt() {

      };
      Halt.value = new Halt();
      return Halt;
  })();
  var stepMealy = function (dictMonad) {
      return function (s) {
          return function (v) {
              return Control_Bind.join(dictMonad["__superclass_Control.Bind.Bind_1"]())(Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(v)(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(s)));
          };
      };
  };
  var pureMealy = function (dictApplicative) {
      return function (f) {
          return MealyT(Control_Applicative.pure(dictApplicative)(function (s) {
              return Control_Applicative.pure(dictApplicative)(f(s));
          }));
      };
  };
  var mealy = function (dictApplicative) {
      return function (f) {
          return MealyT(Control_Applicative.pure(dictApplicative)(f));
      };
  };
  var profunctorMealy = function (dictMonad) {
      return new Data_Profunctor.Profunctor(function (l) {
          return function (r) {
              var remap = function (m) {
                  var g = function (v) {
                      if (v instanceof Emit) {
                          return new Emit(r(v.value0), remap(v.value1));
                      };
                      if (v instanceof Halt) {
                          return Halt.value;
                      };
                      throw new Error("Failed pattern match at Data.Machine.Mealy line 173, column 17 - line 173, column 54: " + [ v.constructor.name ]);
                  };
                  return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                      return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g)(stepMealy(dictMonad)(l(s))(m));
                  });
              };
              return remap;
          };
      });
  };
  var semigroupMealy = function (dictMonad) {
      return new Data_Semigroup.Semigroup(function (l) {
          return function (r) {
              return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                  var g = function (v) {
                      if (v instanceof Emit) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Emit(v.value0, Data_Semigroup.append(semigroupMealy(dictMonad))(v.value1)(r)));
                      };
                      if (v instanceof Halt) {
                          return stepMealy(dictMonad)(s)(r);
                      };
                      throw new Error("Failed pattern match at Data.Machine.Mealy line 185, column 35 - line 185, column 74: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(stepMealy(dictMonad)(s)(l))(g);
              });
          };
      });
  };
  var semigroupoidMealy = function (dictMonad) {
      return new Control_Semigroupoid.Semigroupoid(function (f) {
          return function (g) {
              var gb = function (v) {
                  if (v instanceof Halt) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Halt.value);
                  };
                  if (v instanceof Emit) {
                      var fc = function (v1) {
                          if (v1 instanceof Emit) {
                              return new Emit(v1.value0, Control_Semigroupoid.compose(semigroupoidMealy(dictMonad))(v1.value1)(v.value1));
                          };
                          if (v1 instanceof Halt) {
                              return Halt.value;
                          };
                          throw new Error("Failed pattern match at Data.Machine.Mealy line 198, column 13 - line 198, column 48: " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(fc)(stepMealy(dictMonad)(v.value0)(f));
                  };
                  throw new Error("Failed pattern match at Data.Machine.Mealy line 195, column 11 - line 195, column 30: " + [ v.constructor.name ]);
              };
              return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (b) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(stepMealy(dictMonad)(b)(g))(gb);
              });
          };
      });
  };
  var halt = function (dictApplicative) {
      return pureMealy(dictApplicative)(Data_Function["const"](Halt.value));
  };
  var take = function (dictMonad) {
      return function (n) {
          return function (m) {
              var f = function (v) {
                  if (v instanceof Halt) {
                      return Halt.value;
                  };
                  if (v instanceof Emit) {
                      return new Emit(v.value0, take(dictMonad)(n - 1)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Machine.Mealy line 84, column 41 - line 84, column 61: " + [ v.constructor.name ]);
              };
              var $110 = n <= 0;
              if ($110) {
                  return halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
              };
              if (!$110) {
                  return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                      return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(stepMealy(dictMonad)(s)(m));
                  });
              };
              throw new Error("Failed pattern match at Data.Machine.Mealy line 82, column 13 - line 83, column 54: " + [ $110.constructor.name ]);
          };
      };
  };
  var functorMealy = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              var g = function (v) {
                  if (v instanceof Emit) {
                      return new Emit(f(v.value0), Data_Functor.map(functorMealy(dictMonad))(f)(v.value1));
                  };
                  if (v instanceof Halt) {
                      return Halt.value;
                  };
                  throw new Error("Failed pattern match at Data.Machine.Mealy line 158, column 5 - line 158, column 42: " + [ v.constructor.name ]);
              };
              return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                  return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g)(stepMealy(dictMonad)(s)(m));
              });
          };
      });
  };
  var categoryMealy = function (dictMonad) {
      return new Control_Category.Category(function () {
          return semigroupoidMealy(dictMonad);
      }, pureMealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (t) {
          return new Emit(t, halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
      }));
  };
  var applyMealy = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMealy(dictMonad);
      }, function (f) {
          return function (x) {
              return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                  var ap = function (v) {
                      return function (v1) {
                          if (v instanceof Halt) {
                              return Halt.value;
                          };
                          if (v1 instanceof Halt) {
                              return Halt.value;
                          };
                          if (v instanceof Emit && v1 instanceof Emit) {
                              return new Emit(v.value0(v1.value0), Control_Apply.apply(applyMealy(dictMonad))(v.value1)(v1.value1));
                          };
                          throw new Error("Failed pattern match at Data.Machine.Mealy line 162, column 33 - line 162, column 49: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
                  return Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(ap)(stepMealy(dictMonad)(s)(f)))(stepMealy(dictMonad)(s)(x));
              });
          };
      });
  };
  var bindMealy = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMealy(dictMonad);
      }, function (m) {
          return function (f) {
              return mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                  var g = function (v) {
                      if (v instanceof Emit) {
                          var h = function (v1) {
                              if (v1 instanceof Emit) {
                                  return new Emit(v1.value0, Data_Semigroup.append(semigroupMealy(dictMonad))(v1.value1)(Control_Bind.bind(bindMealy(dictMonad))(v.value1)(f)));
                              };
                              if (v1 instanceof Halt) {
                                  return Halt.value;
                              };
                              throw new Error("Failed pattern match at Data.Machine.Mealy line 207, column 34 - line 207, column 75: " + [ v1.constructor.name ]);
                          };
                          return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(h)(stepMealy(dictMonad)(s)(f(v.value0)));
                      };
                      if (v instanceof Halt) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Halt.value);
                      };
                      throw new Error("Failed pattern match at Data.Machine.Mealy line 205, column 32 - line 208, column 54: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(stepMealy(dictMonad)(s)(m))(g);
              });
          };
      });
  };
  var applicativeMealy = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMealy(dictMonad);
      }, function (t) {
          return pureMealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
              return new Emit(t, halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
          });
      });
  };
  exports["Emit"] = Emit;
  exports["Halt"] = Halt;
  exports["halt"] = halt;
  exports["mealy"] = mealy;
  exports["pureMealy"] = pureMealy;
  exports["stepMealy"] = stepMealy;
  exports["take"] = take;
  exports["functorMealy"] = functorMealy;
  exports["applyMealy"] = applyMealy;
  exports["applicativeMealy"] = applicativeMealy;
  exports["profunctorMealy"] = profunctorMealy;
  exports["semigroupMealy"] = semigroupMealy;
  exports["semigroupoidMealy"] = semigroupoidMealy;
  exports["categoryMealy"] = categoryMealy;
  exports["bindMealy"] = bindMealy;
})(PS["Data.Machine.Mealy"] = PS["Data.Machine.Mealy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];        
  var Seed = function (x) {
      return x;
  }; 
  var seedMin = 1;
  var runSeed = function (v) {
      return v;
  };
  var lcgN = 2147483647;
  var seedMax = lcgN - 1;
  var lcgM = 48271;
  var lcgPerturb = function (d) {
      var go = function (n) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(Data_Int.fromNumber($$Math.remainder(Data_Int.toNumber(lcgM) * Data_Int.toNumber(n) + d)(Data_Int.toNumber(lcgN))));
          });
      };
      return function ($10) {
          return Seed(go(runSeed($10)));
      };
  };
  var lcgC = 0;
  var lcgNext = lcgPerturb(Data_Int.toNumber(lcgC));
  var ensureBetween = function (min) {
      return function (max) {
          return function (n) {
              var rangeSize = max - min;
              var n$prime = n % rangeSize;
              var $9 = n$prime < min;
              if ($9) {
                  return n$prime + max | 0;
              };
              if (!$9) {
                  return n$prime;
              };
              throw new Error("Failed pattern match at Test.StrongCheck.LCG line 80, column 5 - line 80, column 38: " + [ $9.constructor.name ]);
          };
      };
  };
  var mkSeed = function (x) {
      return ensureBetween(seedMin)(seedMax)(x);
  };
  var randomSeed = Data_Functor.map(Control_Monad_Eff.functorEff)(mkSeed)(Control_Monad_Eff_Random.randomInt(seedMin)(seedMax));
  exports["lcgC"] = lcgC;
  exports["lcgM"] = lcgM;
  exports["lcgN"] = lcgN;
  exports["lcgNext"] = lcgNext;
  exports["lcgPerturb"] = lcgPerturb;
  exports["mkSeed"] = mkSeed;
  exports["randomSeed"] = randomSeed;
  exports["runSeed"] = runSeed;
})(PS["Test.StrongCheck.LCG"] = PS["Test.StrongCheck.LCG"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Test.StrongCheck.Gen"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Trampoline = PS["Control.Monad.Trampoline"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Char = PS["Data.Char"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Machine_Mealy = PS["Data.Machine.Mealy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Test_StrongCheck_LCG = PS["Test.StrongCheck.LCG"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Eq = PS["Data.Eq"];
  var GenOut = function (x) {
      return x;
  };
  var GenT = function (x) {
      return x;
  };
  var updateSeedState = function (v) {
      return {
          seed: Test_StrongCheck_LCG.lcgNext(v.seed), 
          size: v.size
      };
  };
  var updateSeedGen = function (dictMonad) {
      return function (v) {
          return GenT(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(updateSeedState)(v));
      };
  };
  var unGenState = function (v) {
      return v;
  };
  var unGenOut = function (v) {
      return v;
  };
  var unGen = function (v) {
      return v;
  };
  var stateful = function (dictMonad) {
      return function (f) {
          return GenT(Control_Bind.bindFlipped(Data_Machine_Mealy.bindMealy(dictMonad))(function ($269) {
              return unGen(f($269));
          })(Data_Machine_Mealy.take(dictMonad)(1)(Control_Category.id(Data_Machine_Mealy.categoryMealy(dictMonad)))));
      };
  };
  var semigroupGenT = function (dictMonad) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(Data_Machine_Mealy.semigroupMealy(dictMonad))(v)(v1);
          };
      });
  };
  var lcgStep = function (dictMonad) {
      return GenT(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
          return {
              state: updateSeedState(s), 
              value: Test_StrongCheck_LCG.runSeed((unGenState(s)).seed)
          };
      }));
  };
  var functorGenOut = new Data_Functor.Functor(function (f) {
      return function (v) {
          return {
              state: v.state, 
              value: f(v.value)
          };
      };
  });
  var functorGenT = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return GenT(Data_Functor.map(Data_Machine_Mealy.functorMealy(dictMonad))(Data_Functor.map(functorGenOut)(f))(v));
          };
      });
  };
  var uniform = function (dictMonad) {
      return Data_Functor.map(functorGenT(dictMonad))(function (n) {
          return Data_Int.toNumber(n) / Data_Int.toNumber(Test_StrongCheck_LCG.lcgN);
      })(lcgStep(dictMonad));
  };
  var foldGen$prime = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (s) {
                  return function (v) {
                      var loop = function (st) {
                          return function (m1) {
                              return function (b2) {
                                  var g = function (v1) {
                                      if (v1 instanceof Data_Machine_Mealy.Halt) {
                                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(b2, Data_Machine_Mealy.halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]())));
                                      };
                                      if (v1 instanceof Data_Machine_Mealy.Emit) {
                                          var b$prime = f(b2)(v1.value0.value);
                                          return Data_Maybe.maybe(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(b2, v1.value1)))(loop(v1.value0.state)(v1.value1))(b$prime);
                                      };
                                      throw new Error("Failed pattern match at Test.StrongCheck.Gen line 325, column 5 - line 325, column 52: " + [ v1.constructor.name ]);
                                  };
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(g);
                              };
                          };
                      };
                      return loop(s)(v)(b);
                  };
              };
          };
      };
  };
  var extend = function (dictMonad) {
      return function (n) {
          return function (v) {
              var loop = function (i) {
                  return function (m1) {
                      return Data_Machine_Mealy.mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (st) {
                          var f = function (v1) {
                              if (v1 instanceof Data_Machine_Mealy.Emit) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Machine_Mealy.Emit(v1.value0, loop(i + 1 | 0)(v1.value1)));
                              };
                              if (v1 instanceof Data_Machine_Mealy.Halt) {
                                  var $203 = i >= n;
                                  if ($203) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Machine_Mealy.Halt.value);
                                  };
                                  if (!$203) {
                                      return Data_Machine_Mealy.stepMealy(dictMonad)(st)(loop(i)(v));
                                  };
                                  throw new Error("Failed pattern match at Test.StrongCheck.Gen line 299, column 9 - line 299, column 75: " + [ $203.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Test.StrongCheck.Gen line 297, column 7 - line 297, column 64: " + [ v1.constructor.name ]);
                          };
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(f);
                      });
                  };
              };
              return Data_Semigroup.append(semigroupGenT(dictMonad))(GenT(loop(0)(v)))(v);
          };
      };
  };
  var runGen = function (dictMonad) {
      return function (n) {
          return function (st) {
              return function (g) {
                  var f = function (v) {
                      return function (a) {
                          var $204 = Data_Array.length(v) < n;
                          if ($204) {
                              return Data_Maybe.Just.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ a ]));
                          };
                          if (!$204) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Test.StrongCheck.Gen line 494, column 11 - line 494, column 62: " + [ $204.constructor.name ]);
                      };
                  };
                  return foldGen$prime(dictMonad)(f)([  ])(st)(extend(dictMonad)(n)(g));
              };
          };
      };
  };
  var sample$prime = function (dictMonad) {
      return function (n) {
          return function (st) {
              return function (g) {
                  return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.fst)(runGen(dictMonad)(n)(st)(g));
              };
          };
      };
  };
  var decorateSeed = function (dictMonad) {
      return function (v) {
          return stateful(dictMonad)(function (sIn) {
              return GenT(Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(v)(function (v1) {
                  return Control_Applicative.pure(Data_Machine_Mealy.applicativeMealy(dictMonad))(GenOut((function () {
                      var $213 = {};
                      for (var $214 in v1) {
                          if (v1.hasOwnProperty($214)) {
                              $213[$214] = v1[$214];
                          };
                      };
                      $213.value = new Data_Tuple.Tuple((unGenState(sIn)).seed, v1.value);
                      return $213;
                  })()));
              }));
          });
      };
  };
  var applyGenOut = new Control_Apply.Apply(function () {
      return functorGenOut;
  }, function (v) {
      return function (v1) {
          return {
              state: v1.state, 
              value: v.value(v1.value)
          };
      };
  });
  var applyGenT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorGenT(dictMonad);
      }, function (f) {
          return function (x) {
              return Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(unGen(f))(function (v) {
                  return Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(unGen(updateSeedGen(dictMonad)(x)))(function (v1) {
                      return Control_Applicative.pure(Data_Machine_Mealy.applicativeMealy(dictMonad))(Control_Apply.apply(applyGenOut)(v)(v1));
                  });
              });
          };
      });
  };
  var bindGenT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyGenT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(v)(function (v1) {
                  return unGen(updateSeedGen(dictMonad)(f((unGenOut(v1)).value)));
              });
          };
      });
  };
  var applicativeGenT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyGenT(dictMonad);
      }, function (t) {
          return GenT(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
              return {
                  state: updateSeedState(s), 
                  value: t
              };
          }));
      });
  };
  exports["GenOut"] = GenOut;
  exports["GenT"] = GenT;
  exports["decorateSeed"] = decorateSeed;
  exports["extend"] = extend;
  exports["runGen"] = runGen;
  exports["sample'"] = sample$prime;
  exports["stateful"] = stateful;
  exports["unGen"] = unGen;
  exports["unGenOut"] = unGenOut;
  exports["unGenState"] = unGenState;
  exports["uniform"] = uniform;
  exports["updateSeedState"] = updateSeedState;
  exports["functorGenOut"] = functorGenOut;
  exports["applyGenOut"] = applyGenOut;
  exports["functorGenT"] = functorGenT;
  exports["applyGenT"] = applyGenT;
  exports["applicativeGenT"] = applicativeGenT;
  exports["semigroupGenT"] = semigroupGenT;
  exports["bindGenT"] = bindGenT;
})(PS["Test.StrongCheck.Gen"] = PS["Test.StrongCheck.Gen"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Category = PS["Control.Category"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_List_Types = PS["Data.List.Types"];        
  var Arbitrary = function (arbitrary) {
      this.arbitrary = arbitrary;
  }; 
  var arbitrary = function (dict) {
      return dict.arbitrary;
  };                                                                                                                                                                                                                                                                                                                                                                                                                                                              
  var arbNumber = new Arbitrary(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad));
  var arbInt = new Arbitrary(Partial_Unsafe.unsafePartial(function (dictPartial) {
      return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v) {
          return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe.fromJust(dictPartial)(Data_Int.fromNumber($$Math.floor(Data_Int.toNumber((Data_Bounded.top(Data_Bounded.boundedInt) - Data_Bounded.bottom(Data_Bounded.boundedInt)) + Data_Bounded.bottom(Data_Bounded.boundedInt) | 0) * v))));
      });
  }));
  exports["Arbitrary"] = Arbitrary;
  exports["arbitrary"] = arbitrary;
  exports["arbNumber"] = arbNumber;
  exports["arbInt"] = arbInt;
})(PS["Test.StrongCheck.Arbitrary"] = PS["Test.StrongCheck.Arbitrary"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Either = PS["Data.Either"];
  var Control_Bind = PS["Control.Bind"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Matrix = function (x) {
      return x;
  };
  var zerov = {
      x: 0.0, 
      y: 0.0, 
      z: 0.0
  };
  var vector3 = function (x) {
      return function (y) {
          return function (z) {
              return {
                  x: x, 
                  y: y, 
                  z: z
              };
          };
      };
  };
  var translationMatrix = function (v) {
      return {
          m11: 1.0, 
          m12: 0.0, 
          m13: 0.0, 
          m14: v.x, 
          m21: 0.0, 
          m22: 1.0, 
          m23: 0.0, 
          m24: v.y, 
          m31: 0.0, 
          m32: 0.0, 
          m33: 1.0, 
          m34: v.z
      };
  };
  var subv = function (v) {
      return function (v1) {
          return {
              x: v.x - v1.x, 
              y: v.y - v1.y, 
              z: v.z - v1.z
          };
      };
  }; 
  var semiring_Matrix = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return {
              m11: v.m11 + v1.m11, 
              m12: v.m12 + v1.m12, 
              m13: v.m13 + v1.m13, 
              m14: v.m14 + v1.m14, 
              m21: v.m21 + v1.m21, 
              m22: v.m22 + v1.m22, 
              m23: v.m23 + v1.m23, 
              m24: v.m24 + v1.m24, 
              m31: v.m31 + v1.m31, 
              m32: v.m32 + v1.m32, 
              m33: v.m33 + v1.m33, 
              m34: v.m34 + v1.m34
          };
      };
  }, function (v) {
      return function (v1) {
          return {
              m11: v.m11 * v1.m11 + v.m12 * v1.m21 + v.m13 * v1.m31, 
              m12: v.m11 * v1.m12 + v.m12 * v1.m22 + v.m13 * v1.m32, 
              m13: v.m11 * v1.m13 + v.m12 * v1.m23 + v.m13 * v1.m33, 
              m14: v.m11 * v1.m14 + v.m12 * v1.m24 + v.m13 * v1.m34 + v.m14, 
              m21: v.m21 * v1.m11 + v.m22 * v1.m21 + v.m23 * v1.m31, 
              m22: v.m21 * v1.m12 + v.m22 * v1.m22 + v.m23 * v1.m32, 
              m23: v.m21 * v1.m13 + v.m22 * v1.m23 + v.m23 * v1.m33, 
              m24: v.m21 * v1.m14 + v.m22 * v1.m24 + v.m23 * v1.m34 + v.m24, 
              m31: v.m31 * v1.m11 + v.m32 * v1.m21 + v.m33 * v1.m31, 
              m32: v.m31 * v1.m12 + v.m32 * v1.m22 + v.m33 * v1.m32, 
              m33: v.m31 * v1.m13 + v.m32 * v1.m23 + v.m33 * v1.m33, 
              m34: v.m31 * v1.m14 + v.m32 * v1.m24 + v.m33 * v1.m34 + v.m34
          };
      };
  }, {
      m11: 1.0, 
      m12: 0.0, 
      m13: 0.0, 
      m14: 0.0, 
      m21: 0.0, 
      m22: 1.0, 
      m23: 0.0, 
      m24: 0.0, 
      m31: 0.0, 
      m32: 0.0, 
      m33: 1.0, 
      m34: 0.0
  }, {
      m11: 0.0, 
      m12: 0.0, 
      m13: 0.0, 
      m14: 0.0, 
      m21: 0.0, 
      m22: 0.0, 
      m23: 0.0, 
      m24: 0.0, 
      m31: 0.0, 
      m32: 0.0, 
      m33: 0.0, 
      m34: 0.0
  });
  var scalev = function (t) {
      return function (v) {
          return {
              x: v.x * t, 
              y: v.y * t, 
              z: v.z * t
          };
      };
  };
  var scaleMatrix = function (v) {
      return {
          m11: v.x, 
          m12: 0.0, 
          m13: 0.0, 
          m14: 0.0, 
          m21: 0.0, 
          m22: v.y, 
          m23: 0.0, 
          m24: 0.0, 
          m31: 0.0, 
          m32: 0.0, 
          m33: v.z, 
          m34: 0.0
      };
  };
  var rotationZMatrix = function (t) {
      return {
          m11: $$Math.cos(t), 
          m12: -$$Math.sin(t), 
          m13: 0.0, 
          m14: 0.0, 
          m21: $$Math.sin(t), 
          m22: $$Math.cos(t), 
          m23: 0.0, 
          m24: 0.0, 
          m31: 0.0, 
          m32: 0.0, 
          m33: 1.0, 
          m34: 0.0
      };
  };
  var rotationYMatrix = function (t) {
      return {
          m11: $$Math.cos(t), 
          m12: 0.0, 
          m13: $$Math.sin(t), 
          m14: 0.0, 
          m21: 0.0, 
          m22: 1.0, 
          m23: 0.0, 
          m24: 0.0, 
          m31: -$$Math.sin(t), 
          m32: 0.0, 
          m33: $$Math.cos(t), 
          m34: 0.0
      };
  };
  var rotationXMatrix = function (t) {
      return {
          m11: 1.0, 
          m12: 0.0, 
          m13: 0.0, 
          m14: 0.0, 
          m21: 0.0, 
          m22: $$Math.cos(t), 
          m23: -$$Math.sin(t), 
          m24: 0.0, 
          m31: 0.0, 
          m32: $$Math.sin(t), 
          m33: $$Math.cos(t), 
          m34: 0.0
      };
  };
  var negatev = function (v) {
      return scalev(-1.0)(v);
  };
  var mulv = function (v) {
      return function (v1) {
          return {
              x: v.m11 * v1.x + v.m12 * v1.y + v.m13 * v1.z + v.m14, 
              y: v.m21 * v1.x + v.m22 * v1.y + v.m23 * v1.z + v.m24, 
              z: v.m31 * v1.x + v.m32 * v1.y + v.m33 * v1.z + v.m34
          };
      };
  };
  var eq_Vector = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.x === v1.x && (v.y === v1.y && v.z === v1.z);
      };
  });
  var eq_Show = new Data_Show.Show(function (v) {
      return "(" + (Data_Show.show(Data_Show.showNumber)(v.x) + (", " + (Data_Show.show(Data_Show.showNumber)(v.y) + (", " + (Data_Show.show(Data_Show.showNumber)(v.z) + ")")))));
  });
  var eq_Matrix = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.m11 === v1.m11 && (v.m12 === v1.m12 && (v.m13 === v1.m13 && (v.m14 === v1.m14 && (v.m21 === v1.m21 && (v.m22 === v1.m22 && (v.m23 === v1.m23 && (v.m24 === v1.m24 && (v.m31 === v1.m31 && (v.m32 === v1.m32 && (v.m33 === v1.m33 && v.m34 === v1.m34))))))))));
      };
  });
  var arbVector = new Test_StrongCheck_Arbitrary.Arbitrary(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(vector3)(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)));
  var arbMatrix = new Test_StrongCheck_Arbitrary.Arbitrary(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Matrix)(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      return function (v5) {
                          return function (v6) {
                              return function (v7) {
                                  return function (v8) {
                                      return function (v9) {
                                          return function (v10) {
                                              return function (v11) {
                                                  return {
                                                      m11: v, 
                                                      m12: v1, 
                                                      m13: v2, 
                                                      m14: v3, 
                                                      m21: v4, 
                                                      m22: v5, 
                                                      m23: v6, 
                                                      m24: v7, 
                                                      m31: v8, 
                                                      m32: v9, 
                                                      m33: v10, 
                                                      m34: v11
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  })(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber)))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber))));
  var addv = function (v) {
      return function (v1) {
          return {
              x: v.x + v1.x, 
              y: v.y + v1.y, 
              z: v.z + v1.z
          };
      };
  };
  var absv = function (v) {
      return $$Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
  };
  exports["Matrix"] = Matrix;
  exports["absv"] = absv;
  exports["addv"] = addv;
  exports["mulv"] = mulv;
  exports["negatev"] = negatev;
  exports["rotationXMatrix"] = rotationXMatrix;
  exports["rotationYMatrix"] = rotationYMatrix;
  exports["rotationZMatrix"] = rotationZMatrix;
  exports["scaleMatrix"] = scaleMatrix;
  exports["scalev"] = scalev;
  exports["subv"] = subv;
  exports["translationMatrix"] = translationMatrix;
  exports["vector3"] = vector3;
  exports["zerov"] = zerov;
  exports["eq_Show"] = eq_Show;
  exports["eq_Vector"] = eq_Vector;
  exports["eq_Matrix"] = eq_Matrix;
  exports["semiring_Matrix"] = semiring_Matrix;
  exports["arbVector"] = arbVector;
  exports["arbMatrix"] = arbMatrix;
})(PS["Graphics.Toyger.Matrix"] = PS["Graphics.Toyger.Matrix"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Trampoline = PS["Control.Monad.Trampoline"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Test_StrongCheck_LCG = PS["Test.StrongCheck.LCG"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];        
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var Failed = (function () {
      function Failed(value0) {
          this.value0 = value0;
      };
      Failed.create = function (value0) {
          return new Failed(value0);
      };
      return Failed;
  })();
  var Testable = function (test) {
      this.test = test;
  };
  var throwOnFirstFailure = function (dictFoldable) {
      return function (n) {
          return function (fr) {
              var throwOnFirstFailure$prime = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_List_Types.Cons && v1.value0.value1 instanceof Failed) {
                          return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Data_Show.show(Data_Show.showInt)(v) + (" (seed " + (Data_Show.show(Data_Show.showInt)(Test_StrongCheck_LCG.runSeed(v1.value0.value0)) + (") failed: \n" + v1.value0.value1.value0))))));
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          return throwOnFirstFailure(Data_List_Types.foldableList)(v + 1 | 0)(v1.value1);
                      };
                      throw new Error("Failed pattern match at Test.StrongCheck line 174, column 3 - line 174, column 41: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return throwOnFirstFailure$prime(n)(Data_List.fromFoldable(dictFoldable)(fr));
          };
      };
  };
  var testableResult = new Testable(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)));
  var testableBoolean = new Testable(function (v) {
      if (v) {
          return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Success.value);
      };
      if (!v) {
          return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(new Failed("Test returned false"));
      };
      throw new Error("Failed pattern match at Test.StrongCheck line 74, column 3 - line 74, column 27: " + [ v.constructor.name ]);
  });
  var test = function (dict) {
      return dict.test;
  };
  var testableFunction = function (dictArbitrary) {
      return function (dictTestable) {
          return new Testable(function (f) {
              return Control_Bind.bindFlipped(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(function ($81) {
                  return test(dictTestable)(f($81));
              })(Test_StrongCheck_Arbitrary.arbitrary(dictArbitrary));
          });
      };
  }; 
  var defState = function (s) {
      return {
          seed: s, 
          size: 10
      };
  };
  var quickCheckPure = function (dictTestable) {
      return function (n) {
          return function (s) {
              return function (prop) {
                  return Control_Monad_Trampoline.runTrampoline(Test_StrongCheck_Gen["sample'"](Control_Monad_Free.freeMonad)(n)(defState(s))(Test_StrongCheck_Gen.decorateSeed(Control_Monad_Free.freeMonad)(test(dictTestable)(prop))));
              };
          };
      };
  };
  var countSuccesses = function (dictFoldable) {
      return function (fa) {
          var countSuccesses$prime = function (__copy_acc) {
              return function (__copy_v) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Data_List_Types.Nil) {
                          return acc;
                      };
                      if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof Success) {
                          var __tco_acc = acc + 1 | 0;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (v instanceof Data_List_Types.Cons) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Test.StrongCheck line 179, column 1 - line 183, column 63: " + [ acc.constructor.name, v.constructor.name ]);
                  };
              };
          };
          return countSuccesses$prime(0)(Data_List.fromFoldable(dictFoldable)(fa));
      };
  };
  var check = function (dictTestable) {
      return function (dictFoldable) {
          return function (f) {
              return function (prop) {
                  var results = f(prop);
                  var successes = countSuccesses(dictFoldable)(results);
                  return function __do() {
                      Control_Monad_Eff_Console.log(Data_Show.show(Data_Show.showInt)(successes) + ("/" + (Data_Show.show(Data_Show.showInt)(Data_List.length(Data_List.fromFoldable(dictFoldable)(results))) + " test(s) passed.")))();
                      return throwOnFirstFailure(dictFoldable)(1)(results)();
                  };
              };
          };
      };
  };
  var quickCheckWithSeed = function (dictTestable) {
      return function (seed) {
          return function (n) {
              return function (prop) {
                  return check(dictTestable)(Data_Foldable.foldableArray)(quickCheckPure(dictTestable)(n)(seed))(prop);
              };
          };
      };
  };
  var quickCheck$prime = function (dictTestable) {
      return function (n) {
          return function (prop) {
              return function __do() {
                  var v = Test_StrongCheck_LCG.randomSeed();
                  return quickCheckWithSeed(dictTestable)(v)(n)(prop)();
              };
          };
      };
  };
  var quickCheck = function (dictTestable) {
      return function (prop) {
          return quickCheck$prime(dictTestable)(100)(prop);
      };
  };
  var assert = function (dictTestable) {
      return quickCheck$prime(dictTestable)(1);
  };
  var annotate = function (v) {
      if (v) {
          return Data_Function["const"](Success.value);
      };
      if (!v) {
          return Failed.create;
      };
      throw new Error("Failed pattern match at Test.StrongCheck line 192, column 1 - line 192, column 30: " + [ v.constructor.name ]);
  };
  exports["Success"] = Success;
  exports["Failed"] = Failed;
  exports["Testable"] = Testable;
  exports["annotate"] = annotate;
  exports["assert"] = assert;
  exports["quickCheck"] = quickCheck;
  exports["quickCheckPure"] = quickCheckPure;
  exports["quickCheckWithSeed"] = quickCheckWithSeed;
  exports["test"] = test;
  exports["testableBoolean"] = testableBoolean;
  exports["testableResult"] = testableResult;
  exports["testableFunction"] = testableFunction;
})(PS["Test.StrongCheck"] = PS["Test.StrongCheck"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Test_StrongCheck = PS["Test.StrongCheck"];
  var Test_StrongCheck_Arbitrary = PS["Test.StrongCheck.Arbitrary"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Test_StrongCheck_Landscape = PS["Test.StrongCheck.Landscape"];
  var Test_StrongCheck_Perturb = PS["Test.StrongCheck.Perturb"];
  var Graphics_Toyger_Matrix = PS["Graphics.Toyger.Matrix"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var main = function __do() {
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbInt)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbInt)(Test_StrongCheck.testableBoolean)))(function (x) {
          return function (y) {
              return (x + y | 0) === (y + x | 0);
          };
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbMatrix)(Test_StrongCheck.testableBoolean))(function (x) {
          return Data_Eq.eq(Graphics_Toyger_Matrix.eq_Matrix)(x)(x);
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableBoolean)))(function (s) {
          return function (t) {
              return Data_Eq.eq(Graphics_Toyger_Matrix.eq_Vector)(Graphics_Toyger_Matrix.addv(s)(t))(Graphics_Toyger_Matrix.addv(t)(s));
          };
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbMatrix)(Test_StrongCheck.testableBoolean))(function (m) {
          return Data_Eq.eq(Graphics_Toyger_Matrix.eq_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(m)(Data_Semiring.one(Graphics_Toyger_Matrix.semiring_Matrix)))(m);
      })();
      Test_StrongCheck.assert(Test_StrongCheck.testableBoolean)(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationZMatrix($$Math.pi))(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0)))(Graphics_Toyger_Matrix.vector3(-1.0)(0.0)(0.0))) < 1.0e-2)();
      Test_StrongCheck.assert(Test_StrongCheck.testableBoolean)(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationZMatrix($$Math.pi))(Graphics_Toyger_Matrix.vector3(0.0)(1.0)(0.0)))(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0))) > 1.0e-2)();
      var hpi = $$Math.pi * 0.5;
      Control_Monad_Eff_Console.logShow(Graphics_Toyger_Matrix.eq_Show)(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationXMatrix(hpi))(Graphics_Toyger_Matrix.vector3(0.0)(1.0)(0.0)))();
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationXMatrix(hpi))(Graphics_Toyger_Matrix.vector3(0.0)(1.0)(0.0)))(Graphics_Toyger_Matrix.vector3(0.0)(0.0)(1.0))) < 1.0e-2)("rotationXMatrix"))();
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationYMatrix(hpi))(Graphics_Toyger_Matrix.vector3(0.0)(0.0)(1.0)))(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0))) < 1.0e-2)("rotationYMatrix"))();
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.rotationZMatrix(hpi))(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0)))(Graphics_Toyger_Matrix.vector3(0.0)(1.0)(0.0))) < 1.0e-2)("rotationZMatrix"))();
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Graphics_Toyger_Matrix.rotationZMatrix($$Math.pi))(Graphics_Toyger_Matrix.translationMatrix(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0))))(Graphics_Toyger_Matrix.zerov))(Graphics_Toyger_Matrix.vector3(-1.0)(0.0)(0.0))) < 1.0e-2)("rot z * translate"))();
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Graphics_Toyger_Matrix.translationMatrix(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0)))(Graphics_Toyger_Matrix.rotationZMatrix($$Math.pi)))(Graphics_Toyger_Matrix.zerov))(Graphics_Toyger_Matrix.vector3(1.0)(0.0)(0.0))) < 1.0e-2)("translate * rot z"))();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableResult)))))(function (scale) {
          return function (pitch) {
              return function (rot) {
                  return function (v) {
                      return Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.subv(Graphics_Toyger_Matrix.mulv(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Graphics_Toyger_Matrix.scaleMatrix(scale))(Graphics_Toyger_Matrix.rotationXMatrix(pitch)))(Graphics_Toyger_Matrix.rotationZMatrix(rot)))(Graphics_Toyger_Matrix.translationMatrix(Graphics_Toyger_Matrix.negatev(v))))(v))(Graphics_Toyger_Matrix.zerov)) < 1.0e-2)("scale s * rot x * rot z");
                  };
              };
          };
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableResult))))(function (x) {
          return function (y) {
              return function (z) {
                  return Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.scaleMatrix(Graphics_Toyger_Matrix.vector3(x)(y)(z)))(Graphics_Toyger_Matrix.zerov)) < 1.0e-2)("scale zerov");
              };
          };
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableResult)))))(function (v) {
          return function (x) {
              return function (y) {
                  return function (z) {
                      return Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.mulv(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(Graphics_Toyger_Matrix.scaleMatrix(Graphics_Toyger_Matrix.vector3(x)(y)(z)))(Graphics_Toyger_Matrix.translationMatrix(Graphics_Toyger_Matrix.negatev(v))))(v)) < 1.0e-2)("scale v zerov");
                  };
              };
          };
      })();
      Test_StrongCheck.quickCheck(Test_StrongCheck.testableFunction(Graphics_Toyger_Matrix.arbVector)(Test_StrongCheck.testableFunction(Test_StrongCheck_Arbitrary.arbNumber)(Test_StrongCheck.testableResult)))(function (v) {
          return function (s) {
              return Test_StrongCheck.annotate(Graphics_Toyger_Matrix.absv(Graphics_Toyger_Matrix.mulv(Graphics_Toyger_Matrix.scaleMatrix(Graphics_Toyger_Matrix.vector3(s)(s)(s)))(v)) - Graphics_Toyger_Matrix.absv(v) * s < 1.0e-2)("scaleed vector length");
          };
      })();
      var a = {
          m11: 2.0, 
          m12: 3.0, 
          m13: 5.0, 
          m14: 7.0, 
          m21: 9.0, 
          m22: 11.0, 
          m23: 13.0, 
          m24: 17.0, 
          m31: 19.0, 
          m32: 23.0, 
          m33: 29.0, 
          m34: 37.0
      };
      var b = {
          m11: 1.0, 
          m12: 2.0, 
          m13: 3.0, 
          m14: 4.0, 
          m21: 5.0, 
          m22: 6.0, 
          m23: 7.0, 
          m24: 8.0, 
          m31: 9.0, 
          m32: 10.0, 
          m33: 11.0, 
          m34: 12.0
      };
      var c = {
          m11: 62.0, 
          m12: 72.0, 
          m13: 82.0, 
          m14: 99.0, 
          m21: 181.0, 
          m22: 214.0, 
          m23: 247.0, 
          m24: 297.0, 
          m31: 395.0, 
          m32: 466.0, 
          m33: 537.0, 
          m34: 645.0
      };
      var d = {
          m11: 77.0, 
          m12: 94.0, 
          m13: 118.0, 
          m14: 156.0, 
          m21: 197.0, 
          m22: 242.0, 
          m23: 306.0, 
          m24: 404.0, 
          m31: 317.0, 
          m32: 390.0, 
          m33: 494.0, 
          m34: 652.0
      };
      Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Data_Eq.eq(Graphics_Toyger_Matrix.eq_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(a)(b))(c))("a * b = c"))();
      return Test_StrongCheck.assert(Test_StrongCheck.testableResult)(Test_StrongCheck.annotate(Data_Eq.eq(Graphics_Toyger_Matrix.eq_Matrix)(Data_Semiring.mul(Graphics_Toyger_Matrix.semiring_Matrix)(b)(a))(d))("b * a = d"))();
  };
  exports["main"] = main;
})(PS["Graphics.Toyger.Test"] = PS["Graphics.Toyger.Test"] || {});
PS["Graphics.Toyger.Test"].main();