// Generated by psc-bundle 0.10.2
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  }; 
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["monadArray"] = monadArray;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["error"] = $foreign.error;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Control$dotMonad$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 52, column 1 - line 52, column 23: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
  exports["monadZeroArray"] = monadZeroArray;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $23 = compare(dictOrd)(a1)(a2);
              if ($23 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $27 = compare(dictOrd)(x)(y);
              if ($27 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($27 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($27 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ $27.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($33) {
                  return x;
              };
              if (!$33) {
                  return Data_Ring.negate(dictRing)(x);
              };
              throw new Error("Failed pattern match at Data.Ord line 158, column 9 - line 158, column 42: " + [ $33.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["abs"] = abs;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 3 - line 126, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var head = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  exports["head"] = head;
  exports["range"] = $foreign.range;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 68, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 1
  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  // jshint maxparams: 1
  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (m.hasOwnProperty(k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        ++s;
      }
    }
    return s;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["delete"] = $foreign["delete"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];        
  var values = function ($39) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(function (v) {
          return function (v1) {
              return v1;
          };
      })($39));
  };
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };                                                                                    
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableStrMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_StrMap_ST["delete"](s)(k);
      });
  };
  exports["delete"] = $$delete;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["isEmpty"] = isEmpty;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["thawST"] = thawST;
  exports["values"] = values;
  exports["foldableStrMap"] = foldableStrMap;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];
  var size = function (v) {
      return Data_Int.floor(Data_StrMap.size(v));
  };

  /**
 * traverse :: forall a b m. Applicative m => (a -> m b) -> StrMap a -> m (StrMap b)
 */  
  var lookup = function (dictShow) {
      return function (k) {
          return function (v) {
              return Data_StrMap.lookup(Data_Show.show(dictShow)(k))(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_StrMap.isEmpty(v);
  };
  var insert = function (dictShow) {
      return function (k) {
          return function (v) {
              return function (v1) {
                  return Data_StrMap.insert(Data_Show.show(dictShow)(k))(v)(v1);
              };
          };
      };
  };
  var foldable_ShowMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_StrMap.foldableStrMap)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (a) {
          return function (v) {
              return Data_Foldable.foldl(Data_StrMap.foldableStrMap)(f)(a)(v);
          };
      };
  }, function (f) {
      return function (a) {
          return function (v) {
              return Data_Foldable.foldr(Data_StrMap.foldableStrMap)(f)(a)(v);
          };
      };
  });
  var empty = Data_StrMap.empty;
  var $$delete = function (dictShow) {
      return function (k) {
          return function (v) {
              return Data_StrMap["delete"](Data_Show.show(dictShow)(k))(v);
          };
      };
  };
  exports["delete"] = $$delete;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["isEmpty"] = isEmpty;
  exports["lookup"] = lookup;
  exports["size"] = size;
  exports["foldable_ShowMap"] = foldable_ShowMap;
})(PS["Data.ShowMap"] = PS["Data.ShowMap"] || {});
(function(exports) {
  exports.onDOMContentLoaded = function(callback){
      return function(){
          window.addEventListener('DOMContentLoaded', function(){
              callback();
          });
      }
  }

  exports.querySelectorCanvas = function(selector){
      return function(){
          return document.querySelector(selector);
      }
  }
})(PS["Graphics.Babylon"] = PS["Graphics.Babylon"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  exports["onDOMContentLoaded"] = $foreign.onDOMContentLoaded;
  exports["querySelectorCanvas"] = $foreign.querySelectorCanvas;
})(PS["Graphics.Babylon"] = PS["Graphics.Babylon"] || {});
(function(exports) {exports.setCheckCollisions = function(checkCollisions){
      return function(mesh){
          return function(){
              mesh.checkCollisions = checkCollisions;
          }
      }
  }

  exports.abstractMeshToNode = function(mesh){
      return mesh;
  }

  exports.dispose = function(doNotRecurse){
      return function(mesh){
          return function(){
              mesh.dispose(doNotRecurse);
          }
      }
  }


  exports.setIsPickable = function(isPickable){
      return function(mesh){
          return function(){
              mesh.isPickable = isPickable;
          }
      }
  }

  exports.setIsVisible = function(isVisible){
      return function(mesh){
          return function(){
              mesh.isVisible = isVisible;
          }
      }
  }
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {exports.getName = function(node){
      return node.name;
  }
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Node"];
  exports["getName"] = $foreign.getName;
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {exports.createVector3 = function(x){
      return function(y){
          return function(z){
              return function(){
                  return new BABYLON.Vector3(x, y, z);
              }
          }
      }
  }

  exports.runVector3 = function(v){
      return function(){
          return { x: v.x, y: v.y, z: v.z }
      }
  }
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Vector3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createVector3"] = $foreign.createVector3;
  exports["runVector3"] = $foreign.runVector3;
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.AbstractMesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_PhysicsImpostor = PS["Graphics.Babylon.PhysicsImpostor"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["abstractMeshToNode"] = $foreign.abstractMeshToNode;
  exports["dispose"] = $foreign.dispose;
  exports["setCheckCollisions"] = $foreign.setCheckCollisions;
  exports["setIsPickable"] = $foreign.setIsPickable;
  exports["setIsVisible"] = $foreign.setIsVisible;
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {exports.getPosition = function(camera){
      return function(){
          return camera.position;
      }
  }
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Camera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["getPosition"] = $foreign.getPosition;
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {exports.createColor3 = function(r){
      return function(g){
          return function(b){
              return function(){
                  return new BABYLON.Color3(r, g, b);
              }
          }
      }
  }
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Color3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createColor3"] = $foreign.createColor3;
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {exports.createCubeTexture = function(path){
      return function(scene){
          return function(){

              // HACK
              ///BABYLON.CubeTexture.prototype.getTextureMatrix = function(){
              //    return this._textureMatrix;
              //}


              var tex = new BABYLON.CubeTexture(path, scene);



              return tex;
          }
      }
  }

  exports.cubeTextureToTexture = function(tex){
      return tex;
  }
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {exports.createTexture = function(path){
      return function(scene){
          return function(){
              return new BABYLON.Texture(path, scene);
          }
      }
  }

  exports.sKYBOX_MODE = BABYLON.Texture.SKYBOX_MODE;

  exports.setCoordinatesMode = function(value){
      return function(tex){
          return function(){
              tex.coordinatesMode = value;
          }
      }
  }
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Texture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createTexture"] = $foreign.createTexture;
  exports["sKYBOX_MODE"] = $foreign.sKYBOX_MODE;
  exports["setCoordinatesMode"] = $foreign.setCoordinatesMode;
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.CubeTexture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  exports["createCubeTexture"] = $foreign.createCubeTexture;
  exports["cubeTextureToTexture"] = $foreign.cubeTextureToTexture;
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {exports._show = function(showUI){
      return function(camera){
          return function(rootElement){
              return function(debugLayer){
                  return function(){
                      debugLayer.show(showUI, camera, rootElement);
                  }
              }
          }
      }
  }

  exports.hide = function(debugLayer){
      return function(){
          debugLayer.hide();
      }
  }
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.DebugLayer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];        
  var show = function (shoUI) {
      return function (camera) {
          return function (rootElement) {
              return function (debugLayer) {
                  return $foreign._show(shoUI)(camera)(Data_Nullable.toNullable(rootElement))(debugLayer);
              };
          };
      };
  };
  exports["show"] = show;
  exports["hide"] = $foreign.hide;
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {exports.createDirectionalLight = function(id){
      return function(direction){
          return function(scene){
              return function(){
                  return new BABYLON.DirectionalLight(id, direction, scene);
              }
          }
      }
  }


  exports.directionalLightToLight = function(light){
      return light;
  }
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {exports.setDiffuse = function(color){
      return function(light){
          return function(){
              light.diffuse = color;
          }
      }
  }
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Light"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  exports["setDiffuse"] = $foreign.setDiffuse;
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.DirectionalLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  exports["createDirectionalLight"] = $foreign.createDirectionalLight;
  exports["directionalLightToLight"] = $foreign.directionalLightToLight;
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {exports.createEngine = function(canvas){
      return function(antialias){
          return function(){
              return new BABYLON.Engine(canvas, antialias);
          }
      }
  }


  exports.runRenderLoop = function(callback){
      return function(engine){
          return function(){
              engine.runRenderLoop(callback);
          }
      }
  }
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Engine"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createEngine"] = $foreign.createEngine;
  exports["runRenderLoop"] = $foreign.runRenderLoop;
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {


  /*
exports.blockIndex = function(x){
    return function(y){
        return function(z){
            return x + "," + y + "," + z;
        }
    }
}

exports.runBlockIndex = function(bits){
    var ns = bits.split(",");
    return {
        x: parseInt(ns[0]),
        y: parseInt(ns[1]),
        z: parseInt(ns[2])
    }
}
*/  

  var _2_13 = 8192;      // 2^13
  var _2_14 = 16384;      // 2^14
  var _2_17 = 131072;     // 2^17
  var _2_32 = 4294967296; // 2^32

  exports.blockIndex = function(x){
      return function(y){
          return function(z){
              return (x + _2_17) * _2_32 + (y + _2_17) * _2_14 + (z + _2_13)
          }
      }
  }

  exports.runBlockIndex = function(bits){
      var cx = (bits / _2_32) | 0;
      var cy = ((bits - cx * _2_32) / _2_14) | 0;
      var cz = (bits - cx * _2_32 - cy * _2_14);
      var x = cx - _2_17;
      var y = cy - _2_17;
      var z = cz - _2_13;
      return { x: x, y: y, z: z }
  }
})(PS["Graphics.Babylon.Example.Sandbox.BlockIndex"] = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var show_Show = new Data_Show.Show(function (v) {
      return v;
  });
  exports["show_Show"] = show_Show;
  exports["blockIndex"] = $foreign.blockIndex;
  exports["runBlockIndex"] = $foreign.runBlockIndex;
})(PS["Graphics.Babylon.Example.Sandbox.BlockIndex"] = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Generic = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var waterBlock = 1;
  var grassBlock = 0;
  exports["grassBlock"] = grassBlock;
  exports["waterBlock"] = waterBlock;
})(PS["Graphics.Babylon.Example.Sandbox.BlockType"] = PS["Graphics.Babylon.Example.Sandbox.BlockType"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Graphics_Babylon_Example_Sandbox_BlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var show_Show = new Data_Show.Show(function (v) {
      return Data_Show.show(Graphics_Babylon_Example_Sandbox_BlockIndex.show_Show)(v);
  });
  var runChunkIndex = function (v) {
      return Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(v);
  };                                            
  var chunkIndexRange = function (v) {
      return function (v1) {
          var k = Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(v1);
          var i = Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(v);
          var dz = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.z - k.z);
          var dy = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.y - k.y);
          var dx = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.x - k.x);
          return Data_Ord.max(Data_Ord.ordInt)(dx)(Data_Ord.max(Data_Ord.ordInt)(dy)(dz));
      };
  };
  var chunkIndex = function (x) {
      return function (y) {
          return function (z) {
              return Graphics_Babylon_Example_Sandbox_BlockIndex.blockIndex(x)(y)(z);
          };
      };
  };
  exports["chunkIndex"] = chunkIndex;
  exports["chunkIndexRange"] = chunkIndexRange;
  exports["runChunkIndex"] = runChunkIndex;
  exports["show_Show"] = show_Show;
})(PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"] = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"] || {});
(function(exports) {exports.onMouseMove = function(callback){
      return function(){
          document.getElementById("renderCanvas").addEventListener("mousemove", function(e){
              callback(e)();
          });
      }
  }

  exports.onMouseClick = function(callback){
      return function(){
          document.getElementById("renderCanvas").addEventListener("click", function(e){
              callback(e)();
          });
      }
  }

  exports.onButtonClick = function(id){
      return function(callback){
          return function(){
              document.getElementById(id).addEventListener("click", function(){
                  callback();
              });
          }
      }
  }
})(PS["Graphics.Babylon.Example.Sandbox.Event"] = PS["Graphics.Babylon.Example.Sandbox.Event"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Example.Sandbox.Event"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["onButtonClick"] = $foreign.onButtonClick;
  exports["onMouseClick"] = $foreign.onMouseClick;
  exports["onMouseMove"] = $foreign.onMouseMove;
})(PS["Graphics.Babylon.Example.Sandbox.Event"] = PS["Graphics.Babylon.Example.Sandbox.Event"] || {});
(function(exports) {exports.createBlockMapJS = function(noise){
      return function(simplex2){
          return function(index){
              return function(terrainScale){
                  return function(waterBlockHeight){
                      return function(maxHeight){
                          return function(grassBlock){
                              return function(waterBlock){
                                  var runBlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"].runBlockIndex;
                                  var runChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"].runChunkIndex;
                                  var blockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"].blockIndex;
                                  var chunkSize = PS["Graphics.Babylon.Example.Sandbox.Generation"].chunkSize;

                                  var rci = runChunkIndex(index);
                                  var cx = rci.x
                                  var cy = rci.y
                                  var cz = rci.z

                                  var stmap = Object.create({});

                                  for(var lz = 0; lz <= chunkSize - 1; lz++){
                                      for(var lx = 0; lx <= chunkSize - 1; lx++){
                                          var gx = chunkSize * cx + lx
                                          var gz = chunkSize * cz + lz
                                          var x = gx
                                          var z = gz
                                          var r = (simplex2(x * terrainScale)(z * terrainScale)(noise) + 1.0) * 0.5
                                          var h = Math.max(waterBlockHeight, Math.floor(r * maxHeight))
                                          var top = Math.min(h, chunkSize * (cy + 1) - 1)
                                          var bottom = chunkSize * cy
                                          if(top < bottom){

                                          }else{
                                              for(var gy = bottom; gy <= top; gy++){
                                                  var bi = blockIndex(gx)(gy)(gz)
                                                  var blockType = gy <= waterBlockHeight ? waterBlock : grassBlock
                                                  stmap[bi] = { index: bi, blockType: blockType }
                                              }
                                          }
                                      }
                                  }

                                  return {
                                      index: index,
                                      map: stmap
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.Example.Sandbox.Generation"] = PS["Graphics.Babylon.Example.Sandbox.Generation"] || {});
(function(exports) {/*
 * A speed-improved perlin and simplex noise algorithms for 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 * Converted to Javascript by Joseph Gentle.
 *
 * Version 2012-03-09
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 *
 */  

  function Grad(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
  }

  Grad.prototype.dot2 = function(x, y) {
      return this.x * x + this.y * y;
  };

  Grad.prototype.dot3 = function(x, y, z) {
      return this.x * x + this.y * y + this.z * z;
  };

  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),
      new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),
      new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)
  ];

  var p = [151, 160, 137, 91, 90, 15,
      131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
      190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
      88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
      77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
      102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
      135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
      5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
      223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
      129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
      251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
      49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
      138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
  ];


  // Skewing and unskewing factors for 2, 3, and 4 dimensions
  var F2 = 0.5 * (Math.sqrt(3) - 1);
  var G2 = (3 - Math.sqrt(3)) / 6;

  exports.createNoise = function(seed) {
      // This isn't a very good seeding function, but it works ok. It supports 2^16
      // different seed values. Write something better if you need more seeds.

      // To remove the need for index wrapping, double the permutation table length
      var perm = new Array(512);
      var gradP = new Array(512);

      if (seed > 0 && seed < 1) {
          // Scale the seed out
          seed *= 65536;
      }

      seed = Math.floor(seed);
      if (seed < 256) {
          seed |= seed << 8;
      }

      for (var i = 0; i < 256; i++) {
          var v;
          if (i & 1) {
              v = p[i] ^ (seed & 255);
          } else {
              v = p[i] ^ ((seed >> 8) & 255);
          }

          perm[i] = perm[i + 256] = v;
          gradP[i] = gradP[i + 256] = grad3[v % 12];
      }

      return {
          perm: perm,
          gradP: gradP
      }
  }

  exports.simplex2 = function(xin) {
      return function(yin) {
          return function(noise) {
              var n0, n1, n2; // Noise contributions from the three corners
              // Skew the input space to determine which simplex cell we're in
              var s = (xin + yin) * F2; // Hairy factor for 2D
              var i = Math.floor(xin + s);
              var j = Math.floor(yin + s);
              var t = (i + j) * G2;
              var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.
              var y0 = yin - j + t;
              // For the 2D case, the simplex shape is an equilateral triangle.
              // Determine which simplex we are in.
              var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
              if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
                  i1 = 1;
                  j1 = 0;
              } else { // upper triangle, YX order: (0,0)->(0,1)->(1,1)
                  i1 = 0;
                  j1 = 1;
              }
              // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
              // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
              // c = (3-sqrt(3))/6
              var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
              var y1 = y0 - j1 + G2;
              var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
              var y2 = y0 - 1 + 2 * G2;
              // Work out the hashed gradient indices of the three simplex corners
              i &= 255;
              j &= 255;
              var gi0 = noise.gradP[i + noise.perm[j]];
              var gi1 = noise.gradP[i + i1 + noise.perm[j + j1]];
              var gi2 = noise.gradP[i + 1 + noise.perm[j + 1]];
              // Calculate the contribution from the three corners
              var t0 = 0.5 - x0 * x0 - y0 * y0;
              if (t0 < 0) {
                  n0 = 0;
              } else {
                  t0 *= t0;
                  n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient
              }
              var t1 = 0.5 - x1 * x1 - y1 * y1;
              if (t1 < 0) {
                  n1 = 0;
              } else {
                  t1 *= t1;
                  n1 = t1 * t1 * gi1.dot2(x1, y1);
              }
              var t2 = 0.5 - x2 * x2 - y2 * y2;
              if (t2 < 0) {
                  n2 = 0;
              } else {
                  t2 *= t2;
                  n2 = t2 * t2 * gi2.dot2(x2, y2);
              }
              // Add contributions from each corner to get the final noise value.
              // The result is scaled to return values in the interval [-1,1].
              return 70 * (n0 + n1 + n2);
          }
      }
  }
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["PerlinNoise"];
  exports["createNoise"] = $foreign.createNoise;
  exports["simplex2"] = $foreign.simplex2;
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Example.Sandbox.Generation"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_ShowMap = PS["Data.ShowMap"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_StrMap_ST_Unsafe = PS["Data.StrMap.ST.Unsafe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Graphics_Babylon_Example_Sandbox_Block = PS["Graphics.Babylon.Example.Sandbox.Block"];
  var Graphics_Babylon_Example_Sandbox_BlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Graphics_Babylon_Example_Sandbox_BlockType = PS["Graphics.Babylon.Example.Sandbox.BlockType"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Example_Sandbox_ChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"];
  var PerlinNoise = PS["PerlinNoise"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];        
  var waterBlockHeight = 3;
  var terrainScale = 1.0e-2;
  var maxHeight = 25;
  var createBlockMap = function (index) {
      return function (seed) {
          return $foreign.createBlockMapJS(PerlinNoise.createNoise(seed))(PerlinNoise.simplex2)(index)(terrainScale)(waterBlockHeight)(maxHeight)(Graphics_Babylon_Example_Sandbox_BlockType.grassBlock)(Graphics_Babylon_Example_Sandbox_BlockType.waterBlock);
      };
  };
  var chunkSize = 16;
  exports["chunkSize"] = chunkSize;
  exports["createBlockMap"] = createBlockMap;
  exports["maxHeight"] = maxHeight;
  exports["terrainScale"] = terrainScale;
  exports["waterBlockHeight"] = waterBlockHeight;
})(PS["Graphics.Babylon.Example.Sandbox.Generation"] = PS["Graphics.Babylon.Example.Sandbox.Generation"] || {});
(function(exports) {function vec(x, y, z){
      return { x:x, y:y, z:z }
  }

  var nxUV = [0.005, 0.505, 0.245, 0.505, 0.245, 0.745, 0.005, 0.745];
  var pxUV = [0.005, 0.505, 0.245, 0.505, 0.245, 0.745, 0.005, 0.745];
  var nyUV = [0.005, 0.505, 0.245, 0.505, 0.245, 0.745, 0.005, 0.745];
  var pyUV = [0.005, 0.755, 0.245, 0.755, 0.245, 0.995, 0.005, 0.995];
  var nzUV = [0.005, 0.745, 0.005, 0.505, 0.245, 0.505, 0.245, 0.745];
  var pzUV = [0.245, 0.505, 0.245, 0.745, 0.005, 0.745, 0.005, 0.505];

  exports.createTerrainGeometryJS = function(grassBlockValue){
      return function(waterBlockValue){
          return function(terrain){

              var runBlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"].runBlockIndex;
              var blockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"].blockIndex;

              var map = terrain.map;

              function prepareArray(){
                  return { offset: 0, indices: [], positions: [], normals: [], uvs: [] }
              }

              var grass = prepareArray()
              var water = prepareArray()

              function exists(ex, ey, ez){
                  return ! ! map[blockIndex(ex)(ey)(ez)];
              }

              Object.values(map).forEach(function(block){
                  var bi = runBlockIndex(block.index)
                  var ix = bi.x
                  var iy = bi.y
                  var iz = bi.z

                  var store = block.blockType == grassBlockValue ? grass : water;

                  function square(nix, niy, niz, u){
                      if(exists(ix + nix, iy + niy, iz + niz)){

                      }else{
                          var px = ix
                          var py = iy
                          var pz = iz

                          var nx = nix
                          var ny = niy
                          var nz = niz

                          var ax = ny
                          var ay = nz
                          var az = nx

                          var bx = ay * nz - ay * nx
                          var by = az * nx - ax * nz
                          var bz = ax * ny - ay * nx

                          var dx = nx * 0.5
                          var dy = ny * 0.5
                          var dz = nz * 0.5

                          var sx = ax * 0.5
                          var sy = ay * 0.5
                          var sz = az * 0.5

                          var tx = bx * 0.5
                          var ty = by * 0.5
                          var tz = bz * 0.5

                          var vx = px + 0.5 + dx
                          var vy = py + 0.5 + dy
                          var vz = pz + 0.5 + dz

                          var offset = store.offset

                          store.indices.push(offset + 0);
                          store.indices.push(offset + 1);
                          store.indices.push(offset + 2);
                          store.indices.push(offset + 0);
                          store.indices.push(offset + 2);
                          store.indices.push(offset + 3);

                          store.positions.push(vx - sx - tx)
                          store.positions.push(vy - sy - ty)
                          store.positions.push(vz - sz - tz)
                          store.positions.push(vx + sx - tx)
                          store.positions.push(vy + sy - ty)
                          store.positions.push(vz + sz - tz)
                          store.positions.push(vx + sx + tx)
                          store.positions.push(vy + sy + ty)
                          store.positions.push(vz + sz + tz)
                          store.positions.push(vx - sx + tx)
                          store.positions.push(vy - sy + ty)
                          store.positions.push(vz - sz + tz)

                          store.normals.push(nx);
                          store.normals.push(ny);
                          store.normals.push(nz);
                          store.normals.push(nx);
                          store.normals.push(ny);
                          store.normals.push(nz);
                          store.normals.push(nx);
                          store.normals.push(ny);
                          store.normals.push(nz);
                          store.normals.push(nx);
                          store.normals.push(ny);
                          store.normals.push(nz);

                          Array.prototype.push.apply(store.uvs, u)

                          store.offset += 4
                      }
                  }

                  square(-1,  0,  0, nxUV)
                  square( 1,  0,  0, pxUV)
                  square( 0, -1,  0, nyUV)
                  square( 0,  1,  0, pyUV)
                  square( 0,  0, -1, nzUV)
                  square( 0,  0,  1, pzUV)
              });

              return {  terrain: terrain, grassBlocks: grass, waterBlocks: water }
          }
      }
  }
})(PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"] = PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"] || {});
(function(exports) {exports.createVertexData = function(props){
      return function(){
          var v = new BABYLON.VertexData();
          v.indices = props.indices;
          v.positions = props.positions;
          v.normals = props.normals;
          v.uvs = props.uvs;
          return v;
      }
  }

  exports.applyToMesh = function(mesh){
      return function(updatable){
          return function(vertexData){
              return function(){
                  vertexData.applyToMesh(mesh, updatable);
              }
          }
      }
  }
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.VertexData"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  exports["applyToMesh"] = $foreign.applyToMesh;
  exports["createVertexData"] = $foreign.createVertexData;
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Ring = PS["Data.Ring"];
  var Data_ShowMap = PS["Data.ShowMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Example_Sandbox_Block = PS["Graphics.Babylon.Example.Sandbox.Block"];
  var Graphics_Babylon_Example_Sandbox_BlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Graphics_Babylon_Example_Sandbox_BlockType = PS["Graphics.Babylon.Example.Sandbox.BlockType"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Example_Sandbox_Vec = PS["Graphics.Babylon.Example.Sandbox.Vec"];
  var Graphics_Babylon_Example_Sandbox_VertexDataPropsData = PS["Graphics.Babylon.Example.Sandbox.VertexDataPropsData"];
  var Graphics_Babylon_VertexData = PS["Graphics.Babylon.VertexData"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var createTerrainGeometry = $foreign.createTerrainGeometryJS(Graphics_Babylon_Example_Sandbox_BlockType.grassBlock)(Graphics_Babylon_Example_Sandbox_BlockType.waterBlock);
  exports["createTerrainGeometry"] = createTerrainGeometry;
})(PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"] = PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"] || {});
(function(exports) {exports.createMesh = function(id){
      return function(scene){
          return function(){
              return new BABYLON.Mesh(id, scene);
          }
      }
  }

  exports.meshToAbstractMesh = function(mesh){
      return mesh;
  }

  exports.createBox = function(id){
      return function(size){
          return function(scene){
              return function(){
                  return BABYLON.Mesh.CreateBox(id, size, scene);
              }
          }
      }
  }

  exports.setPosition = function(position){
      return function(mesh){
          return function(){
              mesh.position = position;
          }
      }
  }

  exports.setReceiveShadows = function(receiveShadows){
      return function(mesh){
          return function(){
              mesh.receiveShadows = receiveShadows;
          }
      }
  }


  exports.setMaterial = function(mat){
      return function(mesh){
          return function(){
              mesh.material = mat;
          }
      }
  }


  exports.setInfiniteDistance = function(value){
      return function(mesh){
          return function(){
              mesh.infiniteDistance = value;
          }
      }
  }


  exports.setRenderingGroupId = function(value){
      return function(mesh){
          return function(){
              mesh.renderingGroupId = value;
          }
      }
  }

  exports.getTotalIndices = function(mesh){
      return function(){
          return mesh.getTotalIndices();
      }
  }
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {exports.setFogEnabled = function(fogEnabled){
      return function(material){
          return function(){
              material.fogEnabled = fogEnabled;
          }
      }
  }

  exports.setZOffset = function(value){
      return function(mat){
          return function(){
              mat.zOffset = value;
          }
      }
  }

  exports.setWireframe = function(value){
      return function(mat){
          return function(){
              mat.wireframe = value;
          }
      }
  }
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Material"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["setFogEnabled"] = $foreign.setFogEnabled;
  exports["setWireframe"] = $foreign.setWireframe;
  exports["setZOffset"] = $foreign.setZOffset;
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Mesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_PhysicsImpostor = PS["Graphics.Babylon.PhysicsImpostor"];
  exports["createBox"] = $foreign.createBox;
  exports["createMesh"] = $foreign.createMesh;
  exports["getTotalIndices"] = $foreign.getTotalIndices;
  exports["meshToAbstractMesh"] = $foreign.meshToAbstractMesh;
  exports["setInfiniteDistance"] = $foreign.setInfiniteDistance;
  exports["setMaterial"] = $foreign.setMaterial;
  exports["setPosition"] = $foreign.setPosition;
  exports["setReceiveShadows"] = $foreign.setReceiveShadows;
  exports["setRenderingGroupId"] = $foreign.setRenderingGroupId;
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_ShowMap = PS["Data.ShowMap"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Example_Sandbox_ChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"];
  var Graphics_Babylon_Example_Sandbox_Generation = PS["Graphics.Babylon.Example.Sandbox.Generation"];
  var Graphics_Babylon_Example_Sandbox_Vec = PS["Graphics.Babylon.Example.Sandbox.Vec"];
  var Graphics_Babylon_Example_Sandbox_BlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Graphics_Babylon_Example_Sandbox_Block = PS["Graphics.Babylon.Example.Sandbox.Block"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Prelude = PS["Prelude"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var lookupChunk = function (index) {
      return function (v) {
          return Data_ShowMap.lookup(Graphics_Babylon_Example_Sandbox_ChunkIndex.show_Show)(index)(v.map);
      };
  };
  var insertChunk = function (v) {
      return function (v1) {
          var $11 = {};
          for (var $12 in v1) {
              if (v1.hasOwnProperty($12)) {
                  $11[$12] = v1[$12];
              };
          };
          $11.map = Data_ShowMap.insert(Graphics_Babylon_Example_Sandbox_ChunkIndex.show_Show)(v.blocks.index)(v)(v1.map);
          return $11;
      };
  };
  var globalPositionToGlobalIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return Data_Int.floor(v + 1000000.0) - 1000000;
              };
              return Graphics_Babylon_Example_Sandbox_BlockIndex.blockIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var globalPositionToChunkIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return (Data_Int.floor(v + 1000000.0 * Data_Int.toNumber(Graphics_Babylon_Example_Sandbox_Generation.chunkSize)) / Graphics_Babylon_Example_Sandbox_Generation.chunkSize | 0) - 1000000;
              };
              return Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var lookupBlock = function (p) {
      return function (v) {
          var chunkIndex = globalPositionToChunkIndex(p.x)(p.y)(p.z);
          var index = globalPositionToGlobalIndex(p.x)(p.y)(p.z);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_ShowMap.lookup(Graphics_Babylon_Example_Sandbox_ChunkIndex.show_Show)(chunkIndex)(v.map))(function (v1) {
              return Data_ShowMap.lookup(Graphics_Babylon_Example_Sandbox_BlockIndex.show_Show)(index)(v1.blocks.map);
          });
      };
  };
  var globalIndexToChunkIndex = function (b) {
      var f = function (v) {
          return ((v + (1000000 * Graphics_Babylon_Example_Sandbox_Generation.chunkSize | 0) | 0) / Graphics_Babylon_Example_Sandbox_Generation.chunkSize | 0) - 1000000;
      };
      var bi = Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(b);
      return Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndex(f(bi.x))(f(bi.y))(f(bi.z));
  };
  var getChunkMap = function (v) {
      return v.map;
  };
  var emptyTerrain = {
      map: Data_ShowMap.empty
  };
  var disposeChunk = function (chunk) {
      return function __do() {
          Graphics_Babylon_AbstractMesh.dispose(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(chunk.grassBlockMesh))();
          return Graphics_Babylon_AbstractMesh.dispose(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(chunk.waterBlockMesh))();
      };
  };
  var chunkCount = function (v) {
      return Data_ShowMap.size(v.map);
  };
  exports["chunkCount"] = chunkCount;
  exports["disposeChunk"] = disposeChunk;
  exports["emptyTerrain"] = emptyTerrain;
  exports["getChunkMap"] = getChunkMap;
  exports["globalIndexToChunkIndex"] = globalIndexToChunkIndex;
  exports["globalPositionToChunkIndex"] = globalPositionToChunkIndex;
  exports["globalPositionToGlobalIndex"] = globalPositionToGlobalIndex;
  exports["insertChunk"] = insertChunk;
  exports["lookupBlock"] = lookupBlock;
  exports["lookupChunk"] = lookupChunk;
})(PS["Graphics.Babylon.Example.Sandbox.Terrain"] = PS["Graphics.Babylon.Example.Sandbox.Terrain"] || {});
(function(exports) {exports.createStandardMaterial = function(id){
      return function(scene){
          return function(){
              return new BABYLON.StandardMaterial(id, scene);
          }
      }
  }

  exports.setDiffuseTexture = function(tex){
      return function(mat){
          return function(){
              mat.diffuseTexture = tex;
          }
      }
  }

  exports.setReflectionTexture = function(tex){
      return function(mat){
          return function(){
              mat.reflectionTexture = tex;
          }
      }
  }

  exports.standardMaterialToMaterial = function(mat){
      return mat;
  }

  exports.setBackFaceCulling = function(value){
      return function(mat){
          return function(){
              mat.backFaceCulling = value;
          }
      }
  }

  exports.setDisableLighting  = function(value){
      return function(mat){
          return function(){
              mat.disableLighting = value;
          }
      }
  }

  exports.setDiffuseColor  = function(value){
      return function(mat){
          return function(){
              mat.diffuseColor  = value;
          }
      }
  }

  exports.setSpecularColor = function(value){
      return function(mat){
          return function(){
              mat.specularColor = value;
          }
      }
  }
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.StandardMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  exports["createStandardMaterial"] = $foreign.createStandardMaterial;
  exports["setBackFaceCulling"] = $foreign.setBackFaceCulling;
  exports["setDiffuseColor"] = $foreign.setDiffuseColor;
  exports["setDiffuseTexture"] = $foreign.setDiffuseTexture;
  exports["setDisableLighting"] = $foreign.setDisableLighting;
  exports["setReflectionTexture"] = $foreign.setReflectionTexture;
  exports["setSpecularColor"] = $foreign.setSpecularColor;
  exports["standardMaterialToMaterial"] = $foreign.standardMaterialToMaterial;
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return v;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return v;
          };
      };
  };
  exports["fillPath"] = fillPath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["arc"] = $foreign.arc;
  exports["clearRect"] = $foreign.clearRect;
  exports["closePath"] = $foreign.closePath;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["lineTo"] = $foreign.lineTo;
  exports["rotate"] = $foreign.rotate;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Example_Sandbox_Terrain = PS["Graphics.Babylon.Example.Sandbox.Terrain"];
  var Graphics_Babylon_Example_Sandbox_Vec = PS["Graphics.Babylon.Example.Sandbox.Vec"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Canvas = PS["Graphics.Canvas"];        
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var Put = (function () {
      function Put() {

      };
      Put.value = new Put();
      return Put;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  exports["Move"] = Move;
  exports["Put"] = Put;
  exports["Remove"] = Remove;
})(PS["Graphics.Babylon.Example.Sandbox.Types"] = PS["Graphics.Babylon.Example.Sandbox.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Example_Sandbox_ChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"];
  var Graphics_Babylon_Example_Sandbox_Generation = PS["Graphics.Babylon.Example.Sandbox.Generation"];
  var Graphics_Babylon_Example_Sandbox_Terrain = PS["Graphics.Babylon.Example.Sandbox.Terrain"];
  var Graphics_Babylon_Example_Sandbox_Types = PS["Graphics.Babylon.Example.Sandbox.Types"];
  var Graphics_Babylon_Example_Sandbox_Vec = PS["Graphics.Babylon.Example.Sandbox.Vec"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var Data_ShowMap = PS["Data.ShowMap"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var renderMiniMap = function (terrain) {
      return function (pos) {
          return function (cameraRot) {
              return function (minimap) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v = Graphics_Canvas.getContext2D(minimap)();
                      var i = Graphics_Babylon_Example_Sandbox_ChunkIndex.runChunkIndex(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToChunkIndex(pos.x)(pos.y)(pos.z));
                      Graphics_Canvas.clearRect(v)({
                          x: 0.0, 
                          y: 0.0, 
                          w: 1280.0, 
                          h: 720.0
                      })();
                      Graphics_Canvas.withContext(v)(function __do() {
                          Graphics_Canvas.translate({
                              translateX: 200.0, 
                              translateY: 150.0
                          })(v)();
                          Graphics_Canvas.rotate(-cameraRot.y)(v)();
                          Graphics_Canvas.translate({
                              translateX: -pos.x, 
                              translateY: pos.z
                          })(v)();
                          Graphics_Canvas.setFillStyle("rgba(0, 200, 0, 0.3)")(v)();
                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_ShowMap.foldable_ShowMap)(Graphics_Babylon_Example_Sandbox_Terrain.getChunkMap(terrain))(function (v1) {
                              var index = Graphics_Babylon_Example_Sandbox_ChunkIndex.runChunkIndex(v1.blocks.index);
                              return Graphics_Canvas.fillRect(v)({
                                  x: Data_Int.toNumber(Graphics_Babylon_Example_Sandbox_Generation.chunkSize * index.x | 0), 
                                  y: Data_Int.toNumber(Graphics_Babylon_Example_Sandbox_Generation.chunkSize * -index.z | 0), 
                                  w: Data_Int.toNumber(Graphics_Babylon_Example_Sandbox_Generation.chunkSize), 
                                  h: Data_Int.toNumber(Graphics_Babylon_Example_Sandbox_Generation.chunkSize)
                              });
                          })();
                          Graphics_Canvas.setStrokeStyle("rgba(255, 0, 0, 0.5)")(v)();
                          Graphics_Canvas.strokeRect(v)({
                              x: 0.0, 
                              y: 0.0, 
                              w: 2000.0, 
                              h: 1.0
                          })();
                          Graphics_Canvas.setStrokeStyle("rgba(200, 200, 200, 0.5)")(v)();
                          Graphics_Canvas.strokeRect(v)({
                              x: -2000.0, 
                              y: 0.0, 
                              w: 2000.0, 
                              h: 1.0
                          })();
                          Graphics_Canvas.setStrokeStyle("rgba(0, 0, 255, 0.5)")(v)();
                          Graphics_Canvas.strokeRect(v)({
                              x: 0.0, 
                              y: -2000.0, 
                              w: 1.0, 
                              h: 2000.0
                          })();
                          Graphics_Canvas.setStrokeStyle("rgba(200, 200, 200, 0.5)")(v)();
                          Graphics_Canvas.strokeRect(v)({
                              x: 0.0, 
                              y: 0.0, 
                              w: 1.0, 
                              h: 2000.0
                          })();
                          Graphics_Canvas.translate({
                              translateX: pos.x, 
                              translateY: -pos.z
                          })(v)();
                          Graphics_Canvas.rotate(cameraRot.y - 3.14159265 * 0.5)(v)();
                          Graphics_Canvas.setFillStyle("rgba(255, 255, 0, 0.5)")(v)();
                          Graphics_Canvas.fillPath(v)(function __do() {
                              Graphics_Canvas.arc(v)({
                                  x: 0.0, 
                                  y: 0.0, 
                                  r: 20.0, 
                                  start: -0.5, 
                                  end: 0.5
                              })();
                              Graphics_Canvas.lineTo(v)(0.0)(0.0)();
                              return Graphics_Canvas.closePath(v)();
                          })();
                          Graphics_Canvas.setFillStyle("orange")(v)();
                          return Graphics_Canvas.fillRect(v)({
                              x: -3.0, 
                              y: -3.0, 
                              w: 6.0, 
                              h: 6.0
                          })();
                      })();
                      Graphics_Canvas.setFillStyle("white")(v)();
                      Graphics_Canvas.fillText(v)(" x: " + Data_Show.show(Data_Show.showNumber)(pos.x))(10.0)(20.0)();
                      Graphics_Canvas.fillText(v)(" y: " + Data_Show.show(Data_Show.showNumber)(pos.y))(10.0)(40.0)();
                      Graphics_Canvas.fillText(v)(" z: " + Data_Show.show(Data_Show.showNumber)(pos.z))(10.0)(60.0)();
                      Graphics_Canvas.fillText(v)("ix: " + Data_Show.show(Data_Show.showInt)(i.x))(10.0)(80.0)();
                      Graphics_Canvas.fillText(v)("iy: " + Data_Show.show(Data_Show.showInt)(i.y))(10.0)(100.0)();
                      return Graphics_Canvas.fillText(v)("iz: " + Data_Show.show(Data_Show.showInt)(i.z))(10.0)(120.0)();
                  });
              };
          };
      };
  };
  exports["renderMiniMap"] = renderMiniMap;
})(PS["Graphics.Babylon.Example.Sandbox.MiniMap"] = PS["Graphics.Babylon.Example.Sandbox.MiniMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Prelude = PS["Prelude"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_VertexData = PS["Graphics.Babylon.VertexData"];
  var Graphics_Babylon_Example_Sandbox_Types = PS["Graphics.Babylon.Example.Sandbox.Types"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Example_Sandbox_ChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"];
  var Graphics_Babylon_Example_Sandbox_Terrain = PS["Graphics.Babylon.Example.Sandbox.Terrain"];
  var Graphics_Babylon_Example_Sandbox_VertexDataPropsData = PS["Graphics.Babylon.Example.Sandbox.VertexDataPropsData"];
  var Control_Applicative = PS["Control.Applicative"];        
  var generateMesh = function (index) {
      return function (verts) {
          return function (mat) {
              return function (scene) {
                  var rci = Graphics_Babylon_Example_Sandbox_ChunkIndex.runChunkIndex(index);
                  return function __do() {
                      var v = Graphics_Babylon_Mesh.createMesh("terrain")(scene)();
                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Graphics_Babylon_VertexData.applyToMesh(v)(false))(Graphics_Babylon_VertexData.createVertexData(verts))();
                      Graphics_Babylon_Mesh.setRenderingGroupId(1)(v)();
                      Graphics_Babylon_Mesh.setReceiveShadows(true)(v)();
                      Graphics_Babylon_Mesh.setMaterial(mat)(v)();
                      return v;
                  };
              };
          };
      };
  };
  var postProcess = function (ref) {
      return function (materials) {
          return function (scene) {
              return function (v) {
                  return function __do() {
                      var v1 = Control_Monad_Eff_Ref.readRef(ref)();
                      (function () {
                          var $11 = Graphics_Babylon_Example_Sandbox_Terrain.lookupChunk(v.terrain.index)(v1.terrain);
                          if ($11 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          if ($11 instanceof Data_Maybe.Just) {
                              return Graphics_Babylon_Example_Sandbox_Terrain.disposeChunk($11.value0);
                          };
                          throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Request line 47, column 5 - line 49, column 49: " + [ $11.constructor.name ]);
                      })()();
                      var v2 = generateMesh(v.terrain.index)(v.grassBlocks)(materials.boxMat)(scene)();
                      var v3 = generateMesh(v.terrain.index)(v.waterBlocks)(materials.waterBoxMat)(scene)();
                      return {
                          blocks: v.terrain, 
                          grassBlockMesh: v2, 
                          waterBlockMesh: v3
                      };
                  };
              };
          };
      };
  };
  exports["generateMesh"] = generateMesh;
  exports["postProcess"] = postProcess;
})(PS["Graphics.Babylon.Example.Sandbox.Request"] = PS["Graphics.Babylon.Example.Sandbox.Request"] || {});
(function(exports) {exports.createFreeCamera = function(id){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.FreeCamera(id, position, scene);
              }
          }
      }
  }

  exports.freeCameraToCamera = function(camera){
      return camera;
  }

  exports.freeCameraToTargetCamera = function(camera){
      return camera;
  }


  exports.attachControl = function(canvas){
      return function(noPreventDefault){
          return function(camera){
              return function(){
                  camera.attachControl(canvas, noPreventDefault);
              }
          }
      }
  }

  exports.setCheckCollisions = function(checkCollisions){
      return function(camera){
          return function(){
              camera.checkCollisions = checkCollisions;
          }
      }
  }
})(PS["Graphics.Babylon.FreeCamera"] = PS["Graphics.Babylon.FreeCamera"] || {});
(function(exports) {

  exports.setSpeed = function(speed){
      return function(camera){
          return function(){
              camera.speed = speed;
          }
      }
  }

  exports.getRotation = function(camera){
      return function(){
          return camera.rotation;
      }
  }

  exports.setTarget = function(position){
      return function(camera){
          return function(){
              camera.setTarget(position);
          }
      }
  }
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.TargetCamera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector2 = PS["Graphics.Babylon.Vector2"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["getRotation"] = $foreign.getRotation;
  exports["setSpeed"] = $foreign.setSpeed;
  exports["setTarget"] = $foreign.setTarget;
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.FreeCamera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  exports["attachControl"] = $foreign.attachControl;
  exports["createFreeCamera"] = $foreign.createFreeCamera;
  exports["freeCameraToCamera"] = $foreign.freeCameraToCamera;
  exports["freeCameraToTargetCamera"] = $foreign.freeCameraToTargetCamera;
  exports["setCheckCollisions"] = $foreign.setCheckCollisions;
})(PS["Graphics.Babylon.FreeCamera"] = PS["Graphics.Babylon.FreeCamera"] || {});
(function(exports) {exports.createHemisphericLight = function(id){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.HemisphericLight(id, position, scene);
              }
          }
      }
  }


  exports.hemisphericLightToLight = function(light){
      return light;
  }
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.HemisphericLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  exports["createHemisphericLight"] = $foreign.createHemisphericLight;
  exports["hemisphericLightToLight"] = $foreign.hemisphericLightToLight;
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {

  exports.getPickedPoint = function(info){
      return info.pickedPoint;
  }

  exports.getHit = function(info){
      return info.hit;
  }
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["getHit"] = $foreign.getHit;
  exports["getPickedPoint"] = $foreign.getPickedPoint;
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {exports.createScene = function(engine){
      return function(){
          return new BABYLON.Scene(engine);
      }
  }

  exports.render = function(scene){
      return function(){
          scene.render();
      }
  }

  exports.fOGMODE_EXP = BABYLON.Scene.FOGMODE_EXP;

  exports.setFogMode = function(fogMode){
      return function(scene){
          return function(){
              scene.fogMode = fogMode;
          }
      }
  }

  exports.setFogDensity = function(fogDensity){
      return function(scene){
          return function(){
              scene.fogDensity = fogDensity;
          }
      }
  }

  exports.setFogStart = function(fogStart){
      return function(scene){
          return function(){
              scene.fogStart = fogStart;
          }
      }
  }

  exports.setFogEnd = function(fogEnd){
      return function(scene){
          return function(){
              scene.fogEnd = fogEnd;
          }
      }
  }

  exports.setFogColor = function(fogColor){
      return function(scene){
          return function(){
              scene.fogColor = fogColor;
          }
      }
  }

  exports.setCollisionsEnabled = function(collisionsEnabled){
      return function(scene){
          return function(){
              scene.collisionsEnabled = collisionsEnabled;
          }
      }
  }

  exports.getDebugLayer = function(scene){
      return function(){
          return scene.debugLayer;
      }
  }

  exports.pick = function(x){
      return function(y){
          return function(predicate){
              return function(fastCheck){
                  return function(scene){
                      return function(){
                          return scene.pick(x, y, function(mesh){
                              return predicate(mesh)();
                          }, fastCheck);
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Scene"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_DebugLayer = PS["Graphics.Babylon.DebugLayer"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createScene"] = $foreign.createScene;
  exports["fOGMODE_EXP"] = $foreign.fOGMODE_EXP;
  exports["getDebugLayer"] = $foreign.getDebugLayer;
  exports["pick"] = $foreign.pick;
  exports["render"] = $foreign.render;
  exports["setCollisionsEnabled"] = $foreign.setCollisionsEnabled;
  exports["setFogColor"] = $foreign.setFogColor;
  exports["setFogDensity"] = $foreign.setFogDensity;
  exports["setFogEnd"] = $foreign.setFogEnd;
  exports["setFogMode"] = $foreign.setFogMode;
  exports["setFogStart"] = $foreign.setFogStart;
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {exports.createShadowGenerator = function(size){
      return function(light){
          return function(){
              var s = new BABYLON.ShadowGenerator(size, light);
              //s.useBlurVarianceShadowMap  =true;
              //s.blurScale = 0.9;
              //s.blurBoxOffset = 0.1;
              return s;
          }
      }
  }


  exports.getShadowMap = function(shadowGenerator){
      return function(){
          return shadowGenerator.getShadowMap();
      }
  }

  exports.setRenderList = function(renderList){
      return function(shadowMap){
          return function(){
              shadowMap.renderList = renderList.slice();
          }
      }
  }

  exports.setBias = function(bias){
      return function(generator){
          return function(){
              generator.bias = bias;
          }
      }
  }

  exports.setUsePoissonSampling = function(usePoissonSampling){
      return function(generator){
          return function(){
              generator.usePoissonSampling = usePoissonSampling;
          }
      }
  }
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.ShadowGenerator"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_DirectionalLight = PS["Graphics.Babylon.DirectionalLight"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createShadowGenerator"] = $foreign.createShadowGenerator;
  exports["getShadowMap"] = $foreign.getShadowMap;
  exports["setBias"] = $foreign.setBias;
  exports["setRenderList"] = $foreign.setRenderList;
  exports["setUsePoissonSampling"] = $foreign.setUsePoissonSampling;
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {exports.createWaterMaterial = function(name){
      return function(scene){
          return function(){
              return new BABYLON.WaterMaterial(name, scene);
          }
      }
  }

  exports.waterMaterialToMaterial = function(mat){
      return mat;
  }

  exports.setBumpTexture = function(tex){
      return function(mat){
          return function(){
              mat.bumpTexture = tex;
          }
      }
  }

  exports.addToRenderList = function(mesh){
      return function(mat){
          return function(){
              mat.addToRenderList(mesh);
          }
      }
  }

  exports.setWaveHeight = function(waveHeight){
      return function(mat){
          return function(){
              mat.waveHeight = waveHeight;
          }
      }
  }

  exports.setWindForce = function(windForce){
      return function(mat){
          return function(){
              mat.windForce = windForce;
          }
      }
  }
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.WaterMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["addToRenderList"] = $foreign.addToRenderList;
  exports["createWaterMaterial"] = $foreign.createWaterMaterial;
  exports["setBumpTexture"] = $foreign.setBumpTexture;
  exports["setWaveHeight"] = $foreign.setWaveHeight;
  exports["setWindForce"] = $foreign.setWindForce;
  exports["waterMaterialToMaterial"] = $foreign.waterMaterialToMaterial;
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_ShowMap = PS["Data.ShowMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_CubeTexture = PS["Graphics.Babylon.CubeTexture"];
  var Graphics_Babylon_DebugLayer = PS["Graphics.Babylon.DebugLayer"];
  var Graphics_Babylon_DirectionalLight = PS["Graphics.Babylon.DirectionalLight"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_Example_Sandbox_Block = PS["Graphics.Babylon.Example.Sandbox.Block"];
  var Graphics_Babylon_Example_Sandbox_BlockIndex = PS["Graphics.Babylon.Example.Sandbox.BlockIndex"];
  var Graphics_Babylon_Example_Sandbox_BlockType = PS["Graphics.Babylon.Example.Sandbox.BlockType"];
  var Graphics_Babylon_Example_Sandbox_Chunk = PS["Graphics.Babylon.Example.Sandbox.Chunk"];
  var Graphics_Babylon_Example_Sandbox_ChunkIndex = PS["Graphics.Babylon.Example.Sandbox.ChunkIndex"];
  var Graphics_Babylon_Example_Sandbox_Event = PS["Graphics.Babylon.Example.Sandbox.Event"];
  var Graphics_Babylon_Example_Sandbox_Generation = PS["Graphics.Babylon.Example.Sandbox.Generation"];
  var Graphics_Babylon_Example_Sandbox_MeshBuilder = PS["Graphics.Babylon.Example.Sandbox.MeshBuilder"];
  var Graphics_Babylon_Example_Sandbox_MiniMap = PS["Graphics.Babylon.Example.Sandbox.MiniMap"];
  var Graphics_Babylon_Example_Sandbox_Request = PS["Graphics.Babylon.Example.Sandbox.Request"];
  var Graphics_Babylon_Example_Sandbox_Terrain = PS["Graphics.Babylon.Example.Sandbox.Terrain"];
  var Graphics_Babylon_Example_Sandbox_Types = PS["Graphics.Babylon.Example.Sandbox.Types"];
  var Graphics_Babylon_Example_Sandbox_VertexDataPropsData = PS["Graphics.Babylon.Example.Sandbox.VertexDataPropsData"];
  var Graphics_Babylon_FreeCamera = PS["Graphics.Babylon.FreeCamera"];
  var Graphics_Babylon_HemisphericLight = PS["Graphics.Babylon.HemisphericLight"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_ShadowGenerator = PS["Graphics.Babylon.ShadowGenerator"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_WaterMaterial = PS["Graphics.Babylon.WaterMaterial"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var unloadDistance = 8;
  var terrainRenderingGroup = 1;
  var skyBoxRenderingGruop = 0;
  var shadowMapSize = 4096;
  var loadDistance = 4;
  var enableWaterMaterial = false;
  var collesionEnabledRange = 1;
  var runApp = function (canvasGL) {
      return function (canvas2d) {
          return function (minimap) {
              return function __do() {
                  var v = Graphics_Babylon_Engine.createEngine(canvasGL)(true)();
                  var v1 = (function __do() {
                      var v1 = Graphics_Babylon_Scene.createScene(v)();
                      Graphics_Babylon_Scene.setFogMode(Graphics_Babylon_Scene.fOGMODE_EXP)(v1)();
                      Graphics_Babylon_Scene.setFogDensity(1.0e-2)(v1)();
                      Graphics_Babylon_Scene.setFogStart(250.0)(v1)();
                      Graphics_Babylon_Scene.setFogEnd(1000.0)(v1)();
                      var v2 = Graphics_Babylon_Color3.createColor3(0.8)(0.8)(1.0)();
                      Graphics_Babylon_Scene.setFogColor(v2)(v1)();
                      Graphics_Babylon_Scene.setCollisionsEnabled(true)(v1)();
                      return v1;
                  })();
                  var v2 = (function __do() {
                      var v2 = Graphics_Babylon_Vector3.createVector3(30.0)(30.0)(30.0)();
                      var v3 = Graphics_Babylon_FreeCamera.createFreeCamera("free-camera")(v2)(v1)();
                      Graphics_Babylon_FreeCamera.setCheckCollisions(true)(v3)();
                      var v4 = Graphics_Babylon_Vector3.createVector3(5.0)(3.0)(5.0)();
                      Graphics_Babylon_TargetCamera.setTarget(v4)(Graphics_Babylon_FreeCamera.freeCameraToTargetCamera(v3))();
                      Graphics_Babylon_FreeCamera.attachControl(canvasGL)(false)(v3)();
                      Graphics_Babylon_TargetCamera.setSpeed(0.3)(Graphics_Babylon_FreeCamera.freeCameraToTargetCamera(v3))();
                      return v3;
                  })();
                  (function __do() {
                      var v3 = Graphics_Babylon_Vector3.createVector3(0.0)(1.0)(0.0)();
                      var v4 = Graphics_Babylon_HemisphericLight.createHemisphericLight("Hemi0")(v3)(v1)();
                      var v5 = Graphics_Babylon_Color3.createColor3(0.6)(0.6)(0.6)();
                      return Graphics_Babylon_Light.setDiffuse(v5)(Graphics_Babylon_HemisphericLight.hemisphericLightToLight(v4))();
                  })();
                  var v3 = (function __do() {
                      var v3 = Graphics_Babylon_Vector3.createVector3(-0.4)(-0.8)(-0.4)();
                      var v4 = Graphics_Babylon_DirectionalLight.createDirectionalLight("light1")(v3)(v1)();
                      var v5 = Graphics_Babylon_Color3.createColor3(0.8)(0.8)(0.8)();
                      Graphics_Babylon_Light.setDiffuse(v5)(Graphics_Babylon_DirectionalLight.directionalLightToLight(v4))();
                      var v6 = Graphics_Babylon_ShadowGenerator.createShadowGenerator(shadowMapSize)(v4)();
                      Graphics_Babylon_ShadowGenerator.setBias(5.0e-6)(v6)();
                      Graphics_Babylon_ShadowGenerator.setUsePoissonSampling(true)(v6)();
                      return Graphics_Babylon_ShadowGenerator.getShadowMap(v6)();
                  })();
                  var v4 = (function __do() {
                      var v4 = Graphics_Babylon_Mesh.createBox("cursor")(1.0)(v1)();
                      Graphics_Babylon_Mesh.setRenderingGroupId(1)(v4)();
                      Graphics_Babylon_AbstractMesh.setIsPickable(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v4))();
                      Graphics_Babylon_AbstractMesh.setIsVisible(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v4))();
                      var v5 = Graphics_Babylon_StandardMaterial.createStandardMaterial("cursormat")(v1)();
                      Graphics_Babylon_Material.setWireframe(true)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v5))();
                      Graphics_Babylon_Material.setZOffset(-1.0e-2)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v5))();
                      Graphics_Babylon_Mesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v5))(v4)();
                      return v4;
                  })();
                  var v5 = (function __do() {
                      var v5 = Graphics_Babylon_CubeTexture.createCubeTexture("skybox/skybox")(v1)();
                      Graphics_Babylon_Texture.setCoordinatesMode(Graphics_Babylon_Texture.sKYBOX_MODE)(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v5))();
                      var v6 = Graphics_Babylon_StandardMaterial.createStandardMaterial("skyBox/skybox")(v1)();
                      Graphics_Babylon_Material.setFogEnabled(false)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v6))();
                      Graphics_Babylon_StandardMaterial.setBackFaceCulling(false)(v6)();
                      Graphics_Babylon_StandardMaterial.setDisableLighting(true)(v6)();
                      var v7 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                      Graphics_Babylon_StandardMaterial.setDiffuseColor(v7)(v6)();
                      var v8 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                      Graphics_Babylon_StandardMaterial.setSpecularColor(v8)(v6)();
                      Graphics_Babylon_StandardMaterial.setReflectionTexture(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v5))(v6)();
                      var v9 = Graphics_Babylon_Mesh.createBox("skybox")(1000.0)(v1)();
                      Graphics_Babylon_Mesh.setRenderingGroupId(skyBoxRenderingGruop)(v9)();
                      Graphics_Babylon_Mesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v6))(v9)();
                      Graphics_Babylon_Mesh.setInfiniteDistance(true)(v9)();
                      return v9;
                  })();
                  var v6 = Control_Monad_Eff_Ref.newRef({
                      mode: Graphics_Babylon_Example_Sandbox_Types.Move.value, 
                      terrain: Graphics_Babylon_Example_Sandbox_Terrain.emptyTerrain, 
                      mousePosition: {
                          x: 0, 
                          y: 0
                      }, 
                      debugLayer: false, 
                      yaw: 0.0, 
                      pitch: 0.0, 
                      velocity: {
                          x: 0.0, 
                          y: 0.0, 
                          z: 0.0
                      }
                  })();
                  Graphics_Babylon_Example_Sandbox_Event.onMouseMove(function (e) {
                      return Control_Monad_Eff_Ref.modifyRef(v6)(function (v7) {
                          var $93 = {};
                          for (var $94 in v7) {
                              if (v7.hasOwnProperty($94)) {
                                  $93[$94] = v7[$94];
                              };
                          };
                          $93.mousePosition = {
                              x: e.offsetX, 
                              y: e.offsetY
                          };
                          return $93;
                      });
                  })();
                  var prepareModeButton = function (id) {
                      return function (value) {
                          return Graphics_Babylon_Example_Sandbox_Event.onButtonClick(id)(function __do() {
                              Control_Monad_Eff_Ref.modifyRef(v6)(function (v7) {
                                  var $97 = {};
                                  for (var $98 in v7) {
                                      if (v7.hasOwnProperty($98)) {
                                          $97[$98] = v7[$98];
                                      };
                                  };
                                  $97.mode = value;
                                  return $97;
                              })();
                              return Graphics_Babylon_AbstractMesh.setIsVisible((function () {
                                  if (value instanceof Graphics_Babylon_Example_Sandbox_Types.Put) {
                                      return true;
                                  };
                                  if (value instanceof Graphics_Babylon_Example_Sandbox_Types.Remove) {
                                      return true;
                                  };
                                  if (value instanceof Graphics_Babylon_Example_Sandbox_Types.Move) {
                                      return false;
                                  };
                                  throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 192, column 40 - line 195, column 30: " + [ value.constructor.name ]);
                              })())(Graphics_Babylon_Mesh.meshToAbstractMesh(v4))();
                          });
                      };
                  };
                  prepareModeButton("move")(Graphics_Babylon_Example_Sandbox_Types.Move.value)();
                  prepareModeButton("add")(Graphics_Babylon_Example_Sandbox_Types.Put.value)();
                  prepareModeButton("remove")(Graphics_Babylon_Example_Sandbox_Types.Remove.value)();
                  Graphics_Babylon_Example_Sandbox_Event.onButtonClick("debuglayer")(function __do() {
                      Control_Monad_Eff_Ref.modifyRef(v6)(function (v7) {
                          var $102 = {};
                          for (var $103 in v7) {
                              if (v7.hasOwnProperty($103)) {
                                  $102[$103] = v7[$103];
                              };
                          };
                          $102.debugLayer = !v7.debugLayer;
                          return $102;
                      })();
                      var v7 = Control_Monad_Eff_Ref.readRef(v6)();
                      if (v7.debugLayer) {
                          return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(v1))(Graphics_Babylon_DebugLayer.show(true)(true)(Data_Maybe.Nothing.value))();
                      };
                      if (!v7.debugLayer) {
                          return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(v1))(Graphics_Babylon_DebugLayer.hide)();
                      };
                      throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 205, column 9 - line 207, column 57: " + [ v7.debugLayer.constructor.name ]);
                  })();
                  var pickBlock = function (v7) {
                      return function (screenX) {
                          return function (screenY) {
                              var predicate = function (mesh) {
                                  var name = Graphics_Babylon_Node.getName(Graphics_Babylon_AbstractMesh.abstractMeshToNode(mesh));
                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(name !== "cursor");
                              };
                              return function __do() {
                                  var v8 = Graphics_Babylon_Scene.pick(screenX)(screenY)(predicate)(false)(v1)();
                                  var pickup = (function () {
                                      var point = Graphics_Babylon_PickingInfo.getPickedPoint(v8);
                                      return function __do() {
                                          var v9 = Graphics_Babylon_Vector3.runVector3(point)();
                                          var dx = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v9.x - $$Math.round(v9.x));
                                          var dy = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v9.y - $$Math.round(v9.y));
                                          var dz = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v9.z - $$Math.round(v9.z));
                                          var minDelta = Data_Ord.min(Data_Ord.ordNumber)(dx)(Data_Ord.min(Data_Ord.ordNumber)(dy)(dz));
                                          var lookupBlock$prime = function (x) {
                                              return function (y) {
                                                  return function (z) {
                                                      return Graphics_Babylon_Example_Sandbox_Terrain.lookupBlock({
                                                          x: x, 
                                                          y: y, 
                                                          z: z
                                                      })(v7.terrain);
                                                  };
                                              };
                                          };
                                          var putCursor = function (bi) {
                                              var rbi = Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(bi);
                                              return function __do() {
                                                  var v10 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                                  return Graphics_Babylon_Mesh.setPosition(v10)(v4)();
                                              };
                                          };
                                          if (v7.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Put) {
                                              var $114 = minDelta === dx;
                                              if ($114) {
                                                  var $115 = lookupBlock$prime(v9.x + 0.5)(v9.y)(v9.z);
                                                  var $116 = lookupBlock$prime(v9.x - 0.5)(v9.y)(v9.z);
                                                  if ($115 instanceof Data_Maybe.Just && $116 instanceof Data_Maybe.Nothing) {
                                                      return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x - 0.5)(v9.y)(v9.z));
                                                  };
                                                  if ($115 instanceof Data_Maybe.Nothing && $116 instanceof Data_Maybe.Just) {
                                                      return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x + 0.5)(v9.y)(v9.z));
                                                  };
                                                  return Data_Maybe.Nothing.value;
                                              };
                                              if (!$114) {
                                                  var $119 = minDelta === dy;
                                                  if ($119) {
                                                      var $120 = lookupBlock$prime(v9.x)(v9.y + 0.5)(v9.z);
                                                      var $121 = lookupBlock$prime(v9.x)(v9.y - 0.5)(v9.z);
                                                      if ($120 instanceof Data_Maybe.Just && $121 instanceof Data_Maybe.Nothing) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y - 0.5)(v9.z));
                                                      };
                                                      if ($120 instanceof Data_Maybe.Nothing && $121 instanceof Data_Maybe.Just) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y + 0.5)(v9.z));
                                                      };
                                                      return Data_Maybe.Nothing.value;
                                                  };
                                                  if (!$119) {
                                                      var $124 = lookupBlock$prime(v9.x)(v9.y)(v9.z + 0.5);
                                                      var $125 = lookupBlock$prime(v9.x)(v9.y)(v9.z - 0.5);
                                                      if ($124 instanceof Data_Maybe.Just && $125 instanceof Data_Maybe.Nothing) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y)(v9.z - 0.5));
                                                      };
                                                      if ($124 instanceof Data_Maybe.Nothing && $125 instanceof Data_Maybe.Just) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y)(v9.z + 0.5));
                                                      };
                                                      return Data_Maybe.Nothing.value;
                                                  };
                                                  throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 238, column 38 - line 247, column 65: " + [ $119.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 233, column 32 - line 247, column 65: " + [ $114.constructor.name ]);
                                          };
                                          if (v7.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Remove) {
                                              var $128 = minDelta === dx;
                                              if ($128) {
                                                  var $129 = lookupBlock$prime(v9.x + 0.5)(v9.y)(v9.z);
                                                  var $130 = lookupBlock$prime(v9.x - 0.5)(v9.y)(v9.z);
                                                  if ($129 instanceof Data_Maybe.Just && $130 instanceof Data_Maybe.Nothing) {
                                                      return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x + 0.5)(v9.y)(v9.z));
                                                  };
                                                  if ($129 instanceof Data_Maybe.Nothing && $130 instanceof Data_Maybe.Just) {
                                                      return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x - 0.5)(v9.y)(v9.z));
                                                  };
                                                  return Data_Maybe.Nothing.value;
                                              };
                                              if (!$128) {
                                                  var $133 = minDelta === dy;
                                                  if ($133) {
                                                      var $134 = lookupBlock$prime(v9.x)(v9.y + 0.5)(v9.z);
                                                      var $135 = lookupBlock$prime(v9.x)(v9.y - 0.5)(v9.z);
                                                      if ($134 instanceof Data_Maybe.Just && $135 instanceof Data_Maybe.Nothing) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y + 0.5)(v9.z));
                                                      };
                                                      if ($134 instanceof Data_Maybe.Nothing && $135 instanceof Data_Maybe.Just) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y - 0.5)(v9.z));
                                                      };
                                                      return Data_Maybe.Nothing.value;
                                                  };
                                                  if (!$133) {
                                                      var $138 = lookupBlock$prime(v9.x)(v9.y)(v9.z + 0.5);
                                                      var $139 = lookupBlock$prime(v9.x)(v9.y)(v9.z - 0.5);
                                                      if ($138 instanceof Data_Maybe.Just && $139 instanceof Data_Maybe.Nothing) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y)(v9.z + 0.5));
                                                      };
                                                      if ($138 instanceof Data_Maybe.Nothing && $139 instanceof Data_Maybe.Just) {
                                                          return Data_Maybe.Just.create(Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToGlobalIndex(v9.x)(v9.y)(v9.z - 0.5));
                                                      };
                                                      return Data_Maybe.Nothing.value;
                                                  };
                                                  throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 254, column 38 - line 263, column 65: " + [ $133.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 249, column 35 - line 263, column 65: " + [ $128.constructor.name ]);
                                          };
                                          if (v7.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Move) {
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 232, column 21 - line 265, column 45: " + [ v7.mode.constructor.name ]);
                                      };
                                  })();
                                  var $142 = Graphics_Babylon_PickingInfo.getHit(v8);
                                  if ($142) {
                                      return pickup();
                                  };
                                  if (!$142) {
                                      return Data_Maybe.Nothing.value;
                                  };
                                  throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 267, column 13 - line 267, column 64: " + [ $142.constructor.name ]);
                              };
                          };
                      };
                  };
                  var v7 = (function __do() {
                      var v7 = Graphics_Babylon_Texture.createTexture("grass-block.png")(v1)();
                      var v8 = Graphics_Babylon_StandardMaterial.createStandardMaterial("grass-block")(v1)();
                      var v9 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                      Graphics_Babylon_StandardMaterial.setSpecularColor(v9)(v8)();
                      Graphics_Babylon_StandardMaterial.setDiffuseTexture(v7)(v8)();
                      var v10 = (function () {
                          if (enableWaterMaterial) {
                              return function __do() {
                                  var v10 = Graphics_Babylon_WaterMaterial.createWaterMaterial("water-block")(v1)();
                                  var v11 = Graphics_Babylon_Texture.createTexture("waterbump.png")(v1)();
                                  Graphics_Babylon_WaterMaterial.setBumpTexture(v11)(v10)();
                                  Graphics_Babylon_WaterMaterial.addToRenderList(Graphics_Babylon_Mesh.meshToAbstractMesh(v5))(v10)();
                                  Graphics_Babylon_WaterMaterial.setWaveHeight(0.0)(v10)();
                                  Graphics_Babylon_WaterMaterial.setWindForce(1.0)(v10)();
                                  return Graphics_Babylon_WaterMaterial.waterMaterialToMaterial(v10);
                              };
                          };
                          if (!enableWaterMaterial) {
                              return function __do() {
                                  var v10 = Graphics_Babylon_Texture.createTexture("water-block.png")(v1)();
                                  var v11 = Graphics_Babylon_StandardMaterial.createStandardMaterial("water-block")(v1)();
                                  Graphics_Babylon_StandardMaterial.setDiffuseTexture(v10)(v11)();
                                  return Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v11);
                              };
                          };
                          throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 279, column 26 - line 292, column 54: " + [ enableWaterMaterial.constructor.name ]);
                      })()();
                      return {
                          boxMat: Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v8), 
                          waterBoxMat: v10
                      };
                  })();
                  Graphics_Babylon_Example_Sandbox_Event.onMouseClick(function (e) {
                      return function __do() {
                          var v8 = Control_Monad_Eff_Ref.readRef(v6)();
                          var v9 = pickBlock(v8)(v8.mousePosition.x)(v8.mousePosition.y)();
                          if (v9 instanceof Data_Maybe.Nothing) {
                              return Data_Unit.unit;
                          };
                          if (v9 instanceof Data_Maybe.Just) {
                              var chunkIndex = Graphics_Babylon_Example_Sandbox_Terrain.globalIndexToChunkIndex(v9.value0);
                              var $156 = Graphics_Babylon_Example_Sandbox_Terrain.lookupChunk(chunkIndex)(v8.terrain);
                              if ($156 instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              if ($156 instanceof Data_Maybe.Just) {
                                  return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                      var chunk$prime = (function () {
                                          var $158 = {};
                                          for (var $159 in $156.value0) {
                                              if ($156.value0.hasOwnProperty($159)) {
                                                  $158[$159] = $156.value0[$159];
                                              };
                                          };
                                          $158.blocks = {
                                              index: $156.value0.blocks.index, 
                                              map: (function () {
                                                  if (v8.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Put) {
                                                      return Data_ShowMap.insert(Graphics_Babylon_Example_Sandbox_BlockIndex.show_Show)(v9.value0)({
                                                          index: v9.value0, 
                                                          blockType: Graphics_Babylon_Example_Sandbox_BlockType.grassBlock
                                                      })($156.value0.blocks.map);
                                                  };
                                                  if (v8.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Remove) {
                                                      return Data_ShowMap["delete"](Graphics_Babylon_Example_Sandbox_BlockIndex.show_Show)(v9.value0)($156.value0.blocks.map);
                                                  };
                                                  if (v8.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Move) {
                                                      return $156.value0.blocks.map;
                                                  };
                                                  throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 310, column 62 - line 313, column 48: " + [ v8.mode.constructor.name ]);
                                              })()
                                          };
                                          return $158;
                                      })();
                                      return function __do() {
                                          var v10 = Graphics_Babylon_Example_Sandbox_Request.postProcess(v6)(v7)(v1)(Graphics_Babylon_Example_Sandbox_MeshBuilder.createTerrainGeometry(chunk$prime.blocks))();
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(Control_Monad_Eff_Ref.writeRef(v6)((function () {
                                              var $162 = {};
                                              for (var $163 in v8) {
                                                  if (v8.hasOwnProperty($163)) {
                                                      $162[$163] = v8[$163];
                                                  };
                                              };
                                              $162.terrain = Graphics_Babylon_Example_Sandbox_Terrain.insertChunk(v10)(v8.terrain);
                                              return $162;
                                          })()))();
                                      };
                                  })())();
                              };
                              throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 306, column 17 - line 321, column 26: " + [ $156.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 302, column 9 - line 321, column 26: " + [ v9.constructor.name ]);
                      };
                  })();
                  return Graphics_Babylon_Engine.runRenderLoop(function __do() {
                      var v8 = Control_Monad_Eff_Ref.readRef(v6)();
                      var v9 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Camera.getPosition(Graphics_Babylon_FreeCamera.freeCameraToCamera(v2)))(Graphics_Babylon_Vector3.runVector3)();
                      var cameraPositionChunkIndex = Graphics_Babylon_Example_Sandbox_Terrain.globalPositionToChunkIndex(v9.x)(v9.y)(v9.z);
                      (function () {
                          if (v8.mode instanceof Graphics_Babylon_Example_Sandbox_Types.Move) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          return function __do() {
                              var v10 = pickBlock(v8)(v8.mousePosition.x)(v8.mousePosition.y)();
                              if (v10 instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              if (v10 instanceof Data_Maybe.Just) {
                                  var rbi = Graphics_Babylon_Example_Sandbox_BlockIndex.runBlockIndex(v10.value0);
                                  var v11 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                  return Graphics_Babylon_Mesh.setPosition(v11)(v4)();
                              };
                              throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 340, column 21 - line 345, column 49: " + [ v10.constructor.name ]);
                          };
                      })()();
                      (function () {
                          var ci = Graphics_Babylon_Example_Sandbox_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                          return function __do() {
                              var v10 = Data_Array_ST.runSTArray(function __do() {
                                  var v10 = Data_Array_ST.emptySTArray();
                                  Control_Monad_Eff.forE(ci.x - 2)(ci.x + 2 | 0)(function (dx) {
                                      return Control_Monad_Eff.forE(ci.y - 2)(ci.y + 2 | 0)(function (dy) {
                                          return Control_Monad_Eff.forE(ci.z - 2)(ci.z + 2 | 0)(function (dz) {
                                              var $178 = Graphics_Babylon_Example_Sandbox_Terrain.lookupChunk(Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndex(dx)(dy)(dz))(v8.terrain);
                                              if ($178 instanceof Data_Maybe.Nothing) {
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                              };
                                              if ($178 instanceof Data_Maybe.Just) {
                                                  if (Data_ShowMap.isEmpty($178.value0.blocks.map)) {
                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                  };
                                                  if (Data_Boolean.otherwise) {
                                                      var f = function (m) {
                                                          return function __do() {
                                                              var v11 = Graphics_Babylon_Mesh.getTotalIndices(m)();
                                                              return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(0 < v11)(Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v10)(Graphics_Babylon_Mesh.meshToAbstractMesh(m))))();
                                                          };
                                                      };
                                                      return function __do() {
                                                          f($178.value0.grassBlockMesh)();
                                                          return f($178.value0.waterBlockMesh)();
                                                      };
                                                  };
                                              };
                                              throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 357, column 29 - line 366, column 103: " + [ $178.constructor.name ]);
                                          });
                                      });
                                  })();
                                  return v10;
                              })();
                              return Graphics_Babylon_ShadowGenerator.setRenderList(v10)(v3)();
                          };
                      })()();
                      (function () {
                          var indices = (function () {
                              var ci = Graphics_Babylon_Example_Sandbox_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                              return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(ci.x - loadDistance)(ci.x + loadDistance | 0))(function (v10) {
                                  return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(ci.y - 1)(ci.y + 1 | 0))(function (v11) {
                                      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(ci.z - loadDistance)(ci.z + loadDistance | 0))(function (v12) {
                                          return Control_Bind.bind(Control_Bind.bindArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(Data_Maybe.isNothing(Graphics_Babylon_Example_Sandbox_Terrain.lookupChunk(Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndex(v10)(v11)(v12))(v8.terrain))))(function () {
                                              return Control_Applicative.pure(Control_Applicative.applicativeArray)(Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndex(v10)(v11)(v12));
                                          });
                                      });
                                  });
                              });
                          })();
                          var $186 = Data_Array.head(indices);
                          if ($186 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          if ($186 instanceof Data_Maybe.Just) {
                              var boxMap = Graphics_Babylon_Example_Sandbox_Generation.createBlockMap($186.value0)(0);
                              var $187 = Graphics_Babylon_Example_Sandbox_MeshBuilder.createTerrainGeometry(boxMap);
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                  (function () {
                                      var $188 = Graphics_Babylon_Example_Sandbox_Terrain.lookupChunk($186.value0)(v8.terrain);
                                      if ($188 instanceof Data_Maybe.Nothing) {
                                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                      };
                                      if ($188 instanceof Data_Maybe.Just) {
                                          return Graphics_Babylon_Example_Sandbox_Terrain.disposeChunk($188.value0);
                                      };
                                      throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 389, column 29 - line 391, column 73: " + [ $188.constructor.name ]);
                                  })()();
                                  var v10 = Graphics_Babylon_Example_Sandbox_Request.generateMesh($186.value0)($187.grassBlocks)(v7.boxMat)(v1)();
                                  var v11 = Graphics_Babylon_Example_Sandbox_Request.generateMesh($186.value0)($187.waterBlocks)(v7.waterBoxMat)(v1)();
                                  var result = {
                                      blocks: $187.terrain, 
                                      grassBlockMesh: v10, 
                                      waterBlockMesh: v11
                                  };
                                  Control_Monad_Eff_Ref.modifyRef(v6)(function (v12) {
                                      var $193 = {};
                                      for (var $194 in v12) {
                                          if (v12.hasOwnProperty($194)) {
                                              $193[$194] = v12[$194];
                                          };
                                      };
                                      $193.terrain = Graphics_Babylon_Example_Sandbox_Terrain.insertChunk(result)(v12.terrain);
                                      return $193;
                                  })();
                                  Control_Monad_Eff_Console.log("load chunk: " + Data_Show.show(Graphics_Babylon_Example_Sandbox_ChunkIndex.show_Show)($186.value0))();
                                  return Control_Monad_Eff_Console.log("total chunks:" + Data_Show.show(Data_Show.showInt)(Graphics_Babylon_Example_Sandbox_Terrain.chunkCount(v8.terrain) + 1 | 0))();
                              });
                          };
                          throw new Error("Failed pattern match at Graphics.Babylon.Example.Sandbox.Main line 383, column 13 - line 399, column 89: " + [ $186.constructor.name ]);
                      })()();
                      (function __do() {
                          var v10 = Control_Monad_Eff_Ref.readRef(v6)();
                          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_ShowMap.foldable_ShowMap)(Graphics_Babylon_Example_Sandbox_Terrain.getChunkMap(v10.terrain))(function (v11) {
                              var r = Graphics_Babylon_Example_Sandbox_ChunkIndex.chunkIndexRange(v11.blocks.index)(cameraPositionChunkIndex);
                              var enabled = r <= collesionEnabledRange;
                              return function __do() {
                                  Graphics_Babylon_AbstractMesh.setCheckCollisions(enabled)(Graphics_Babylon_Mesh.meshToAbstractMesh(v11.grassBlockMesh))();
                                  return Graphics_Babylon_AbstractMesh.setCheckCollisions(enabled)(Graphics_Babylon_Mesh.meshToAbstractMesh(v11.waterBlockMesh))();
                              };
                          })();
                      })();
                      (function __do() {
                          var v10 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Camera.getPosition(Graphics_Babylon_FreeCamera.freeCameraToCamera(v2)))(Graphics_Babylon_Vector3.runVector3)();
                          var v11 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_TargetCamera.getRotation(Graphics_Babylon_FreeCamera.freeCameraToTargetCamera(v2)))(Graphics_Babylon_Vector3.runVector3)();
                          return Graphics_Babylon_Example_Sandbox_MiniMap.renderMiniMap(v8.terrain)(v10)(v11)(minimap)();
                      })();
                      return Graphics_Babylon_Scene.render(v1)();
                  })(v)();
              };
          };
      };
  };
  var main = Graphics_Babylon.onDOMContentLoaded(function __do() {
      var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Graphics_Babylon.querySelectorCanvas("#renderCanvas"))();
      var v1 = Graphics_Canvas.getCanvasElementById("canvas2d")();
      var v2 = Graphics_Canvas.getCanvasElementById("minimap")();
      if (v instanceof Data_Maybe.Just && (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just)) {
          return runApp(v.value0)(v1.value0)(v2.value0)();
      };
      return Control_Monad_Eff_Console.error("canvasGL not found")();
  });
  exports["main"] = main;
})(PS["Graphics.Babylon.Example.Sandbox.Main"] = PS["Graphics.Babylon.Example.Sandbox.Main"] || {});
PS["Graphics.Babylon.Example.Sandbox.Main"].main();